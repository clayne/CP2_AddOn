-- -*- mode: lua; encoding: windows-1251 -*-
--'*******************************************************************************
--'   **   **   -- Dynamic HUD Gift from ATT, Arharа and Kolmogor --   **   **  
--'*******************************************************************************
local suithud_enable = game_options.DynHud		-- худ костюма
local blurs_enable = game_options.DynHudBlurs	-- эффект запотевания
local zoom_enable = game_options.DynHudZoom		-- эффект прицеливания

local blood_enable = game_options.DynHudBlood	-- эффект ранения
local bleed_enable = game_options.DynHudBleed	-- эффект плохого самочувствия
--------------------------------------------------------------------------------
local statics4reload = {
	"cs_inviz",
	"hud_timer",
	"hud_timer_text"
}
-- кэш, секция костюма = тип худа
local section2hud = {}
local function get_hud_type()
	if not actor_outfit then return "hud_empty" end

	local section = actor_outfit:section()
	local res = section2hud[section]
	if not res then
		res = sys_ini:r_string_ex(section, "hud_type", "hud_empty")
		section2hud[section] = res
	end

	return res
end

local freemem = 0
local freemem2 = 0
function update(delta)
	freemem = freemem + delta
	if freemem > 700 then
		freemem = 0
		check_hud()
		bleedcondition()
	end
	zoom_hud(delta)
	freemem2 = freemem2 + delta
	if freemem2 > 40 then
		init_blurs()
		blood(freemem2)
		freemem2 = 0
	end
end

local hud_wnd = nil
local mycurrent_suithud = "hud_empty"
local suit_condition, wotsuittype
local last_outfit = -1

function check_hud()
	if suithud_enable==false or Actor:alive()==false then
		removeDynHud()
		return
	elseif hud_wnd == nil then
		local hud = get_hud()
		hud_wnd = hud:AddCustomStatic("dynamic_hud", true):wnd()
		biodetector.biodetectorRemove() --  alen-fantom
		ui_hud_control.reload()
		arc_ui_dosimeter.reload()
		for i, v in ipairs(statics4reload) do
			hud:ReloadCustomStatic(v)
		end
		ui_scroll_indicators.first_update()
		xr_s.subscribe( "net_destroy", this.removeDynHud )
	end

	wotsuittype = get_hud_type()
	suit_condition = ""
	if wotsuittype ~= "hud_empty" then
		local cond = actor_outfit:condition()
		if cond > 0.87 then suit_condition = "1"
		elseif cond > 0.69 then suit_condition = "2"
		elseif cond > 0.60 then suit_condition = "3"
		elseif cond > 0.40 then suit_condition = "4"
		elseif cond > 0.25 then suit_condition = "5"
		else suit_condition = "6" end
	end

	local suithudtype = wotsuittype..suit_condition
	if suithudtype == mycurrent_suithud then return end

	hud_wnd:InitTexture("abc\\"..suithudtype)
	mycurrent_suithud = suithudtype

	if suithudtype == "hud_empty" then
		last_outfit = -1
		return
	end

	local oid = actor_outfit:id()
	if last_outfit==oid then
		if suit_condition ~= "2" and suit_condition ~= "1" then
			local snd_obj = sound_object("material\\glass\\glass_fall0"..
				tostring(math.random(1,4)).."hl")
			snd_obj:play_no_feedback(Actor, sound_object.s2d, 0, vector(), 9.0)
		end
	end
	last_outfit = oid
end

function removeDynHud()
	if hud_wnd ~= nil then
		hud_wnd = nil
		get_hud():RemoveCustomStatic("dynamic_hud")
		mycurrent_suithud = "hud_empty"
	else
		ui_scroll_indicators.first_update()
	end
end

local actor_last_health = 0
local bloodtime = 0
local bloodtimeb = 0
local isbleeding = nil
local countblood = 0
function blood(delta)
	if not ( blood_enable and Actor:alive() ) then return end
	
	bloodtime = bloodtime + delta
	if bloodtime > 1500 then
		bloodtime = 0
		if isbleeding == false then
			local h = get_hud()
			for i=1,4 do
				if h:GetCustomStatic("hud_blood"..i) ~= nil then
					h:RemoveCustomStatic("hud_blood"..i)
					isbleeding = nil
				end
			end
		end
		
		if actor_last_health - Actor.health > 0.01 then
			isbleeding = true
		end
		actor_last_health = Actor.health
	end

	bloodtimeb = bloodtimeb + delta
	if bloodtimeb > 170 and isbleeding == true then
		bloodtimeb = 0
		countblood = countblood + 1
		get_hud():AddCustomStatic("hud_blood"..countblood)
		if countblood == 4 then
			isbleeding = false
			countblood = 0
		end
	end
end

local isactcondset = false
function bleedcondition()
	if not bleed_enable then return end
	if Actor.health < 0.31 and isactcondset ~= true then
		level.add_pp_effector ("alcohol.ppe", 2012, true)
		isactcondset = true
	end
	if Actor.health > 0.30 and isactcondset ~= false then
		level.remove_pp_effector (2012)
		isactcondset = false
	end
end


function init_blurs()
	if not blurs_enable then return end
	if mycurrent_suithud ~= "hud_empty"
		and suit_condition~="6"	-- много дырок, стекло не запотевает
		and wotsuittype~="hud_sci"	-- вентиляция в научных костюмах
	then
		local zoom=67.5/device().fov
		zoom=(zoom-1)*1.5+1
		if zoom<1.001 then
			zoom=1.001
		end
		local stretchy=0.75/(math.floor(device().aspect_ratio*1000)/1000)
		if stretchy<1 then stretchy=1 end
		local rect = {
			x = -768*zoom+768,
			y = (-512*zoom+512)*stretchy-(stretchy-1)*300,
			w = 1024*zoom,
			h = 768*zoom*stretchy
		}
		set_blurs(true,rect)
	else
		set_blurs(false)
	end
end

local blurs=nil
local blurval=0 -- уровень запотевания от 0 до 1
local blurlt=0 -- время последнего обновления
local blurcyctime=0 -- время начала последнего цикла дыхания (выдох)
local blurlastphase=0

function set_blurs(enabled,rect)
	if blurs==nil or get_hud():GetCustomStatic("hud_blur1")==nil then
		blurs={}
		for i=1,4 do
			blurs[i]=get_hud():AddCustomStatic("hud_blur"..i, true):wnd()
		--	blurs[i]=get_hud():GetCustomStatic("hud_blur"..i):wnd()
			blurs[i]:SetWidth(0)
		end
	end
	if enabled==false then
		for i=1,4 do
			blurs[i]:SetWidth(0)
		end
		return    
	end
  
-- Циклы в зависимости от силы дыхания: 0->1->0 0->1->2->4->5->0 0->1->2->3->4->5->0 5->4->3->4->5 4->3->4
	local power=Actor.power
	local period=1.0+power*power*1.0 -- текущая частота дыхания от 30 до 120 циклов в минуту
	local expirt=0.3
	local breathpower=3
	
	local _time = time_global()
	local delta=(_time-blurlt)/1000 -- дельта в секундах
	local phase=(_time-blurcyctime)/1000 -- фаза дыхательного цикла в сек.
	blurlt=_time
	if phase>period then
		phase=phase%period
		blurcyctime=blurlt-phase*1000
	end
	if blurlastphase>phase then
		blurlastphase=0
	end
  
	local blurdelta=delta*-0.7 -- работа вентиляции
	if blurlastphase<expirt and phase<expirt then
		blurdelta=blurdelta+(phase-blurlastphase)*breathpower
	elseif blurlastphase<expirt then
		blurdelta=blurdelta+(expirt-blurlastphase)*breathpower
	end
	blurlastphase=phase
  
	blurval=blurval+blurdelta
	if blurval>0.999 then
		blurval=0.999
	elseif blurval<0 then
		blurval=0
	end
  
	local tm=math.floor(blurval*3)
	local tmn=(tm+1)
	local v=blurval*3-math.floor(blurval*3)
	v=1-v
	local v1=1-v
	if tm~=0 then
		blurs[tm]:SetColor(GetARGB(v*255,255,255,255))
	end
	if tmn~=0 then
		blurs[tmn]:SetColor(GetARGB(v1*255,255,255,255))
	end
	for i=1,4 do
		if i==tm or i==tmn then
			blurs[i]:SetWndRect(Frect():set(rect.x,rect.y,rect.w,rect.h))
		else
			blurs[i]:SetWndRect(Frect():set(rect.x,rect.y,0,0))
		end
	end
end


-- Эффект прицеливания
-- Автор: Bak
-- Адаптация: Charsi
local pre_fov = 0
local precf = 0
local zbias = Frect():set(0,0,1027,768)
local zenc
function zoom_hud(delta)
	if not zoom_enable then return end
	if hud_wnd == nil then return end

	local cf = precf
	local fov = math.floor((device().fov+0.02)*10)
	if (not zenc) or (fov > 400 and pre_fov < fov) then
		zenc = nil
		if cf > 0 then
			cf = cf-(delta/400)
		end
	end
	if zenc or (fov < 650 and pre_fov > fov) then
		zenc = true
		if cf < 1 then
			cf = cf+(delta/400)
		end
	end
	cf = math.clamp(cf, 0, 1)
	if cf ~= precf then
		if actor_active_item then
			if actor_active_item:clsid() == clsid.wpn_binocular_s then
				if actor_active_item:section():find("wpn_binoc") then
					zbias:set(-100*cf,-100*cf,1027+100*cf,768+100*cf)
				else
					zbias:set(-350*cf,-175*cf,1027,768+175*cf)
				end
			elseif rx_utils.addon_attached(actor_active_item,"sc") then
				zbias:set(-350*cf,-175*cf,1027,768+175*cf)
			else
				zbias:set(-200*cf,-100*cf,1027,768+100*cf)
			end
			hud_wnd:SetWndRect(zbias)
		elseif precf ~= 0 then
			zbias:set(0,0,1027,768)
			hud_wnd:SetWndRect(zbias)
		end
		precf = cf
	end
	pre_fov = fov
end

function on_options_change()
	suithud_enable = game_options.DynHud
	blurs_enable = game_options.DynHudBlurs
	zoom_enable = game_options.DynHudZoom
	blood_enable = game_options.DynHudBlood
	bleed_enable = game_options.DynHudBleed
end
