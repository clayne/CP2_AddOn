-- -*- mode: lua; encoding: windows-1251 -*-
--[[
Изменения script_version:
  3 - сохранение поля job_online
  5 - сохранение поля was_in_smart_terrain
  6 - сохранение поля death_droped
]]
custom_data_on_spawn = nil

class "se_stalker"  (cse_alife_human_stalker)
--------------------
function se_stalker:__init (section) super (section)
	self.ini = nil
	self.ini_initialized = false

	self.smart_terrain_conditions = nil
	self.smart_terrain_conditions_initialized = false

	-- этот флаг берётся из работы смарта
	-- true     = всегда в онлайне
	-- false    = всегда в офлайне
	-- condlist = условие, которое отпределяет true или false
	-- nil      = смарту всё равно
	self.job_online          = nil
	self.job_online_condlist = nil

	-- посещал ли сталкер хоть один smart_terrain
	self.was_in_smart_terrain = false

	self.death_droped = false --'Генерил ли персонаж выпадаемые предметы или нет.
	self.treasure_processed = false
	self.linspiro_traded = false

	--' Test for dima
	self.dont_spawn_online = false

	-- Trade
	self.resupply_time = 0
	self.wait_resupply = false

	-- Rotting
	self.rot_time = 0
end
--------------------
function se_stalker:get_ini()
	if not self.ini_initialized then
		if custom_data_on_spawn then
			self.ini = create_ini_file(custom_data_on_spawn)
			custom_data_on_spawn = nil
		else
			self.ini             = self:spawn_ini ()
		end
		self.ini_initialized = true

		if self.ini:section_exist("spawner") then
			self.spawner = xr_logic.parse_condlist(Actor, "spawner", "cond", self.ini:r_string("spawner", "cond"))
		end
	end
end
--------------------
function se_stalker:get_job_online()
	if self.job_online_condlist == nil then
		return self.job_online
	else
		return xr_logic.pick_section_from_condlist(db.actor_proxy, self, self.job_online) ~= nil
	end
end
--------------------
function se_stalker:can_switch_offline ()
	if amk.convert_npc[self.id]==true then 
		return true 
	end

	local job = self:get_job_online()
	if job ~= nil then
		return not job
	else
		return cse_alife_human_stalker.can_switch_offline (self)
	end
end
--------------------
function se_stalker:update()
	cse_alife_human_stalker.update(self)

	if self.wait_resupply and game_time_hours then
	--	log("[se_stalker:update] update resuply time for %s, time left: %s", self:name(), tostring(self.resupply_time - game_time_hours))
		if game_time_hours > self.resupply_time then
			news_main.send_resupply(self)
			self.wait_resupply = false
		end
	end
end
--------------------
function se_stalker:can_switch_online ()
	if amk.convert_npc[self.id]==true then 
		return false
	end
	if self.dont_spawn_online == true then
		return false
	end

	local job = self:get_job_online()
	if job ~= nil then
		return job
	end

	if self.ini == nil or self.spawner == nil then
		return cse_alife_human_stalker.can_switch_online(self)
	end

	if Actor ~= nil and Actor:alive () == false then
		return self.online
	end

	if self.online == false then
		return (xr_logic.pick_section_from_condlist(Actor, self, self.spawner) ~= nil) and cse_alife_human_stalker.can_switch_online(self)
	else
		if xr_logic.pick_section_from_condlist(Actor, self, self.spawner) ~= nil then 
			return true
		end
		return false
	end         
end
--------------------
function se_stalker:STATE_Write (packet)
	cse_alife_human_stalker.STATE_Write (self, packet)

	if self.job_online == true then
		packet:w_u8(0)
	elseif self.job_online == false then
		packet:w_u8(1)
	elseif self.job_online == nil then
		packet:w_u8(2)
	else
		packet:w_u8(3)
		packet:w_stringZ(self.job_online_condlist)
	end

	packet:w_bool(self.was_in_smart_terrain)
	
	-- Запишем состояние раненности.
	local ddw=0
	if self.death_droped		then ddw = bit_or(ddw, 1) end
	if self.wounded				then ddw = bit_or(ddw, 2) end
	if self.treasure_processed	then ddw = bit_or(ddw, 4) end
	if self.linspiro_traded		then ddw = bit_or(ddw, 8) end
	packet:w_u8(ddw)

	local game_hours = amk.game_hours()
	-- Trade
	local _time = self.resupply_time - game_hours
	packet:w_s16(_time)
--	log("[se_stalker:STATE_Write] %s -> saved resupply_time = %s", self:name(), _time)
	--Rotting
	if self.rot_time == 0 then
		-- Ещё живой, или ГГ до него не добрался
		packet:w_u8(0)
	elseif self.rot_time > game_hours then
		-- процесс пошёл, но пока не гниёт
		packet:w_u8(self.rot_time - game_hours)
	else
		-- гниёт
		packet:w_u8(255)
	end
end
--------------------
function se_stalker:STATE_Read (packet, size)
	cse_alife_human_stalker.STATE_Read (self, packet, size)

	local t = packet:r_u8()
	t=bit_and(t,3) -- Задел на будущее
	if t == 0 then
		self.job_online = true
	elseif t == 1 then
		self.job_online = false
	elseif t == 2 then
		self.job_online = nil
	else
		self.job_online_condlist = packet:r_stringZ()

		self.job_online = xr_logic.parse_condlist(nil, "se_stalker:STATE_Read", "job_online", self.job_online_condlist)
	end

	self.was_in_smart_terrain = packet:r_bool()

	local ddw = packet:r_u8()
	self.death_droped		= bit_and(ddw,1) ~= 0
	self.wounded			= bit_and(ddw,2) ~= 0	-- Прочитаем состояние раненности.
	self.treasure_processed	= bit_and(ddw,4) ~= 0
	self.linspiro_traded	= bit_and(ddw,8) ~= 0

	local _time = packet:r_s16()
	local gh = amk.game_hours()
	self.resupply_time = gh + _time
	-- log("[se_stalker:STATE_Read] %s -> resupply_time = %s", self:name(), _time)
	if self.resupply_time > gh then
		self.wait_resupply = true
	end
	--Rotting
	if packet:r_eof() then return end
	ddw = packet:r_u8()
	if ddw == 0 then
		self.rot_time = 0
	elseif ddw == 255 then
		self.rot_time = gh - 1
	else
		self.rot_time = gh + ddw
	end
end
--------------------
function se_stalker:on_before_register()
	self:fill_exclusives()
end
--------------------
function se_stalker:on_register()
	-- Чистим рестрикторы
	netpk:modify( self, { dynamic_in_restrictions = {} }, net_packet.fState )
	
	cse_alife_human_stalker.on_register( self )

	local community = self:community()
	if not(community == "zombied"
		-- or community == "monolith"
		or community == "arena_enemy")
	then
		actor_stats.add_to_ranking(self.id)
	end

	--' Регистрация в таскменеджере
	task_manager.get_random_task():register_target(self)

	if self:alive() then
		if self:smart_terrain_id() == 65535 then
			self:brain():update()
		end
		amk_names_lists.add_name(self)
	end
	-- dsh: Принудительно установим мобам flInteractive
	-- Есть подозрение, что те, у кого этот флаг сброшен, а таких полно в all.spawn, не обходят аномалии.
	AI:set_interactive( self, true )
end
--------------------
function se_stalker:on_unregister()
	cse_alife_human_stalker.on_unregister(self)

	smart_terrain.unregister_npc(self)

	--' Отрегистрация в таскменеджере
	task_manager.get_random_task():unregister_target(self)

	if(actor_stats.remove_from_ranking~=nil)then
		local community = self:community()
		if community == "zombied"
			-- or community == "monolith"
			or community == "arena_enemy"
		then
			return
		end
		actor_stats.remove_from_ranking(self.id)
	end
end
--------------------
function se_stalker:on_spawn()
	cse_alife_human_stalker.on_spawn(self)
end
--------------------
function se_stalker:on_death(killer)
	cse_alife_human_stalker.on_death(self, killer)
end
--------------------
function se_stalker:fill_exclusives()
	self:get_ini()
	self.smart_terrain_conditions = smart_terrain.read_smart_terrain_conditions( self )

	if self.smart_terrain_conditions then
		for name, condlist in pairs(self.smart_terrain_conditions) do
			smart_terrain.exclusives[name] = (smart_terrain.exclusives[name] or 0) + 1
		end
	end
end



--'Торговец
class "se_trader" (cse_alife_trader)
function se_trader:__init (section) super (section)
	self.resupply_time = 0
end
function se_trader:keep_saved_data_anyway()
  return true
end
function se_trader:STATE_Write (packet)
	cse_alife_trader.STATE_Write (self, packet)

	local _time = self.resupply_time - amk.game_hours()
	packet:w_s16(_time)
	-- log("[se_trader:STATE_Write] %s -> saved resupply_time = %s", self:name(), _time)
end
function se_trader:STATE_Read (packet, size)
	cse_alife_trader.STATE_Read (self, packet, size)

	local _time = packet:r_s16()
	self.resupply_time = amk.game_hours() + _time
	-- log("[se_trader:STATE_Read] %s -> resupply_time = %s", self:name(), _time)
end
