-- -*- mode: lua; encoding: windows-1251 -*-

local db_click_timeout = 300
local used_container = -1
local actor_radiation_v = sys_ini:r_float('actor_condition', 'radiation_v')

function show_menu(container)
	local wnd = level.main_input_receiver()
	if wnd then level.start_stop_menu(wnd, true) end

	used_container = container:id()
	local arts = arc_containers.get_container_arts(used_container)
	local se_obj = AI:create(container:section(), vector():set(0,0,0), 0, 0, 0)
	if arts then
		arc_containers.set_container_arts( se_obj.id, arts )
	end

	level.start_stop_menu( arc_containers_menu(se_obj, arts), true )
end

class "arc_containers_menu" (CUIScriptWnd)

function arc_containers_menu:__init(obj, arts)
	super()

	self.quit_dik = bind_to_dik( key_bindings.kQUIT )
	get_console():execute( "unbind quit" )

	self.items_to_convert = {}
	self.artefacts = {}
	self.containers = {}
	self.containers_for_save = {}
	self.container_types = {}
	self.arts_weight = 0
	self.arts_rad = 0

	self:insert_container(obj.id, obj:section_name(), arts)
	self.container_index = 1

	self:search_inventory()

	self:InitControls()

	self:FillContainer()
	self:FillRuck()

	xr_s.subscribe("item_take", self.OnItemTake, {self = self})

	self.DescrWnd = ui_inv_descr.CUIDescriptionWnd(self, true)

	bind_actor.hide_weapon("container")
	
	self.wnd = self
end

function arc_containers_menu:__finalize()
end

function arc_containers_menu:InitControls()
	self:Init(0, 0, 1024, 768)

	local xml = CScriptXmlInit()
	xml:ParseFile("ui_arc_container_menu.xml")

	local back = xml:InitFrame("frame", self)
	local cont = xml:InitStatic("art_box", back)

	local st = xml:InitStatic("container", cont)
	self:Register(st, "container")
	self:AddCallbackEx("container", ui_events.STATIC_FOCUS_RECEIVED, self.OnBagFocus, "container")
	self:AddCallbackEx("container", ui_events.STATIC_FOCUS_LOST, self.OnBagFocusLost, "container")

	for n in pairs(self.container_types) do
		st = xml:InitStatic("dragdrop_container_"..n, cont)
		self["container_"..n] = ui_dragdrop_list.UIDragDropList( st:GetWidth(), st:GetHeight(), st:GetText() )
		st:AttachChild(self["container_"..n])
		self["container_"..n]:Enable(false)
		self["container_"..n]:Show(false)
	end

	local bag = xml:InitStatic("dragdrop_bag", back)
	self:Register(bag, "bag")
	self:AddCallbackEx("bag", ui_events.STATIC_FOCUS_RECEIVED, self.OnBagFocus, "our_bag")
	self:AddCallbackEx("bag", ui_events.STATIC_FOCUS_LOST, self.OnBagFocusLost, "our_bag")
	self.our_bag = ui_dragdrop_list.UIDragDropList( bag:GetWidth(), bag:GetHeight(), bag:GetText() )
	bag:AttachChild(self.our_bag)
	self.our_bag:Show(true)

	self.weight_st = xml:InitStatic("arts_weight", back)
	self.rad_st = xml:InitStatic("arts_rad", back)
	self.protect_st = xml:InitStatic("cont_protect", back)

	local sh = #self.containers > 1

	local btn = xml:InitButton("btn_prev", cont)
	self:Register(btn, "btn_prev")
	self:AddCallbackEx("btn_prev", ui_events.BUTTON_CLICKED, self.PrevContainer)
	btn:SetText("<<")
	btn:Show(sh)

	btn = xml:InitButton("btn_next", cont)
	self:Register(btn, "btn_next")
	self:AddCallbackEx("btn_next", ui_events.BUTTON_CLICKED, self.NextContainer)
	btn:SetText(">>")
	btn:Show(sh)

	btn = xml:InitButton("btn_quit", cont)
	self:Register(btn, "btn_quit")
	self:AddCallbackEx("btn_quit", ui_events.BUTTON_CLICKED, self.Quit)

	self.drag_item = ui_drag_item.UIDragItem()
	self:AttachChild(self.drag_item)
	self.drag_item:Show(false)
	self.move_item = false

	self.message_box = CUIMessageBoxEx()
end

function arc_containers_menu:Update()
	CUIScriptWnd.Update(self)

	if self.first_click and self.first_click < time_global() then
		self.first_click = nil
	end

	if self.move_item then
		if self.last_cur_pos then
			local pos = self:GetCursorPos()
			if pos.x ~= self.last_cur_pos.x or pos.y ~= self.last_cur_pos.y then
				self.drag_item:Show(true)
				self.last_cur_pos = nil
			end
		else
			self.drag_item:SetWndPos( self:GetCursorPos():add( self.drag_item.shift ):get() )
		end
	end
end

function arc_containers_menu:PrevContainer()
	self.container_index = self.container_index - 1
	if self.container_index < 1 then
		self.container_index = #self.containers
	end
	self:FillContainer()
end

function arc_containers_menu:NextContainer()
	self.container_index = self.container_index + 1
	if self.container_index > #self.containers then
		self.container_index = 1
	end
	self:FillContainer()
end

function arc_containers_menu:insert_container(id, section, arts)
	if id == used_container then return end

	local t = {}
	t.container = {
		section = section,
		id = id,
		slots = sys_ini:r_u32( section, "container_slots" )
	}
	self.container_types[t.container.slots] = true
	if not arts then
		arts = arc_containers.get_container_arts(id)
	end
	t.arts = {}
	for i, v in ipairs(arts) do
		local art
		if v.s ~= "_" then
			art = fake_inventory_item.fake_item(v)
		else
			art = false
		end
		table.insert(t.arts, art)
	end
	table.insert(self.containers, t)
end

function arc_containers_menu:search_inventory()
	local section
	Actor:iterate_inventory( function(dummy, item)
		section = item:section()
		if string.find(section, "arc_art_box") then
			self:insert_container(item:id(), section, nil)
	--	elseif item:is_artefact() and bind_det_arts.is_detected_art(section) then
		elseif ( sys_ini:line_exist(section, "radiation_restore_speed")
			and sys_ini:r_float(section, "radiation_restore_speed") > 0 )
			or ( item:is_artefact()
			and bind_det_arts.is_detected_art(section) )
		then
			table.insert(self.artefacts, item)
		end
	end,
	Actor)
end

function arc_containers_menu:FillContainer()
	local t_cont = self.containers[self.container_index]
	self.container_slots = t_cont.container.slots
	if #t_cont.arts > self.container_slots then
		log("! artefacts count [%s] in container [%s:%s] more than slots count [%s]",
			#t_cont.arts, t_cont.container.section, t_cont.container.id, self.container_slots)
		table.print(t_cont.arts)
	end
	self.current_dragdrop =  "container_"..self.container_slots
	self.cont_protection = sys_ini:r_float(t_cont.container.section, "rad_protection")

	for v in pairs(self.container_types) do
		if self.container_slots ~= v then
			self["container_"..v]:Enable(false)
			self["container_"..v]:Show(false)
		end
	end

	local dragdrop = self[self.current_dragdrop]
	dragdrop:Enable(true)
	dragdrop:Show(true)
	dragdrop:Clear()
	self.arts_weight = 0
	self.arts_rad = 0
	local v, r
	for i = 1, self.container_slots do
		v = t_cont.arts[i]
		if v then
			local itm = dragdrop:AddItemToPlace(v, i)
			if itm then
				local nm = itm.name.."_c"..self.container_index
				self:Register(itm, nm)
				self:AddCallbackEx(nm, ui_events.STATIC_FOCUS_RECEIVED, self.OnCellItemFocus, self.current_dragdrop, itm.name)
				self:AddCallbackEx(nm, ui_events.STATIC_FOCUS_LOST, self.OnCellItemFocusLost, self.current_dragdrop, itm.name)
			else
				abort("[arc_containers_menu:FillContainer] can not add item %s", v:name())
			end
			self.arts_weight = self.arts_weight + v:get_weight()
			r = sys_ini:r_float(v:section(), "radiation_restore_speed")
			if r > self.cont_protection then
				self.arts_rad = self.arts_rad + r - self.cont_protection
			end
		end
	end

	self.protect_st:SetText( string.format("%d", self.cont_protection/actor_radiation_v) )

	self:ShowArtsWeight()
end

function arc_containers_menu:FillRuck()
	for i, v in ipairs(self.artefacts) do
		local itm, first = self.our_bag:AddItem(v)
		if first then
			local nm = itm.name.."_r"
			self:Register(itm, nm)
			self:AddCallbackEx(nm, ui_events.STATIC_FOCUS_RECEIVED, self.OnCellItemFocus, "our_bag", itm.name)
			self:AddCallbackEx(nm, ui_events.STATIC_FOCUS_LOST, self.OnCellItemFocusLost, "our_bag", itm.name)
		end
	end
end

function arc_containers_menu:ShowArtsWeight()
	self.weight_st:SetText( string.format("Вес артефактов: %.2f кг", self.arts_weight) )
	self.rad_st:SetText( string.format("Неэкранированное излучение: %d Ки", self.arts_rad/actor_radiation_v) )
end

function arc_containers_menu:OnCellItemFocus(from_where, item_name)
	self.item_in_focus = item_name

	local bag = self[from_where]
	local itm = bag:GetItem(item_name)
	if itm then
		xr_s.on_event("cell_item_focus", itm:GetTopItem())
	end
end
function arc_containers_menu:OnCellItemFocusLost(from_where, item_name)
	if self.item_in_focus == item_name then
		self.item_in_focus = nil
	end

	local bag = self[from_where]
	local itm = bag:GetItem(item_name)
	if itm then
		xr_s.on_event("cell_item_focus_lost", itm:GetTopItem())
	end
end

function arc_containers_menu:OnBagFocus(bag)
	if bag == "container" then
		bag = self.current_dragdrop
	end
	self.bag_in_focus = bag
end
function arc_containers_menu:OnBagFocusLost(bag)
	if bag == "container" then
		bag = self.current_dragdrop
	end
	if self.bag_in_focus == bag then
		self.bag_in_focus = nil
	end
end

function arc_containers_menu:TransferItem(from_where, to_where, item_name)
	local bag_from = self[from_where]
	local itm = bag_from:GetItem(item_name)
	if not itm then return end

	self.containers_for_save[self.container_index] = true

	local item = itm:GetTopItem()
	local bag_to = self[to_where]

	local mul = 0
	local add_rad = 0
	local item_rad = sys_ini:r_float(item:section(), "radiation_restore_speed")
	if item_rad > self.cont_protection then
		add_rad = item_rad - self.cont_protection
	end
	local add_weight = item:get_weight()
	local add_cost = item:cost()


	local t_cont = self.containers[self.container_index]

	if item.is_fake then	-- перемещаем из контейнера в рюкзак
		for i, v in ipairs(t_cont.arts) do
			if v and v:id() == item:id() then
				t_cont.arts[i] = false
				arc_containers.remove_art(t_cont.container.id, i)
				break
			end
		end

		add_weight = -add_weight
		add_rad = -add_rad
		add_cost = -add_cost


		self:ConvertFakeItem(item)
		bag_from:RemoveItem(item)
	else		-- из рюкзака в контейнер
		local check, index = bag_to:AddItem(item, true)
		if check then
			local obj = fake_inventory_item.fake_item(item)
			local new_itm, idx = bag_to:AddItem(obj)
			local nm = new_itm.name.."_c"..self.container_index
			self:Register(new_itm, nm)
			self:AddCallbackEx(nm, ui_events.STATIC_FOCUS_RECEIVED, self.OnCellItemFocus, self.current_dragdrop, new_itm.name)
			self:AddCallbackEx(nm, ui_events.STATIC_FOCUS_LOST, self.OnCellItemFocusLost, self.current_dragdrop, new_itm.name)

			if t_cont.arts[idx] ~= false then
				abort("arc_containers_menu:TransferItem : place #%s already taken in container [%s:%s]", idx, t_cont.container.section, t_cont.container.id)
			end
			t_cont.arts[idx] = obj
			arc_containers.insert_art(t_cont.container.id, obj, idx)
		else
			return
		end

		for i, v in ipairs(self.artefacts) do
			if v:id() == item:id() then
				table.remove(self.artefacts, i)
				break
			end
		end

		bag_from:RemoveItem( item )

		shiftCheckDropItem()
		xr_statistic.set_id(item:id(), nil)
		del_obj_by_id( item:id() )

		if add_rad > 0 then
			if self.move_item then
				self.move_item = false
				self.last_cur_pos = nil
				if self.drag_item:IsShown() then
					self.drag_item:Show(false)
				end
			end
			self.message_box:Init("message_box_empty_file_name")
			self.message_box:SetText(
				string.format(
					game.translate_string("st_no_full_radiation_protection"),
					add_rad / actor_radiation_v
				)
			)
			self:GetHolder():start_stop_menu(self.message_box, true)
		end
	end

	if add_rad ~= 0 then
		arc_radiation.change_inv_radiation(add_rad)
		self.arts_rad = self.arts_rad + add_rad
	end
	self.arts_weight = self.arts_weight + add_weight
	arc_containers.change_container_params(t_cont.container.id, add_weight, add_cost)

	self:ShowArtsWeight()
end

function arc_containers_menu:ConvertFakeItem(item)
	local sect = item:section()
	local sobj = AI:create(sect, vector():set(0,0,0), 0, 0, 0)

	if isArtefact(sobj) and bind_det_arts.is_detected_art(sobj:section_name()) then
		xr_statistic.set_id(sobj.id, true)
	end
	item:write_server_object(sobj)

	self.items_to_convert[sobj.id] = item:condition()

	item:destroy()
end

function arc_containers_menu:OnItemTake(item)
	local cond = self.items_to_convert[item:id()]
	if cond == nil then return end

	if cond<1 then
		item:set_condition(cond)
	end

	table.insert(self.artefacts, item)
	local itm, first = self.our_bag:AddItem(item)
	if first then
		local nm = itm.name.."_r"
		self:Register(itm, nm)
		self:AddCallbackEx(nm, ui_events.STATIC_FOCUS_RECEIVED, self.OnCellItemFocus, "our_bag", itm.name)
		self:AddCallbackEx(nm, ui_events.STATIC_FOCUS_LOST, self.OnCellItemFocusLost, "our_bag", itm.name)
	end

	self.items_to_convert[item:id()] = nil
end

function arc_containers_menu:ReplaceArt(cell_item_name, new_idx)
	local itm = self[self.current_dragdrop]:GetItem(cell_item_name)
	local item = itm:GetTopItem()

	local t_cont = self.containers[self.container_index]
	if t_cont.arts[new_idx] ~= false then
		abort("arc_containers_menu:ReplaceArt : place #%s already taken in container [%s:%s]", idx, t_cont.section, t_cont.id)
	end

	local v
	for i = 1, #t_cont.arts do
		v = t_cont.arts[i]
		if v and v:id() == item:id() then
			t_cont.arts[i] = false
			t_cont.arts[new_idx] = item
			break
		end
	end
	self.containers_for_save[self.container_index] = true
end

function arc_containers_menu:SaveContainers()
	for idx in pairs(self.containers_for_save) do
		local t = self.containers[idx]
		local a = {}
		for i, v in ipairs(t.arts) do
			if v then
				a[i] = v:get_table()
			else
				a[i] = { s = "_" }
			end
		end
		arc_containers.set_container_arts(t.container.id, a)
	end
end

function arc_containers_menu:Quit()
	local key = hotkeys.dik2key( self.quit_dik )
	if not key:find("MOUSE") then key = "k"..key end
	get_console():execute( "bind quit "..string.lower( key ) )

	for v in pairs(self.container_types) do
		self["container_"..v]:Destroy()
		self["container_"..v] = nil
	end
	self.our_bag:Destroy()
	self.our_bag = nil
	self.drag_item.shift = nil
	self.drag_item = nil
	self.weight_st = nil
	self.message_box = nil
	self.DescrWnd:Remove()
	self.DescrWnd = nil
	self.last_cur_pos = nil

	self:SaveContainers()

	self.items_to_convert = nil
	for i = 1, #self.artefacts do
		self.artefacts[i] = nil
	end
	self.artefacts = nil
	for i = 1, #self.containers do
		for j = 1, #self.containers[i].arts do
			if self.containers[i].arts[j] then
				self.containers[i].arts[j]:destroy()
				self.containers[i].arts[j] = nil
			end
		end
		self.containers[i] = nil
	end
	self.containers = nil

	xr_s.unsubscribe("item_take", self.OnItemTake)

	used_container = -1

	bind_actor.restore_weapon("container")

	self:ClearCallbacks()
	self:GetHolder():start_stop_menu(self, true)
	self.wnd = nil

	local wnd = level.get_inventory_wnd()
	if wnd then
		level.start_stop_menu(wnd, true)
	end
end

function arc_containers_menu:OnKeyboard(dik, keyboard_action)
	CUIScriptWnd.OnKeyboard(self,dik,keyboard_action)
	if keyboard_action == ui_events.WINDOW_KEY_PRESSED then
		if dik == self.quit_dik then
			self:Quit()
		end
	end

	if dik ~= DIK_keys.DIK_LMOUSE then
		return true
	end

	if keyboard_action == ui_events.WINDOW_KEY_PRESSED then
		if self.first_click == nil then
			if self.item_in_focus and self.bag_in_focus then
				self.selected_item = self.item_in_focus
				self.item_owner = self.bag_in_focus

				local bag = self[self.item_owner]
				local itm = bag:GetItem(self.selected_item)
				if itm then
					self.drag_item:InitItem( itm:GetTopItem() )
					local x = itm:GetAbsolutePosX()
					local y = itm:GetAbsolutePosY()
					self.last_cur_pos = self:GetCursorPos()
					self.drag_item.shift = vector2():set(
						x - self.last_cur_pos.x,
						y - self.last_cur_pos.y
					)
					self.drag_item:Init( x, y, itm:GetWidth(), itm:GetHeight() )

					self.move_item = true
				end
			end
			self.first_click = time_global() + db_click_timeout
		else
			if self.first_click > time_global() then
				if self.item_in_focus and self.bag_in_focus then
					local to = (self.current_dragdrop == self.bag_in_focus) and "our_bag" or self.current_dragdrop
					self:TransferItem(
						self.bag_in_focus,
						to,
						self.item_in_focus
					)
				end
				self.first_click = time_global() + db_click_timeout
			else
				self.first_click = nil
			end
		end
	elseif keyboard_action == ui_events.WINDOW_KEY_RELEASED then
		if self.move_item then
			self.move_item = false
			self.last_cur_pos = nil
			if self.drag_item:IsShown() then
				self.drag_item:Show(false)
			end
		end

		if self.selected_item and self.bag_in_focus then
			if self.item_owner ~= self.bag_in_focus then
				self:TransferItem(
					self.item_owner,
					self.bag_in_focus,
					self.selected_item
				)
			elseif self.item_owner == self.current_dragdrop then
				local idx = self[self.current_dragdrop]:ReplaceItem(self.selected_item)
				if idx then
					self:ReplaceArt(self.selected_item, idx)
				end
			end
		end
		self.selected_item = nil
		self.item_owner = nil
	end
	
	return true
end
