-- -*- mode: lua; encoding: windows-1251 -*-
-- Options
local show_npc = true
local show_enemy = false
local show_corpse = true
local show_monsters = false
local show_time = true
local show_compass = true
local show_quick_slots = false
local biodetector_mode = false
---------------------------------------------------------------------------
local bind_to_show = key_bindings.kSCORES
local dev = device()
local has_spot = level.map_has_object_spot
local level_object = level.object_by_id
local math_cos = math.cos
local math_sin = math.sin
local table_insert = table.insert

local wnd = nil

local step_angle = 1.5/(180/math.pi) -- шаг за миллисекунду в радианах (скорость поворота локатора)
local two_pi = 2*math.pi

local map_zoom = 2
local map_dist = 150/map_zoom

local detector = nil

local level_spots = {}

local map_spots = {
	["blue_location"]              = { tex = "ui_icons_newPDA_SmallBlue",           sz = 11, below_above = true },
	["green_location"]             = { tex = "ui_icons_newPDA_SmallGreen",          sz = 11, below_above = true },
	["red_location"]               = { tex = "ui_icons_newPDA_SmallRed",            sz = 11, below_above = true },
	["red_location_1"]             = { tex = "ui_icons_newPDA_SmallRed",            sz = 11, below_above = true },
	["gps_stalker"]                = { tex = "ui_mapPDA_gps_stalker",               sz = 11, below_above = true },
	["habar_location"]             = { tex = "ui_mapPDA_habar_small",               sz = 10, below_above = true },
	["habar_location_w"]           = { tex = "ui_icons_mapPDA_habar_small_w",       sz = 10, below_above = true },
	["habar_clear_location"]       = { tex = "ui_mapPDA_habar_clear",               sz = 10, below_above = true },
	["habar_clear_location_w"]     = { tex = "ui_icons_mapPDA_habar_clear_small_w", sz = 10, below_above = true },
	["eliminate_lager_location"]   = { tex = "ui_sm_mapQuest_camp_destroy",         sz = 15, below_above = true },
	["defend_lager_location"]      = { tex = "ui_sm_mapQuest_camp_defend",          sz = 13, below_above = true },
	["artefact_location"]          = { tex = "ui_sm_mapQuest_artefact",             sz = 13, below_above = true },
	["kill_stalker_location"]      = { tex = "ui_sm_mapQuest_stalker_destroy",      sz = 13, below_above = true },
	["monster_part_location"]      = { tex = "ui_sm_mapQuest_monster_find",         sz = 13, below_above = true },
	["find_item_location"]         = { tex = "ui_mapQuest_item",                    sz = 13, below_above = true },
	["anomaly_zone_location"]      = { tex = "anomaly_zone",                        sz = 16, below_above = false },
	["anomaly_bald_location"]      = { tex = "anomaly_bald",                        sz = 16, below_above = false },
	["anomaly_minc_location"]      = { tex = "anomaly_mincer",                      sz = 16, below_above = false },
	["anomaly_grav_location"]      = { tex = "anomaly_gravi",                       sz = 16, below_above = false },
	["anomaly_rad_location"]       = { tex = "anomaly_radiation",                   sz = 16, below_above = false },
	["anomaly_elec_location"]      = { tex = "anomaly_electra",                     sz = 16, below_above = false },
	["anomaly_mine_location"]      = { tex = "anomaly_mine",                        sz = 16, below_above = false },
	["anomaly_burn_location"]      = { tex = "anomaly_burn",                        sz = 16, below_above = false },
	["anomaly_ice_location"]       = { tex = "anomaly_ice",                         sz = 16, below_above = false },
	["anomaly_ameba_location"]     = { tex = "anomaly_ameba",                       sz = 16, below_above = false },
	["anomaly_buzz_location"]      = { tex = "anomaly_buzz_green",                  sz = 16, below_above = false },
	["anomaly_sakbuzz_location"]   = { tex = "anomaly_fireball",                    sz = 16, below_above = false },
	["anomaly_fountain_location"]  = { tex = "anomaly_fountain",                    sz = 16, below_above = false },
	["anomaly_sphere_location"]    = { tex = "anomaly_sphere",                      sz = 16, below_above = false },
	["anomaly_smallrain_location"] = { tex = "anomaly_smallrain",                   sz = 16, below_above = false },
	["level_changer"]              = { tex = "ui_mapPDA_level_changer",             sz = 15, below_above = false },
	["level_changer1"]             = { tex = "ui_mapPDA_level_changer5",            sz = 15, below_above = false },
	["level_changer2"]             = { tex = "ui_mapPDA_level_changer5",            sz = 15, below_above = false },
	["level_changer3"]             = { tex = "ui_mapPDA_level_changer5",            sz = 15, below_above = false },
	["level_changer4"]             = { tex = "ui_mapPDA_level_changer5",            sz = 15, below_above = false },
	["level_changer5"]             = { tex = "ui_mapPDA_level_changer5",            sz = 15, below_above = false },
	["treasure"]                   = { tex = "ui_mapPDA_treasure",                  sz = 15, below_above = false },
	["profi"]                      = { tex = "ui_mapPDA_profi_targ_spot",           sz = 16, below_above = false },
	["rx_gl_alarm"]                = { tex = "ui_frame_error_sign_red",             sz = 48, below_above = false },
	["crlc_big_1"]                 = { tex = "ui_icons_newPDA_Crclbig_1",           sz = 100, below_above = false, heading = true },
	["crlc_big_2"]                 = { tex = "ui_icons_newPDA_Crclbig_2",           sz = 100, below_above = false, heading = true },
	["crlc_big_3"]                 = { tex = "ui_icons_newPDA_Crclbig_3",           sz = 100, below_above = false, heading = true },
	["crlc_big_4"]                 = { tex = "ui_icons_newPDA_Crclbig_4",           sz = 100, below_above = false, heading = true },
	["crlc_big_5"]                 = { tex = "ui_icons_newPDA_Crclbig_5",           sz = 100, below_above = false, heading = true },
	["crlc_big_6"]                 = { tex = "ui_icons_newPDA_Crclbig_6",           sz = 100, below_above = false, heading = true },
	["crlc_big_7"]                 = { tex = "ui_icons_newPDA_Crclbig_7",           sz = 100, below_above = false, heading = true },
	["crlc_big_8"]                 = { tex = "ui_icons_newPDA_Crclbig_8",           sz = 100, below_above = false, heading = true },
	["crlc_big_9"]                 = { tex = "ui_icons_newPDA_Crclbig_9",           sz = 100, below_above = false, heading = true },
	["npc"]                        = { tex = "ui_minimap_point",                    sz =   3, below_above = false }
}
---------------------------------------------------------------------------
class "UIScriptHUD" (CUIWindow)

function UIScriptHUD:__init()
	super()

	self.biodetector_mode = false
	self.sweep_angle = 0

	self.is_break = false

	self:Init(0, 0, 1024, 768)

	local xml = CScriptXmlInit()
	xml:ParseFile("ui_script_hud.xml")

	local ini = game_ini()
	local level_name = level.name()
	self.map_texture = ini:r_string_ex(level_name, "texture", "ui\\ui_nomap2")

	self.bound_rect = ini:r_rect(level_name, "bound_rect")
		or Frect():set(10000, 10000, -10000, -10000)

	self.map_frame = xml:InitStatic("level_frame", self)
	self.map_frame:ClipperOn()
	self.clip_center = vector2():set( self.map_frame:GetWidth()/2, self.map_frame:GetHeight()/2 )

	self.map = xml:InitStatic("level_map", self.map_frame)
	local w = self.bound_rect:width() *map_zoom
	local h = self.bound_rect:height() *map_zoom
	self.map:SetWndRect( 0, 0, w, h )
	self.map:InitTexture(self.map_texture)
	self.map_center = vector2():set( w/2, h/2 )

	self.sweep = xml:InitStatic("biodetector_sweep", self.map_frame)
	self.sweep:Show(false)

	local st = xml:InitStatic("minimap_center", self.map_frame)
	st:SetWndPos(
		self.clip_center.x - st:GetWidth()/2,
		self.clip_center.y - st:GetHeight()/2
	)
	self.minimap_center = st

	self.level_spots = {}
	self.del_spots = {}

	st = xml:InitStatic("background", self)

	self.compass = xml:InitStatic("minimap_compass", st)
	self.compass:Show(show_compass)

	self.body_state = xml:InitStatic("body_state", self)

	self.progress_torch = xml:InitStatic("static_torch", self)
	self.progress_torch.scale = xml:InitProgressBar("torch_progress", self.progress_torch)

	st = xml:InitStatic("static_power", self)
	self.progress_power = xml:InitProgressBar("power_progress", st)

	st = xml:InitStatic("static_health", self)
	self.progress_health = xml:InitProgressBar("progress_bar_health", st)

	self.progress_armor = xml:InitStatic("static_armor", self)
	self.progress_armor.scale = xml:InitProgressBar("progress_bar_armor", self.progress_armor)

	self.progress_radiation = xml:InitStatic("static_radiation", self)
	self.progress_radiation.scale = xml:InitProgressBar("progress_bar_radiation", self.progress_radiation)

	self.time_static = xml:InitStatic("time_static", self)

	xr_s.subscribe("key_press", self.OnKeyPress, {self = self})
	xr_s.subscribe("key_release", self.OnKeyRelease, {self = self})
	xr_s.subscribe("update", self.Update, {self = self})
	self.need_update = false

	if has_alife_info("pda_dont_work") then
		self:Break(true)
	elseif biodetector_mode then
		self:SwitchBioradar()
	end
end

function UIScriptHUD:__finalize()
end

function UIScriptHUD:Update(delta)
	if self.is_break then return end

	amk.oau_reason="UIScriptHUD:Update"
	amk.oau_watchdog=18810
	if biodetector_mode then
		self.sweep_angle = self.sweep_angle - step_angle*delta/20
		if self.sweep_angle < 0 then
			self.sweep_angle = self.sweep_angle + two_pi
		end
	end

	-- удалим неактуальные метки
	if #self.del_spots > 0 then
		local n
		for i, v in ipairs(self.del_spots) do
			n = self:FindSpot( v[1], v[2] )
			if n then
				self.map:DetachChild( table.remove(self.level_spots, n) )
			end
		end
		self.del_spots = {}
	end

	if not self.need_update then return end

	amk.oau_watchdog=18811
	self:UpdateIndicators()

	amk.oau_watchdog=18812
	self:UpdateMap()
end

function UIScriptHUD:UpdateIndicators()
	local str = xr_actor.get_body_state_str()
	if str then
		self.body_state:InitTexture("ui_hud_soldier_"..str)
	end

	self.progress_power:SetProgressPos( Actor.power * 100 )
	self.progress_health:SetProgressPos( Actor.health * 100 )

	if arc_inventory.IsRadDetected() then
		if not self.progress_radiation:IsShown() then
			self.progress_radiation:Show(true)
		end
		self.progress_radiation.scale:SetProgressPos( 100 * math.min(arc_radiation.RAD_DOSE/arc_radiation.DOSE_DEADLY, 1) )
	elseif self.progress_radiation:IsShown() then
		self.progress_radiation:Show(false)
	end

	local outfit_id = -1
	if actor_outfit then
		if not self.progress_armor:IsShown() then
			self.progress_armor:Show(true)
		end
		self.progress_armor.scale:SetProgressPos( actor_outfit:condition() * 100 )
		outfit_id = actor_outfit:id()
	elseif self.last_outfit_id ~= -1 and self.progress_armor:IsShown() then
		self.progress_armor:Show(false)
	end

	local inv_weight = Actor:get_inventory_weight()
	if inv_weight ~= self.last_weight
		or outfit_id ~= self.last_outfit_id
	then
		self.last_weight = inv_weight
		self.last_outfit_id = outfit_id

		local max_weight = Actor:get_actor_max_weight()
		local max_walk_weight = Actor:get_actor_max_walk_weight()
		if actor_outfit then
			max_walk_weight = max_walk_weight + actor_outfit:get_additional_inventory_weight()
			max_weight = max_weight + actor_outfit:get_additional_inventory_weight2()
		end
		
		if inv_weight > max_weight then
			local k = (inv_weight - max_weight)/(max_walk_weight - max_weight)
			k = math.clamp(k, 0, 1)
			self.body_state:SetColor( GetARGB(
				255,
				math.min( k*510, 255 ),
				math.min( (1-k)*510, 255 ),
				0
			) )
		else
			self.body_state:SetColor( GetARGB(255,0,255,0) )
		end
	end

	local item = Actor:item_in_slot( inventory_slots.TORCH )
	if not ( item and item:is_torch_enabled() ) then
		item = Actor:item_in_slot( inventory_slots.NV )
		if not ( item and item:binded_object().mode )then
			item = nil
		end
	end

	local val = 0
	if item then
		if not self.progress_torch:IsShown() then
			self.progress_torch:Show(true)
		end
		val = item:get_charge_level() or 0
		self.progress_torch.scale:SetProgressPos( val * 100 )
	elseif self.progress_torch:IsShown() then
		self.progress_torch:Show(false)
	end

	if show_time then
		self.time_static:SetText( string.format( "%02d:%02d", level.get_time_hours(), level.get_time_minutes() ) )
	end
end

function UIScriptHUD:UpdateMap()
	-- local t = profile_timer()
	-- t:start()

	self.map_angle = -dev.cam_dir:getH()

	-- Update map position
	self.map:SetHeading(self.map_angle)
	if show_compass then
		self.compass:SetHeading(self.map_angle)
	end
	local pos = self:ConvertRealToLocal( Actor:position() )
	local new_pos = vector2()
	new_pos:sub(pos)
	new_pos:add(self.clip_center)
	self.map:SetWndPos( new_pos:get() )

	if biodetector_mode then
		self.sweep:SetHeading(self.sweep_angle)
	end

	-- t:stop()
	-- log("Update map position: %s", t:time())
	-- t:start()

	self:UpdateMapSpots()

	-- t:stop()
	-- log("Total: %s", t:time())
end

function UIScriptHUD:RemoveAllSpots()
	for i = 1, #self.level_spots do
		self.map:DetachChild( table.remove(self.level_spots) )
	end
	self.del_spots = {}
end

function UIScriptHUD:UpdateMapSpots()
	amk.oau_watchdog=18813

	self.actor_pos = Actor:position()

	self:CheckNewSpots()
	self:UpdateSpots()
end
function UIScriptHUD:NeedShowSpot(obj)
	return obj and obj.online
			and obj.position:distance_to_xz(self.actor_pos) < map_dist
end
function UIScriptHUD:FindSpot(obj_id, spot_type)
	for i, v in ipairs(self.level_spots) do
		if v.id == obj_id and v.type == spot_type then
			return i
		end
	end
	return false
end
function UIScriptHUD:CheckNewSpots()
	amk.oau_watchdog=18814
	-- check relation spots
	local sobj, t
	for id, obj in pairs(db.creatures) do
		if id ~= 0 and not self:FindSpot(id, "npc") then
			sobj = AI:object(id)
			if self:NeedShowSpot(sobj) then
				amk.oau_reason="UIScriptHUD:CheckNewSpots "..id
				if biodetector_mode
					or not (obj:is_stalker()
					and sobj:visible_for_map()==false)
				then
					local clr = get_point_color(obj)
					if clr then
						spot = self:DrawSpot( sobj, "npc" )
						spot:SetColor( clr )
					end
				end
			end
		end
	end

	if biodetector_mode then
		return
	end

	amk.oau_watchdog=18815
	-- check other spots
	for i, t in ipairs(level_spots) do
		if not self:FindSpot( t[1], t[2] ) then
			sobj = AI:object( t[1] )
			if self:NeedShowSpot(sobj) then
				self:DrawSpot( sobj, t[2] )
			end
		end
	end
end

function UIScriptHUD:UpdateSpots()
	local t, obj
	for i, spot in ipairs(self.level_spots) do
		obj = level_object(spot.id)
		amk.oau_reason="UIScriptHUD:UpdateSpots "..spot.id
		if obj and self:NeedShowSpot( AI:object( spot.id ) ) then
			if spot.type == "npc" or has_spot(spot.id, spot.type) ~= 0 then
				t = map_spots[spot.type]

				local offset = vector2():set(t.sz*kScreen/2, t.sz/2)
				spot:SetWndPos( self:ConvertRealToLocal( obj:position() ):sub(offset):get() )
				if t.heading then
					spot:SetHeading(self.map_angle)
				end

				if t.below_above then
					local below = self.actor_pos.y - obj:position().y
					if below > 1.8 then
						spot:InitTexture("ui_mini_sn_spot_below")
					elseif below < -1.8 then
						spot:InitTexture("ui_mini_sn_spot_above")
					else
						spot:InitTexture(t.tex)
					end
				end

				if spot.type == "npc" then
					local clr = get_point_color( obj )
					if clr then
						spot:SetColor( clr )
					else
						table_insert( self.del_spots, {spot.id, spot.type} )
					end
				elseif biodetector_mode then
					table_insert( self.del_spots, {spot.id, spot.type} )
				end
			else
				table_insert( self.del_spots, {spot.id, spot.type} )
				this.remove_spot(spot.id, spot.type)
			end
		else
			table_insert( self.del_spots, {spot.id, spot.type} )
		end
	end
end

local function rotation(pos, angle)
	local _sc = math_cos(angle)
	local _sn = math_sin(angle)
	local x = pos.x*_sc + pos.y*_sn
	local y = pos.y*_sc - pos.x*_sn
	return pos:set(x, y)
end

function UIScriptHUD:ConvertRealToLocal(pos)
	local res = vector2()
	res.x = (pos.x - self.bound_rect.x1) *map_zoom
	res.y = ( self.bound_rect:height() - (pos.z - self.bound_rect.y1) ) *map_zoom

	res:sub(self.map_center)
	rotation(res, self.map_angle)
	res:add(self.map_center)

	return res
end

function UIScriptHUD:DrawSpot(obj, spot_type)
	if spot_type == nil then return nil end

	local t = map_spots[spot_type]
	if not t then
		log("[UIScriptHUD:DrawSpot] No settings for spot type '%s'", spot_type)
		return
	end

	local pos = self:ConvertRealToLocal( obj.position )

	local h = t.sz
	local w = h*kScreen

	local st = CUIStatic()
	st:Init(t.tex, pos.x-w/2, pos.y-h/2, w, h)
	st:SetAutoDelete(true)
	st:SetStretchTexture(true)
	if t.heading then
		st:CanRotate(true)
	end
	self.map:AttachChild(st)
	st:Show(true)
	st.id = obj.id
	st.type = spot_type

	table_insert(self.level_spots, st)

	return st
end

function UIScriptHUD:Break(mode)
	if self.is_break == mode then return end
	self.is_break = mode

	if mode then
		self.map:InitTexture("abc\\hud_empty")
		self.map_frame:InitTexture("ui\\ui_bsod")
		self.map_frame:SetOriginalRect(0, 0, 1024, 576)
		self.sweep:Show(false)
		self.time_static:SetText("")
		self.minimap_center:Show(false)
	else
		self.minimap_center:Show(true)
		self:SetPDAMode()
	end
end

function UIScriptHUD:SwitchBioradar()
	if not show_time then
		self.time_static:SetText("")
	end
	self.compass:Show(show_compass and not biodetector_mode)

	if self.biodetector_mode == biodetector_mode then return end
	self.biodetector_mode = biodetector_mode

	self:SetPDAMode()
end

function UIScriptHUD:SetPDAMode()
	if biodetector_mode then
		self.map:InitTexture("abc\\hud_empty")
		self.map_frame:InitTexture("intro\\intro_back")
		self.sweep:Show(true)
	else
		self.map:InitTexture(self.map_texture)
		self.map_frame:InitTexture("abc\\hud_empty")
		self.sweep:Show(false)
	end
end

function UIScriptHUD:OnKeyPress(dik, bind)
	if bind == bind_to_show then
		if level.main_input_receiver() ~= nil
		--	or scopeUsed
		then return end

		set_static_rescale_factor(1)
		self:Show(true)
		self.need_update = true
		if not show_quick_slots then
			ui_hud_slots.ShowSlots(true)
		end
	end
end

function UIScriptHUD:OnKeyRelease(dik, bind)
	if bind == bind_to_show then
		if not self:IsShown() then return end
		set_static_rescale_factor(kScreen)
		self:Show(false)
		self.need_update = false
		if not show_quick_slots then
			ui_hud_slots.ShowSlots(false)
		end
	end
end

function UIScriptHUD:Remove()
	xr_s.unsubscribe("key_press", self.OnKeyPress)
	xr_s.unsubscribe("key_release", self.OnKeyRelease)
	xr_s.unsubscribe("update", self.Update)
end

---------------------------------------------------------------------------
function get_level_bound_rect()
	local vol = level.get_bounding_volume()
	return Frect():set(
		vol.min.x,
		vol.min.z,
		vol.max.x,
		vol.max.z
	)
end

local colors = {
	enemy    = GetARGB(200,255,0,0),
	neutral  = GetARGB(255,255,200,0),
	friend   = GetARGB(255,50,255,0),
	corpse   = GetARGB(255,168,168,168),
	monster  = GetARGB(200,255,0,190)
}
function get_point_color(obj)
	if not obj then
		return nil
	end

	if biodetector_mode then
		local clr = biodetector.getColor(obj)
		return clr and GetARGB( 255, unpack(clr) ) or nil
	end

	if not show_npc then
		return nil
	end

	if IsHuman[obj:clsid()] then
		if obj:character_community() == "zombied" then
			return nil
		elseif obj:alive() then
			local rel = obj:relation(Actor)
			if rel == game_object.friend then
				return colors.friend
			elseif rel == game_object.neutral then
				return colors.neutral
			elseif show_enemy and rel == game_object.enemy then
				return colors.enemy
			end
		elseif show_corpse then
			return colors.corpse
		end
	elseif show_monsters and obj:alive() then
		return colors.monster
	end

	return nil
end

---------------------------------------------------------------------------
function add_spot(spot_type, obj_id)
	if not map_spots[spot_type] then
		return
	end

	local se_obj = AI:object(obj_id)
	if se_obj == nil then
		return
	end
	if object_level_name(se_obj) ~= level.name() then
		return
	end

	for i, v in ipairs(level_spots) do
		if v[1] == obj_id and v[2] == spot_type then
			return
		end
	end

	table_insert( level_spots, { obj_id, spot_type} )
end

function remove_spot(obj_id, spot_type)
	for i, v in ipairs(level_spots) do
		if v[1] == obj_id and v[2] == spot_type then
			table.remove(level_spots, i)
			break
		end
	end
end

function load_spot_from_obj(se_obj)
	local id = se_obj.id
	for st in pairs(map_spots) do
		if st ~= "npc" and has_spot(id, st) ~= 0 then
		--	log("load_spot_from_obj: %s (%s::%s)", se_obj:name(), id, st)
			table_insert( level_spots, {id, st} )
		end
	end
end


function init()
	this.init_settings()

	wnd = UIScriptHUD()
	get_hud():AddDialogToRender(wnd)
	wnd:Show(false)
end
function destroy()
	if wnd ~= nil then
		wnd:Remove()
		get_hud():RemoveDialogToRender(wnd)
		wnd = nil
	end
end

function switch_bioradar(mode)
	biodetector_mode = mode and has_alife_info("pda_biodetector_mode")
	if wnd then
		wnd:SwitchBioradar()
		wnd:RemoveAllSpots()
	end
end

function init_settings()
	local dif = level.get_game_difficulty()

	show_npc			= has_alife_info("pda_show_npc")
	show_enemy			= has_alife_info("pda_show_enemy") --and dif < game_difficulty.veteran
	show_monsters		= has_alife_info("pda_show_monsters")-- and dif < game_difficulty.veteran
	show_corpse			= has_alife_info("pda_show_corpse") and dif ~= game_difficulty.master
	show_time			= has_alife_info("pda_show_time")
	show_compass		= has_alife_info("pda_show_compass")
	show_quick_slots	= has_alife_info("pda_show_quick_slots") and (game_options.QuickSlotsOnHUD ~= 1)
	biodetector_mode	= has_alife_info("pda_biodetector_mode")
							and ( inventory.on_belt("bioradar")
							or inventory.on_belt("bioradar2") )

	if wnd then
		wnd:SwitchBioradar()
		wnd:RemoveAllSpots()
		if has_alife_info("pda_dont_work") then
			wnd:Break(true)
		end
	end
end

-- сломать HUD - true, починить - false
function break_hud(mode)
	if wnd then
		wnd:Break(mode)
	end
end

-- вызывается из инфо-поршня "pda_dont_work"
function break_pda()
	this.break_hud(true)
end

function attach()
	if game_options.CurrentHUD ~= "pda_script" then return end

	xr_s.subscribe("net_spawn", this.init)
	xr_s.subscribe("net_destroy", this.destroy)
end
