-- -*- mode: lua; encoding: windows-1251 -*-
--[[------------------------------------------------------------------------------------------------
Space restrictor binder
Чугай Александр

Примечания:
  - обновлений у рестрикторов нету, поэтому для тех, кому надо, актёр вызывает искусственно на своём обновлении
--------------------------------------------------------------------------------------------------]]
local removed_names = {
	['gar_vagon_in_restrictor'] = true,
	['bar_restrictor'] = true,
	['rostok_sniper_killer_restrictor'] = true,
	['agr_u_bloodsucker_rest'] = true
}

local updatable_binders = {}    -- биндеры, которые требуют обновлений (update)

function actor_update(delta)
	for i, v in pairs(updatable_binders) do
	--	amk.oau_reason="bind_restrictor.actor_update: "..v.object:name()
		v:actor_update(delta)
	end
--	amk.oau_reason="bind_subway.actor_update"
	bind_subway.actor_update()
--	amk.oau_reason="actor_binder:update"
end

function bind( obj )
	if removed_names[obj:name()] then
		local sobj=AI:object(obj:id())
		if sobj then
			AI:release(sobj,true)
			return
		end
	end

	obj:bind_object( restrictor_binder( obj ) )
end

----------------------------------------------------------------------------------------------------
class "restrictor_binder" ( object_binder )

function restrictor_binder:__init(obj, char_ini) super(obj)
	self.initialized = false
	self.loaded = false
end

function restrictor_binder:reload(section)
	object_binder.reload(self, section)
end

function restrictor_binder:reinit()
	object_binder.reinit(self)

	db.add_zone( self.object )

	self.st = db.storage[self.object:id()]
end

function restrictor_binder:net_spawn(data)
	if not object_binder.net_spawn( self, data ) then
		return false
	end

	-- Не регистрироваться на апдейты, если у объекта в customdata
	-- нет секции logic вообще, а так же если логика "пустая"
	local char_ini = xr_logic.get_customdata_or_ini_file(self.object, "<customdata>")
	if xr_logic.logic_not_empty(self.object, char_ini) then
		updatable_binders[self.object:id()] = self
	end

	return true
end

function restrictor_binder:net_destroy()
	local st = db.storage[self.object:id()]
	if st.active_scheme then
		xr_logic.issue_event(self.object, st[st.active_scheme], "net_destroy")
	end

	db.del_zone( self.object )

	updatable_binders[self.object:id()] = nil

	object_binder.net_destroy(self)
end

-- вызывается из обновления актёра
function restrictor_binder:actor_update(delta)
	if not self.initialized then
		self.initialized = true
		xr_logic.initialize_obj(self.object, self.st, self.loaded, Actor, modules.stype_restrictor)
	end

	if self.st.active_section ~= nil then
		xr_logic.issue_event(self.object, self.st[self.st.active_scheme], "update", delta)
	elseif self.object:section() == "space_restrictor"
		and self.object:name() == "space_restrictor"..self.object:id()
		and not is_story_object(self.object)
	then
		local se_obj = AI:object(self.object:id())
		if se_obj then AI:release(se_obj, true) end
	else
		updatable_binders[self.object:id()] = nil
	end
end

function restrictor_binder:net_save_relevant()
	return true
end

function restrictor_binder:save(packet)
	object_binder.save(self, packet)

	xr_logic.save_obj(self.object, packet)
end

function restrictor_binder:load(reader)
	self.loaded = true

	object_binder.load(self, reader)

	xr_logic.load_obj(self.object, reader)
end

