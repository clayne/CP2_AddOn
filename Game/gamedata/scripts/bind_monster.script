-- -*- mode: lua; encoding: windows-1251 -*-
-----------------------------------------------------------------------------------
-- Monster binding
-----------------------------------------------------------------------------------
local particles={}

function bind(obj)
   local new_binder = generic_object_binder(obj)
   obj:bind_object(new_binder)
end 

------------------------------------------------------------------------------------
class "generic_object_binder" (object_binder) 

function generic_object_binder:__init(obj) super(obj) 
	self.loaded = false 
	self.last_update = 0 
	self.particles = {} 
--	Обработчик мутантов
	if obj:alive()
		and obj:clsid() == clsid.bloodsucker_s
		and string.find(obj:section(), "suck")
	then
		if string.find(obj:section(),"bloodsucker_effector") then
			self.MonsterEffector = meceniy_mutants_manager.MonsterEffector(obj)
		else
			self.MonsterEffector = monster_effects.ef_bloodsucker(obj)
		end
	end
end 

function generic_object_binder:reload(section) 
object_binder.reload(self, section) 
end 

function generic_object_binder:reinit() 
	object_binder.reinit(self) 

	self.object:set_patrol_extrapolate_callback(self.extrapolate_callback, self) 

	db.storage[self.object:id()] = { }

	self.st = db.storage[self.object:id()] 
	self.object:set_callback(callback.patrol_path_in_point, self.waypoint_callback, self) 
	self.object:set_callback(callback.hit, self.hit_callback, self) 
	self.object:set_callback(callback.death, self.death_callback, self) 
	self.object:set_callback(callback.use_object, self.use_callback, self)
end 

function generic_object_binder:update(delta)
	-- self.st.us = 100
	object_binder.update(self, delta) 

	-- self.st.us = 99	
	local section = self.object:section()
	local cls = self.object:clsid()
	-- self.st.us = 98	

	if particles[self.object:id()] and table.getn(particles[self.object:id()])>0 then 
		for kk,vv in pairs(particles[self.object:id()]) do 
			table.insert(self.particles,amk_particle.amk_particle(vv))
			table.remove(particles[self.object:id()],kk) 
		end 
	end 
	-- self.st.us = 97	

	if table.getn(self.particles)>0 then 
		for kk,vv in pairs(self.particles) do 
			if vv:is_finished() then 
				self.particles[kk]=nil 
			else 
				vv:update(delta)
				if vv.give_dmg and vv.target then
					if vv:get_pos():distance_to(vv.target:bone_position("bip01_spine"))<1 then
						local h = hit()
						h.impulse = 0
						h.draftsman = vv.target
						h.direction = vv.dir
						h:bone("bip01_spine") -- чтобы учитывалась броня
						h.power = math.random(10,50)/100
						h.type = hit.strike --chemical_burn
						vv.target:hit(h)
						h.power = math.random(10,50)/100
						h.type = hit.chemical_burn
						vv.target:hit(h)
						vv:stop()
					end
				end
			end 
		end 
	end
	-- self.st.us = 96
	
	local _time = time_global()
--	printf("_bp: generic_object_binder: UPDATE [name='%s' time=%d]",
--		self.object:name(), _time)

	if self.object:alive() then 
	-- self.st.us = 95
		if (not has_alife_info("volna_goodwill"))	 -- в Волне все эффекты отключаем 
			and monster_effects.bloodsucker_vampire_captured == nil
			and not sleep_manager.is_sleep_active()
		then
	-- self.st.us = 94
			--/#+# 'засос кровососа боксёра' --------------------------------------------------
			if cls == clsid.bloodsucker_s and self.MonsterEffector then
				self.MonsterEffector:update(_time)
			-- Удар контролёра руками из Зова Припяти (Автор: demover123)
			elseif cls == clsid.controller_s then
				monster_effects.ef_controller(self)
			--Psy-Dog SoC 
			elseif cls==clsid.pseudodog_s then
				if section~="volkodav" then
					monster_effects.ef_pseudodog(self)
				end
			elseif cls==clsid.cat_s then
				monster_effects.ef_cat(self, section)
			elseif cls==clsid.zombie_s then
				monster_effects.ef_zombie(self, section)
			elseif cls==clsid.boar_s then
				if section=="boar_weak"
					or section=="boar_normal"
					or section=="boar_strong"
					or section=="boar_kachok"
				then
					monster_effects.ef_boar(self)
				end
			-- Burer COP 
			elseif cls==clsid.burer_s then
				monster_effects.ef_burer(self)
			elseif cls==clsid.dog_s then
				monster_effects.ef_dog(self)
			end
	-- self.st.us = 93
		end
	else
	-- self.st.us = 92
		self.object:set_tip_text_default()
		battle.cleanup(self.object)
	end 

	-- self.st.us = 91
	self:anomaly_evade() 
	-- self.st.us = 90
 
	local act_scheme = self.st.active_section or "" 
	local is_fake = string.find(act_scheme, "mob_fake_death")~=nil

	-- self.st.us = 89
	if self.object and IAmAMonster[cls]
		and _time > self.last_update and not is_fake
	then 
	-- self.st.us = 88
		if self.object:alive() and self.object.health>0.03 then
			if self.object:see(Actor)
				and Actor:position():distance_to(self.object:position())<40
			then
	-- self.st.us = 87
				amk.enemy_see_actor(self.object,"monster")
	-- self.st.us = 86
			end 
	-- self.st.us = 85
			if Actor:see(self.object)
				and Actor:position():distance_to(self.object:position())<80
			then 
	-- self.st.us = 84
				amk.actor_see_enemy(self.object,"monster") 
	-- self.st.us = 83
			end 
		end 
	-- self.st.us = 82
		self.last_update = _time + 1000
	end
	
	-- self.st.us = 81
	local blowout=amk.load_variable("blowout",0) 
	if blowout==3 and (not self.control_override) then 
	-- self.st.us = 80
		if not self.object:action() then 
			-- Захватываем зверушку
			xr_logic.mob_capture(self.object,true) 
			self.control_override=true 
		end 
	elseif self.control_override and blowout==3 then 
	-- self.st.us = 79
		if not self.object:action() then 
	-- self.st.us = 78
			local snds={sound.take_damage,sound.panic,sound.idle} 
			action(self.object, anim(anim.lie_idle, 0), sound(table.random(snds)), cond(cond.sound_end)) 
	-- self.st.us = 77
		end 
	elseif self.control_override and blowout~=3 then 
	-- self.st.us = 76
		-- отпускаем зверушку
		self.control_override=nil 
		xr_logic.mob_release(self.object) 
	-- self.st.us = 75
	elseif self.st.active_section ~= nil then 
	-- self.st.us = 74
		xr_logic.issue_event(self.object, self.st[self.st.active_scheme], "update", delta) 
	-- self.st.us = 73
	end 

	-- self.st.us = 0	
end 

function generic_object_binder:anomaly_evade() 
	local npc=self.object 
	if npc:story_id() == story_ids.esc_tutorial_flesh then return end -- учебная плоть блин
	if not self.prev_pos then 
		self.prev_pos=vector():set(0,-100,0) 
	end 
	if self.prev_pos:distance_to(npc:position())>20 then 
		self.prev_pos=npc:position() 
		local list=amk_anoms.get_anomaly_list(npc,30) 
		for i,o in ipairs(list) do 
			amk_anoms.add_restriction(npc,o.id,o.name) 
		end 
	end 
	if amk_anoms.have_pending_sync(npc) then 
		amk_anoms.syncronize(npc) 
	end 
end 

function generic_object_binder:extrapolate_callback() 
	if (self.object == nil) then 
		return false 
	end 

	local cur_pt = self.object:get_current_point_index() 
	if self.object:get_script () == false then 
		return false 
	end 
	if patrol(self.object:patrol()):flags(cur_pt):get() == 0 then
		--printf("_bp: generic_object_binder: extrapolate_callback: cur_pt = %d: true", cur_pt)
		return true
	end
	--printf("_bp: generic_object_binder: extrapolate_callback: cur_pt = %d: false", cur_pt)
	return false
end 

function generic_object_binder:waypoint_callback(obj, action_type, index) 
	if self.st.active_section ~= nil then 
		xr_logic.issue_event(self.object, self.st[self.st.active_scheme], "waypoint_callback", obj, action_type, index) 
	end 
end 

function generic_object_binder:death_callback(victim, who) 
	if (self.object == nil) then return end 

	monster_effects.stop_effects(self, who)

	db.del_monster(self.object) -- убираем из онлайн-живых

	if who:id() == Actor:id() then 
		kostya_dialog.on_wpn_hit()
		
		xr_statistic.addKillCount(self.object) 
		if bind_soul_cube then
			bind_soul_cube.add_soul()
		end

		-----------------------------------------------------------
		arc_diary.monster_killed(victim)
		-----------------------------------------------------------
		news_main.check_microquest(self.object) 
	end
	
	if self.st.mob_death then 
		xr_logic.issue_event(self.object, self.st.mob_death, "death_callback", victim, who) 
	end 
	if self.st.active_section then 
		xr_logic.issue_event(self.object, self.st[self.st.active_scheme], "death_callback", victim, who) 
	end 
     
	smart_terrain.on_death( self.object:id() ) 
        
	--' Наносим небольшой импульс вперед.
	local h = hit() 
	h.draftsman = self.object 
	h.type = hit.fire_wound 
	h.direction = Actor:position():sub(self.object:position()) 
	h:bone("pelvis") 
	h.power = 1 
	h.impulse = 10 
	self.object:hit(h) 

	if table.getn(self.particles)>0 then 
		for kk,vv in pairs(self.particles) do 
			vv:on_death() 
		end 
	end 
    
--	rx_ai.monster_death(victim, who)

	--AMK UTILS--
	amk.on_death(victim, who)
	--AMK UTILS-- 
	smart_mob_parts.on_death(self.object)
end 

function generic_object_binder:hit_callback(obj, amount, local_direction, who, bone_index) 
--	printf("HIT_CALLBACK: [%s] amount[%s]", obj:name(), amount)
--	amk.logct(self.object:name().." hit ","mcbt")
	if who then
		self.object:enable_memory_object(who, true)
	end

	local sect = obj:section()
	
	if who.id and who:id()==0 then
		kostya_dialog.on_wpn_hit()
		akill.on_monster_hit(sect) 
	end
	
	if self.st.active_section then
		xr_logic.issue_event(self.object, self.st[self.st.active_scheme], "hit_callback", obj, amount, local_direction, who, bone_index)
	end
	
	smart_mob_parts.on_hit(obj, bone_index, amount)
	
	if self.st.hit then
--		amk.logct(self.object:name().." on_hit logic ","mcbt")
--		amk.dump_table(self.st.hit.logic)
		xr_logic.issue_event(self.object, self.st.hit, "hit_callback", obj, amount, local_direction, who, bone_index)
	end
  -- amk.mylog(obj:name().." "..local_direction.x.." "..local_direction.y.." "..local_direction.z.." "..bone_index.." "..amount.." "..who:name())
	if bone_index==14 and string.find(sect,"bloodsucker") then
		local h=hit()
		h.type = hit.fire_wound 
		h.power = 100*(local_direction.x^4)
		h.impulse = h.power 
		h.draftsman = who 
		h.direction = vector():set(0,-1,0) 
		obj:hit(h) 
	end 
     
	-- added by xStream for AMK miniSDK
	amk.on_monster_hit(obj, amount, local_direction, who, bone_index)
	-- end of addition
-- Akill begin
    if (sect=="new_electro_chimera" or sect=="electro_chimera") and who and time_global()>(self.charge_time or 0)+3000 then
		amk_particle.amk_particle({particle="anomaly2\\electra2_blast",pos=obj:bone_position("bip01_spine"),sound="anomaly\\electra_blast1"})
		local dist = who:position():distance_to(obj:bone_position("bip01_spine"))
		if dist < 6 then
			local h = hit()
			h.impulse = 0
			h.draftsman = obj
			h.direction = vector():set(0,0,0)
			h:bone("bip01_spine")
			h.power = 1/dist
			h.type = hit.strike 
			who:hit(h)
			h.power = 6/dist
			h.type = hit.shock
			who:hit(h)
		end
		self.charge_time=time_global()
	end

	if sect=="fire_chimera" and who and time_global()>(self.charge_time or 0)+3000 then
		amk_particle.amk_particle({particle="amik\\monsters\\chimera\\attak_wave",pos=obj:bone_position("bip01_spine"),sound="anomaly\\polter_fire_death"})
		local dist = who:position():distance_to(obj:bone_position("bip01_spine"))
		if dist < 6 then
			local h = hit()
			h.impulse = 0
			h.draftsman = obj
			h.direction = vector():set(0,0,0)
			h:bone("bip01_spine")
			h.power = 1/dist
			h.type = hit.burn
			who:hit(h)
			h.power = 6/dist
			h.type = hit.burn
			who:hit(h)
			level.add_pp_effector("amk_shoot.ppe", 2015, false)
			local snd_obj = xr_sound.get_safe_sound_object([[anomaly\polter_fire_idle]])
			snd_obj:play_at_pos(who, who:position(), 0, sound_object.s2d)
		end
		self.charge_time=time_global()
	end
end 

local section2tips = {
	dogfrend = "dogfrend_use",
	chimera_quest = "docent_chimera_use",
	boar_quest = "messer_kaban_use",
	boar_child = "krest_boar_use",
	gigant_swamp = "buusty_gigant_use"
}
function generic_object_binder:net_spawn(sobject)
	if not object_binder.net_spawn(self, sobject) then 
		return false 
	end

	if not self.loaded then
		self:random_visual_zombie()
	end
		 
	db.add_obj(self.object) 
	if self.object:alive() then
		db.add_monster(self.object) -- добавляем в онлайн-живых

		if self.object:is_talk_enabled() then
			self.object:set_tip_text("character_use")
		else
			local sect = self.object:section()
			if section2tips[sect] then
				self.object:set_tip_text(section2tips[sect])
			else
				self.object:set_tip_text("") 
			end
		end 
	end

	xr_gulag.setup_gulag_and_logic_on_spawn( self.object, self.st, sobject, modules.stype_mobile, self.loaded ) 

	local particle_param = getIniValueString(self.object:section(), "bones_particles", nil, nil) 

	if particle_param and sys_ini:section_exist(particle_param) then 
		local tmp=amk.parse_ini_section_to_array_new(nil,particle_param) 
		for k,v in pairs(tmp) do 
			local t = amk.parse_ini_section_to_array_new(nil, v) 
			t.obj = self.object 
			if not t.stop_on_death or self.object:alive() then 
				play_particle(self.object, t) 
			end 
		end 
	end 

	return true 
end 

function generic_object_binder:net_destroy()
	if table.getn(self.particles)>0 then 
		for kk,vv in pairs(self.particles) do 
			if not vv:is_finished() then 
				vv:stop() 
				self.particles[kk]=nil 
			end 
		end 
	end
	
	local id = self.object:id()
	
	amk.on_monster_go_offline(self.object) 
	self.object:set_callback(callback.death, nil) 
	self.object:set_callback(callback.patrol_path_in_point, nil) 
	self.object:set_callback(callback.hit, nil) 
	self.object:set_callback(callback.use_object, nil)
	local st = db.storage[id]  
	if st and st.active_scheme then 
		xr_logic.issue_event(self.object, st[st.active_scheme], "net_destroy") 
	end 
	db.del_obj(self.object)
	
	if self.object:alive() then
		db.del_monster(self.object) -- убираем из онлайн-живых
	end

	object_binder.net_destroy(self)
	
	-- АМК. Очистка рестрикторов
	local sobj=AI:object(id)          
	if sobj then
		local obj_clsid = sobj:clsid()
		if IAmAMonster[obj_clsid] then
			netpk:modify( sobj, { dynamic_in_restrictions = {} }, netpk.fState )
		elseif obj_clsid == clsid.psy_dog_phantom_s then
			AI:release(sobj, true)
		end
	end
end 

function generic_object_binder:reload(section) 
	object_binder.reload(self, section) 
	--printf("generic_object_binder:reload(): self.object:name()='%s'", self.object:name())
end

function generic_object_binder:net_save_relevant()
	--printf("generic_object_binder:net_save_relevant(): self.object:name()='%s'", self.object:name())
	return true
end 

function generic_object_binder:save(packet)
--	printf("generic_object_binder:save(): self.object:name()='%s'", self.object:name())          
	object_binder.save(self, packet) 

	xr_logic.save_obj(self.object, packet)
end 

function generic_object_binder:load(reader) 
	self.loaded = true 

--	printf("generic_object_binder:load(): self.object:name()='%s'", self.object:name()) 
	object_binder.load(self, reader) 

	if reader:r_eof() then 
		if self.object:section() == "dogfrend" then	return end -- фикс правки Дружка без НИ

		--abort("Это сохранение повреждено - удалите его! generic_object_binder:load "..self.object:name())
		remove_zavis.remove_obj(self.object)
		if not self.object then
			return
		end
	end 

	xr_logic.load_obj(self.object, reader)
end

-- ОП-2: Добавлен калбек на юзанье монстра, а также для всех монстров подключена схема on_use
function generic_object_binder:use_callback(obj, who)
	fly.returner_clear_pos()
	if self.object == nil then return end

	xr_s.on_event("npc_use", obj, who)

	if self.object:alive() then
		if self.st.active_section then
		  xr_logic.issue_event(self.object, self.st[self.st.active_scheme], "use_callback", obj, who)
		end
	else
		monster_parts.on_monster_use(obj, who) -- обыск трупа
		-- автообыск трупа
		if game_options.AutoGrab then
			start_transfer_all_desired(obj)
		end
	end
end

function generic_object_binder:random_visual_zombie()
	local visuals = {
		[[monsters\zombi\zombi_1]],
		[[monsters\zombi\zombi_2]],
		[[monsters\zombi\zombi_trup]],
		[[monsters\zombi\zombi_trup_2]],
		[[monsters\zombi\zombi_1_ghost]],
		[[monsters\zombi\zombi_3]],
		[[monsters\zombi\zombi_4_2]],
		[[monsters\zombi\zombi_5]],
		[[monsters\zombi\zombi_6]],
		[[monsters\zombi\zombi_7]],
		[[monsters\zombi\zombi_8]],
		[[monsters\zombi\zombi_9]],
		[[monsters\zombi\zombi_10]],
		[[monsters\zombi\zombi_11]],
		[[monsters\zombi\zombi_12]],
		[[monsters\zombi\zombi_13]],
		[[monsters\zombi\zombi_14]],
		[[monsters\zombi\zombi_15]],
		[[monsters\zombi\zombi_16]],
		[[monsters\zombi\zombi_komar]],
	}
	local section = self.object:section()
	if section == "zombie_blow" or section == "zombie_beee" or section == "zombie_hell" then
		local obj = AI:object(self.object:id())
		netpk:modify( obj, { visual_name = table.random(visuals) }, netpk.fState )
	end
end

local out_object = nil

function start_transfer_all_desired(npc)
	out_object = npc
	xr_s.subscribe( "update", this.transfer_all_desired, { timeout = 500, once = true } )
end

function transfer_all_desired()
	if has_alife_info("ui_car_body") then
		shiftCheckDropItem()
		out_object:iterate_inventory(function(npc, item)
			out_object:transfer_item(item, Actor)
		end, Actor)
	end
	out_object = nil
end

function play_particle(obj,params) 
	local id = obj:id()
	if not particles[id] then 
		particles[id]={} 
	end
	table.insert(particles[obj:id()],params) 
end

