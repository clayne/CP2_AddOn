-- -*- mode: lua; encoding: windows-1251 -*-
local lc_ini = ini_file("misc\\level_changers.ltx")

function create_level_changer(str_sid, silent)
	local story_id = story_ids[str_sid]
	ASSERT(story_id, "[level_changers.create_level_changer]: story_id '%s' not exist in [story_ids]", str_sid)

	ASSERT(lc_ini:section_exist(str_sid), "[level_changers.create_level_changer]: section '%s' not exist in 'level_changers.ltx'", str_sid)

	local objt = AI:story_object(story_id)
	if objt then
		log("~ [level_changers.create_level_changer]: level changer with story_id [%s] already exist! Respawn...", str_sid)
		AI:release(objt, true)
	end

	local pos = lc_ini:r_vector(str_sid, "position")
	local lv = lc_ini:r_u32(str_sid, "level_vertex")
	local gv = lc_ini:r_u32(str_sid, "game_vertex")
	local obj = AI:create("level_changer", pos, lv, gv)

	local data = {}

	data.object_flags = bit_not(193)
	data.story_id = story_id
	if story_id < 65535 then
		set_story_id(obj, story_id)
	end

	local sh = {}
	local sh_type = lc_ini:r_string(str_sid, "shape_type")
	local sh_r = lc_ini:r_float(str_sid, "shape_r")
	if sh_type == "box" then
		sh.shtype = 1
		sh.box_matrix = matrix():set(
			vector():set(sh_r,0,0),
			vector():set(0,sh_r,0),
			vector():set(0,0,sh_r),
			vector():set(0,0,0)
		)
	elseif sh_type == "sphere" then
		sh.shtype = 0
		sh.center = vector():set(0,0,0)
		sh.radius = sh_r
	else
		abort("[level_changers.create_level_changer]: unknown shape_type for level changer[%s]", str_sid)
	end
	data.shapes = { [1] = sh }

	data.restrictor_type = 3

	data.dest_game_vertex_id	= lc_ini:r_u32(str_sid, "dest_game_vertex")
	data.dest_level_vertex_id	= lc_ini:r_u32(str_sid, "dest_level_vertex")
	data.dest_position			= lc_ini:r_vector(str_sid, "dest_position")
	if lc_ini:line_exist(str_sid, "dest_direction") then
		data.dest_direction		= lc_ini:r_vector(str_sid, "dest_direction")
	else
		data.dest_direction		= vector():set(0,0,0)
	end
	data.dest_level_name		= AI:level_name( GGraph:vertex(data.dest_game_vertex_id):level_id() )
	data.dest_graph_point		= "start_actor_99"
	data.silent_mode			= lc_ini:r_u32_ex(str_sid, "silent_mode", 0)

	netpk:modify( obj, data, netpk.fState )

	if lc_ini:line_exist(str_sid, "map_spot") then
		level.map_add_object_spot_ser(
			obj.id,
			lc_ini:r_string(str_sid, "map_spot"),
			lc_ini:r_string(str_sid, "map_hint")
		)
	end

	if lc_ini:r_bool_ex(str_sid, "no_sms") or silent then return end

	local prev_lvl = game.translate_string( AI:level_name(GGraph:vertex(gv):level_id()) )
	local dest_lvl = game.translate_string( string.lower(data.dest_level_name) )
	show_lc_info(prev_lvl, dest_lvl)
end

function create_teleport_on_actor(dest_pos, dest_lv, dest_gv, dest_dir)
	local obj = AI:create( "level_changer", Actor:position(), Actor:level_vertex_id(), Actor:game_vertex_id() )
	
	local data = {}

	data.object_flags = bit_not(193)
	data.story_id = story_ids.lc_teleport

	data.shapes = {
		[1] = {
			shtype = 1,
			box_matrix = matrix():set(
				vector():set(40,0,0),
				vector():set(0,40,0),
				vector():set(0,0,40),
				vector():set(0,0,0)
			)
		}
	}

	data.restrictor_type = 3

	data.dest_game_vertex_id	= dest_gv
	data.dest_level_vertex_id	= dest_lv
	data.dest_position			= dest_pos
	data.dest_direction			= dest_dir or vector():set(0,0,0)
	data.dest_level_name		= AI:level_name( GGraph:vertex(dest_gv):level_id() )
	data.dest_graph_point		= "start_actor_99"
	data.silent_mode			= 1

	netpk:modify( obj, data, netpk.fState )

	bind_lc.shift_send_sms()
end

function create_allspawn_lc(str_sid, spot_hint, info, spot_dir, silent)
	local story_spawn_id = story_ids[str_sid]
	ASSERT(story_spawn_id, "[level_changers.create_level_changer]: story_id '%s' not exist in [story_ids]", str_sid)

	local objt = AI:story_object(story_spawn_id)
	if objt then
		log("~ [level_changers.create_allspawn_lc]: level changer with story_id [%s] already exist! Respawn...", str_sid)
		AI:release(objt, true)
	end

	local obj = AI:create( AI:spawn_id(story_spawn_id) )
	if obj then
		level.map_add_object_spot_ser(obj.id, "level_changer"..tostring(spot_dir), spot_hint)
		if info and Actor:dont_has_info(info) then
			Actor:give_info_portion(info)
		end
		if not silent then
			local data = netpk:get(obj, netpk.fState)
			local dest_lvl = game.translate_string(string.lower(data.dest_level_name))
			local prev_lvl = game.translate_string(AI:level_name(GGraph:vertex(data.game_vertex_id):level_id()))
			show_lc_info(prev_lvl, dest_lvl)
		end
	end

	return obj
end

function show_lc_info(prev_lvl, dest_lvl)
	local news_text = "%c[gray2]Новый путь!\\n%c[white]"..prev_lvl.." >> "..dest_lvl
	Actor:give_game_news(news_text, "ui\\ui_iconsTotal", Frect():set(913,752,83,47), 0, 10000)
	if Actor:is_talking() then
		Actor:give_talk_message(news_text, "ui\\ui_iconsTotal", Frect():set(913,752,83,47), "iconed_answer_item")
	end
end

function first_run()
--[[----------------
	1 - up
	2 - right
	3 - down
	4 - left
	5 - underground
--]]----------------
	local lv_changers = {
		lc_escape_to_garbage				= { 1, "to_garbage" },
		lc_garbage_to_agroprom				= { 4, "to_agroprom" },
		lc_garbage_to_escape				= { 3, "to_escape" },
		lc_garbage_to_bar					= { 1, "to_bar" },
		lc_garbage_to_darkvalley			= { 2, "to_darkvalley" },
		lc_agroprom_to_garbage				= { 2, "to_garbage" },
		lc_darkvalley_to_garbage			= { 4, "to_garbage" },
		lc_darkvalley_to_darkscape			= { 3, "to_darkscape" },
		lc_darkscape_to_escape				= { 4, "to_escape" },
		lc_darkscape_to_darkvalley			= { 1, "to_darkvalley" },
		lc_bar_to_garbage					= { 3, "to_garbage" },
		lc_bar_to_rostok					= { 5, "bar_rostok" },
		lc_rostok_to_bar					= { 1, "bar_rostok" },
		lc_rostok_to_yantar					= { 3, "to_yantar" },
		lc_military_to_bar					= { 4, "to_bar" },
		lc_military_to_radar				= { 2, "to_radar" },
		lc_pripyat_to_aes					= { 1, "to_aes" },
		lc_pripyat_to_radar					= { 3, "to_radar" },
		lc_yantar_to_rostok					= { 2, "to_rostok" },
		lc_radar_to_pripyat					= { 1, "to_pripyat" },
		lc_aes_to_pripyat					= { 3, "to_pripyat" },
		lc_garbage_to_puzir					= { 3, "to_puzir" },
		lc_puzir_to_darkvalley				= { 2, "to_darkvalley" },
		lc_limansk_to_red_forest			= { 3, "to_red_forest" },
		lc_limansk_to_hospital				= { 1, "to_hospital" },
		lc_hospital_to_limansk				= { 1, "to_limansk" },
		lc_generators_to_warlab				= { 3, "to_warlab" },
		lc_red_forest_to_atp				= { 3, "to_atp" },
		lc_red_forest_to_limansk			= { 4, "to_limansk" },
		lc_red_forest_to_radar				= { 1, "to_radar" },
		lc_red_forest_to_puzir				= { 2, "to_puzir" },
		lc_marsh_to_escape_1				= { 2, "to_escape" },
		lc_marsh_to_escape_2				= { 2, "to_escape" },
		lc_marsh_to_agroprom				= { 1, "to_agroprom" },
		lc_puzir_to_garbage					= { 1, "to_garbage" },
		lc_zaton_to_escape					= { 4, "to_escape" }
	}
	local add_spot = level.map_add_object_spot_ser
	local obj
	for sid, t in pairs(lv_changers) do
		obj = AI:story_object( story_ids[sid] )
		if obj then
			add_spot( obj.id, "level_changer"..tostring( t[1] ), t[2] )
		end
	end

	local out_lchangers = {
		lc_agroprom_to_escape		= "info_way100a",
		lc_escape_to_agroprom		= "info_way101a",
		lc_agroprom_to_yantar		= "info_way102a",
		lc_yantar_to_agroprom		= "info_way103a",
		lc_rostok_to_military		= "info_way104a",
		lc_military_to_rostok		= "info_way105a",
		lc_yantar_to_radar			= "info_way106a",
		lc_radar_to_darkvalley		= "info_way107a",
		lc_radar_to_yantar			= "info_way108a",
		lc_darkvalley_to_radar		= "info_way109a",
		lc_darkvalley_to_military	= "info_way110a",
		lc_military_to_darkvalley	= "info_way111a",
		lc_radar_to_military		= "info_way112a",
		lc_bar_to_military			= "info_way113a",
		lc_marsh_to_lost_village	= "info_way114a",
		lc_escape_to_darkscape		= "val_chase_start",
		lc_bar_to_atp				= "info_way_arhara_bar_atp",
		lc_atp_to_pripyat			= "info_way_arhara_atp_pripyat",
		lc_peshera_to_labirint		= "info_way_arhara_peshera_labirint",
		lc_darkvalley_to_puzir		= "info_way_arhara_td_les",
		lc_labirint_to_peshera		= "info_way_arhara_labirint_peshera",
		lc_atp_to_military			= "info_way_arhara_atp_military",
		lc_atp_to_escape			= "info_way_arhara_atp_kordon",
		lc_atp_to_garbage			= "info_way_arhara_atp_svalka",
		lc_radar_to_warlab			= "info_way_arhara_radar_warlab",
		lc_warlab_to_brainlab		= "info_way_arhara_warlab_brainlab",
		lc_warlab_to_military		= "info_way_arhara_warlab_skladu",
		lc_x18_to_warlab			= "info_way_arhara_x18_warlab",
		lc_aes2_to_atp				= "info_way_arhara_chaes2_atp",
		lc_pripyat_to_lost_village	= "info_way_arhara_pripyt_village",
		lc_aes2_to_aes				= "info_way_arhara_chaes2_chaes",
		lc_aes_to_aes2				= "perehod_chaes2_na_chaes",
		lc_aes_to_generators		= "info_way_arhara_chaes_generator",
		lc_hospital_to_agroprom		= "info_way_arhara_hospital_agroprom",
		lc_agroprom_to_marsh		= "info_way_arhara_agroprom_marsh1",
		lc_generators_to_pripyat	= "info_way_arhara_gener_pripyat",
		lc_red_forest_to_warlab		= "info_way_arhara_forest_warlab",
		lc_dead_city_to_limansk		= "info_way_arhara_dcity_limansk",
		lc_limansk_to_generators	= "info_way_arhara_limansk_generators",
		lc_dead_city_to_atp			= "info_way_arhara_dead_city_atp",
		lc_dead_city_to_rostok		= "info_way_arhara_dcity_rostok",
		lc_atp_to_dead_city			= "info_way_arhara_atp_dead_city",
		lc_dead_city_to_zaton		= "info_way_arhara_dcity_zaton",
		lc_limansk_to_dead_city		= "info_way_arhara_lima_dcity",
		lc_garbage_to_peshera		= "info_way_arhara_cvalka_peshera",
		lc_agroprom_to_peshera		= "info_way_arhara_agro_peshera",
		lc_peshera_to_garbage		= "info_way_arhara_peshera_cvalka",
		lc_peshera_to_agroprom		= "info_way_arhara_peshera_agro",
		lc_garbage_to_aver			= "info_way_arhara_svalka_earth",
		lc_aver_to_svalka			= "info_way_arhara_svalka_earth",
		lc_aver_to_labirint			= "info_way_arhara_earth_labirint",
		lc_labirint_to_aver			= "info_way_arhara_labirint_earth",
		lc_labirint_to_yantar		= "info_way_arhara_labirint_yantar",
		lc_darkvalley_to_aver		= "info_way_arhara_td_earth",
		lc_aver_to_darkvalley		= "info_way_arhara_td_earth",
		lc_military_to_aver			= "info_way_arhara_military_earth",
		lc_aver_to_military			= "info_way_arhara_military_earth",
		lc_yantar_to_labirint		= "info_way_arhara_yantar_labirint",
		lc_escape_to_marsh			= "info_way_arhara_kordon_boloto",
		lc_generators_to_hospital	= "info_way_arhara_gener_hospital",
		lc_lost_village_to_limansk	= "info_way_arhara_village_limansk",
		lc_lost_village_to_hospital	= "info_way_arhara_village_hospital",
		lc_military_to_red_forest	= "info_way_arhara_radar_forest",
		lc_warlab_to_generators		= "info_way_arhara_warlab_generators"
	}
	local lc
	for sid, info in pairs(out_lchangers) do
	--	if not has_alife_info(info) then
			lc = AI:story_object( story_ids[sid] )
			if lc then AI:release(lc, true) end
	--	end
	end
end

	