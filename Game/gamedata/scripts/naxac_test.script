-- -*- mode: lua; encoding: windows-1251 -*-
function ggg()
	naxac_debug.show_debug_static()
end

	-- local obj, st
	-- local t = {}
	-- local new_ids = {}
	-- for i = 1, 65534 do	
		-- obj = AI:object(i)
		-- if obj and new_ids[i] == nil
			-- and obj:clsid() == clsid.script_restr
			-- and obj.m_story_id ~= 4294967296
			-- and (string.find(obj:name(), "space_restrictor")) ~= nil
		-- then
			-- local data = netpk:get(obj)
			-- if string.find(data.custom_data, "[sr_level_changer]", 1, true) then
				-- log("attemp to respawn %s:%s (%s)", obj:name(), obj.m_story_id, object_level_name(obj))
				-- local sid = obj.m_story_id
				-- local spawn_id = AI:spawn_id(sid)
				-- if spawn_id < 15515 then
					-- local new_obj = AI:create(spawn_id)
					-- if new_obj then
						-- if new_obj.m_story_id == sid then
							-- log("- success")
							-- new_ids[new_obj.id] = true
							-- AI:release(obj, true)
						-- else
							-- AI:release(new_obj, true)
							-- log("! fail")
						-- end
					-- end
				-- end
			-- end
		-- end
	-- end


--[[--------------------------------------------------------------------------------------------------------
	level_changers.create_teleport_on_actor(vector():set(-586.895874023438,-1.76928663253784,-409.773040771484), 2578, 4129)
------------------------------------------------------------------------------------------------------------
	level_changers.create_level_changer("lc_pripyat_to_bar", true)
------------------------------------------------------------------------------------------------------------
	Actor:set_actor_position( vector():set(326.864013671875,19.6529998779297,300.252990722656) )
------------------------------------------------------------------------------------------------------------
	local max_lv = n_vertexes.get_max_level_vertex()
	local actor_pos = Actor:position()
	local dist, min_dist = 0, math.huge
	local vert = 0
	for i = 1, max_lv do
		local pos = level.vertex_position(i)
		dist = pos:distance_to_sqr(actor_pos)
		if dist < min_dist then
			min_dist = dist
			vert = i
		end
	end
	log("nearest level_vertex: %s", vert)
------------------------------------------------------------------------------------------------------------
	local path_walk_name = "pri_monolith_river_port_walker_1_walk"
	local path_look_name = "pri_monolith_river_port_walker_1_look"

	local path_walk = patrol(path_walk_name)
	local path_look = patrol(path_look_name)
	for i = 0, path_walk:count()-1 do
		local flw = path_walk:flags(i)
		log("point %s[%s] : flags = %s", path_walk:name(i), tostring(i), tostring(flw:get()))
		if flw:get() ~= 0 then
			for j = 0, path_look:count()-1 do
				local fll = path_look:flags(j)
				if fll:equal(flw) then
					log( "- found look point: #%s (%s)", path_look:name(j), tostring(fll:get()) )
					break
				end
			end
		end
	end
------------------------------------------------------------------------------------------------------------
	local obj = level.get_target_obj()
	if obj then
		log(obj:name())
	end
------------------------------------------------------------------------------------------------------------
	local spwn_id = AI:spawn_id(97091)
	log(tostring(spwn_id))
------------------------------------------------------------------------------------------------------------
	local obj = Actor:object("wpn_ak105")
	if obj then
		if _G.tmp_ammo_type == nil then
			_G.tmp_ammo_type = {}
		end
		local v
		local data = netpk:get(AI:object(obj:id()), netpk.fState)
		local at = data.ammo_type
		for i = 0, 2000 do
			v = obj:get_wpn_int(nil, i)
			if _G.First_test_AT == nil then
				if v == at then
					log("found: %s -> %s", i, v)
					_G.tmp_ammo_type[i] = true
				end
			else
				if _G.tmp_ammo_type[i] then
					if v == at then
					log("found: %s -> %s", i, v)
					else
						_G.tmp_ammo_type[i] = nil
					end
				end
			end
		end
		_G.First_test_AT = true
		log("-------------------------------------------------")
		obj:set_wpn_int(936, 4+2+1)
	end
------------------------------------------------------------------------------------------------------------
function restore_anoms()
	if has_alife_info("snpt_vp1_have") then
		AI:create("zone_ozero",vector():set(58.848209381104,1.0079244375229,367.44982910156),276095,3760)
	end
	for i = 15606, 15618, 1 do
		AI:create(i)
	end
--	local t = {723,726,740,745,746,747,749,750,751,754,755,773}
--	for i,v in ipairs(t) do AI:create(v) end
end

function add_spot_lc()
	local obj = AI:story_object(story_ids.lc_pripyat_to_east_pripyat)
	level.map_add_object_spot_ser(obj.id, "level_changer2", "В Восточную Припять")
end
--]]--------------------------------------------------------------------------------------------------------

