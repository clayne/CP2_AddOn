-- -*- mode: lua; encoding: windows-1251 -*-
---------------------------- variable and table --------------------------
local table_sort = table.sort
local table_insert = table.insert
local math_random = math.random
local string_find = string.find
local level_object = level.object_by_id

local anoms_difficulty_koef = {
	[game_difficulty.novice ]	= 0.75,
	[game_difficulty.stalker]	= 1.0,
	[game_difficulty.veteran]	= 1.25,
	[game_difficulty.master ]	= 1.5
}
local anoms_sections = {
	buzz			= { "buzz",              {shtype=0, radius=1.8, center={0,0,0}}                             },
	electra			= { "witches_galantine", {shtype=0, radius=4,   center={0,0,0}}                             },
	fountain		= { "fountain",          {shtype=0, radius=2.5, center={0,0,0}}                             },
	gravi			= { "gravi_zone",        {shtype=0, radius=3,   center={0,0,0}}                             },
	mincer			= { "mincer",            {shtype=0, radius=3.5, center={0,0,0}}                             },
	mosquito_bald	= { "mosquito_bald",     {shtype=0, radius=3,   center={0,0,0}}                             },
	sakbuzz			= { "sakbuzz",           {shtype=0, radius=4,   center={0,0,0}}                             },
	smallrain		= { "smallrain",         {shtype=0, radius=4,   center={0,0,0}}                             },
	sphere			= { "sphere",            {shtype=0, radius=2.8, center={0,0,0}}                             },
	zavesa			= { "zavesa",            {shtype=0, radius=3,   center={0,0,0}}                             },
	zharka			= { "zharka_static",     {shtype=1, v1={1.8,0,0}, v2={0,5,0}, v3={0,0,1.5}, offset={0,0,0}} },
	radiation		= { "radioactive",       {shtype=0, radius=7,   center={0,0,0}}                             },
	zone_ice		= { "zone_ice",          {shtype=0, radius=4,   center={0,0,0}}                             }
}
local anom_suffix_by_level = {
	l01_escape			= { weak = 60, average = 25, strong = 15 },
	l02_garbage			= { weak = 40, average = 40, strong = 20 },
	l03_agroprom		= { weak = 35, average = 45, strong = 25 },
	l04_darkvalley		= { weak = 30, average = 40, strong = 30 },
	l05_bar				= { weak = 45, average = 40, strong = 15 },
	l06_rostok			= { weak = 20, average = 40, strong = 40 },
	l08_yantar			= { weak = 20, average = 35, strong = 45 },
	l07_military		= { weak = 15, average = 30, strong = 55 },
	l10_radar			= { weak = 10, average = 30, strong = 60 },
	l11_pripyat			= { weak = 10, average = 25, strong = 65 },
	l12_stancia			= { weak = 5,  average = 10, strong = 85 },
	l12_stancia_2		= { weak = 5,  average = 5,  strong = 90 },
	puzir				= { weak = 40, average = 30, strong = 30 },
	aver				= { weak = 30, average = 40, strong = 30 },
	marsh				= { weak = 60, average = 30, strong = 10 },
	limansk				= { weak = 20, average = 40, strong = 40 },
	hospital			= { weak = 20, average = 30, strong = 50 },
	red_forest			= { weak = 20, average = 25, strong = 55 },
	lost_village		= { weak = 30, average = 30, strong = 40 },
	generators			= { weak = 10, average = 20, strong = 70 },
	atp_for_test22		= { weak = 35, average = 35, strong = 30 },
	dead_city			= { weak = 15, average = 25, strong = 60 },
	zaton				= { weak = 5,  average = 15, strong = 80 },
	jupiter				= { weak = 5,  average = 10, strong = 85 },
	pripyat				= { weak = 5,  average = 20, strong = 75 },
	l41_darkscape_ogse	= { weak = 30, average = 35, strong = 35 }
}

local anti_spawn_zones = {}
local need_init_anti_spawn_zones = true

local level_anoms = {
	l01_escape = {
		60,
		85,
		{
			electra			= 12,
			zavesa			= 2,
			smallrain		= 6,
			fountain		= 7,
			gravi			= 0,
			mincer			= 0,
			buzz			= 0,
			sakbuzz			= 2,
			mosquito_bald	= 0,
			sphere			= 4
		}
	},
	l02_garbage = {
		60,
		85,
		{
			radiation		= 7,
			mosquito_bald	= 12,
			mincer			= 2,
			smallrain		= 5,
			zavesa			= 3,
			electra			= 15,
			gravi			= 10,
			buzz			= 12,
			sakbuzz			= 3,
			sphere			= 3,
			fountain		= 2
		}
	},
	l03_agroprom = {
		55,
		75,
		{
			radiation		= 5,
			mosquito_bald	= 12,
			mincer			= 3,
			smallrain		= 4,
			fountain		= 2,
			zavesa			= 2,
			electra			= 0,
			buzz			= 12,
			gravi			= 10,
			sakbuzz			= 3,
			sphere			= 3
		}
	},
	l04_darkvalley = {
		65,
		95,
		{
			radiation		= 7,
			mincer			= 3,
			mosquito_bald	= 12,
			fountain		= 2,
			zavesa			= 3,
			smallrain		= 5,
			electra			= 0,
			buzz			= 10,
			zharka			= 8,
			gravi			= 8,
			sakbuzz			= 5,
			sphere			= 4
		}
	},
	l05_bar = {
		15,
		35,
		{
			radiation		= 1,
			mosquito_bald	= 8,
			mincer			= 2,
			zavesa			= 3,
			fountain		= 1,
			smallrain		= 4,
			electra			= 1,
			buzz			= 5,
			gravi			= 8,
			sakbuzz			= 2,
			zharka			= 4,
			sphere			= 2
		}
	},
	l06_rostok = {
		30,
		60,
		{
			radiation		= 4,
			mincer			= 3,
			mosquito_bald	= 7,
			smallrain		= 2,
			electra			= 2,
			zavesa			= 2,
			zharka			= 25,
			gravi			= 0,
			sakbuzz			= 3,
			buzz			= 10,
			sphere			= 2,
			fountain		= 1
		}
	},
	l08_yantar = {
		50,
		70,
		{
			radiation		= 4,
			mosquito_bald	= 8,
			mincer			= 8,
			fountain		= 1,
			smallrain		= 4,
			zavesa			= 3,
			electra			= 2,
			buzz			= 8,
			zharka			= 5,
			gravi			= 8,
			sakbuzz			= 3,
			sphere			= 3
		}
	},
	l07_military = {
		80,
		100,
		{
			radiation		= 7,
			mincer			= 4,
			mosquito_bald	= 15,
			fountain		= 2,
			smallrain		= 4,
			zavesa			= 3,
			electra			= 12,
			zharka			= 8,
			gravi			= 0,
			sakbuzz			= 3,
			buzz			= 10,
			sphere			= 4
		}
	},
	l10_radar = {
		50,
		80,
		{
			radiation		= 9,
			mincer			= 6,
			mosquito_bald	= 11,
			fountain		= 10,
			smallrain		= 6,
			electra			= 2,
			zavesa			= 3,
			buzz			= 10,
			zharka			= 12,
			gravi			= 10,
			sakbuzz			= 5,
			sphere			= 4
		}
	},
	l11_pripyat = {
		60,
		85,
		{
			radiation		= 8,
			mincer			= 10,
			mosquito_bald	= 10,
			zavesa			= 3,
			fountain		= 1,
			smallrain		= 1,
			electra			= 10,
			zharka			= 8,
			gravi			= 10,
			buzz			= 10,
			sakbuzz			= 2,
			sphere			= 3
		}
	},
	l12_stancia = {
		100,
		130,
		{
			radiation		= 12,
			mincer			= 2,
			mosquito_bald	= 10,
			smallrain		= 6,
			electra			= 0,
			fountain		= 1,
			zavesa			= 3,
			buzz			= 10,
			zharka			= 7,
			gravi			= 8,
			sakbuzz			= 4,
			sphere			= 4
		}
	},
	l12_stancia_2 = {
		45,
		60,
		{
			radiation		= 1
		}
	},
	puzir = {
		150,
		170,
		{
			radiation		= 5,
			mincer			= 12,
			mosquito_bald	= 15,
			smallrain		= 6,
			zavesa			= 3,
			electra			= 14,
			buzz			= 12,
			zharka			= 5,
			gravi			= 14,
			sakbuzz			= 3,
			sphere			= 4,
			fountain		= 1
		}
	},
	aver = {
		65,
		90,
		{
			radiation		= 6,
			mincer			= 14,
			mosquito_bald	= 12,
			smallrain		= 5,
			electra			= 0,
			zavesa			= 4,
			buzz			= 15,
			zharka			= 5,
			gravi			= 15,
			sakbuzz			= 4,
			sphere			= 5,
			fountain		= 1
		}
	},
	marsh = {
		75,
		90,
		{
			radiation		= 3,
			mincer			= 8,
			mosquito_bald	= 12,
			smallrain		= 9,
			electra			= 0,
			zavesa			= 4,
			buzz			= 15,
			zharka			= 5,
			gravi			= 15,
			sakbuzz			= 4,
			sphere			= 5,
			fountain		= 1
		}
	},
	limansk = {
		32,
		50,
		{
			radiation		= 3,
			mosquito_bald	= 10,
			mincer			= 12,
			smallrain		= 2,
			fountain		= 16,
			zavesa			= 2,
			electra			= 0,
			gravi			= 10,
			buzz			= 10,
			sakbuzz			= 2,
			zharka			= 8,
			sphere			= 3
		}
	},
	hospital = {
		2,
		3,
		{
			radiation		= 1,
			mincer			= 8,
			mosquito_bald	= 8,
			zavesa			= 2,
			fountain		= 1,
			electra			= 7,
			buzz			= 8,
			gravi			= 5,
			sakbuzz			= 2,
			zharka			= 5,
			sphere			= 2
		}
	},
	red_forest = {
		60,
		85,
		{
			radiation		= 5,
			mincer			= 8,
			mosquito_bald	= 10,
			zavesa			= 4,
			fountain		= 2,
			smallrain		= 6,
			electra			= 3,
			zharka			= 8,
			gravi			= 10,
			buzz			= 10,
			sakbuzz			= 4,
			sphere			= 5
		}
	},
	lost_village = {
		3,
		10,
		{
			radiation		= 4,
			mincer			= 8,
			mosquito_bald	= 8,
			zavesa			= 3,
			fountain		= 1,
			smallrain		= 1,
			electra			= 10,
			zharka			= 5,
			gravi			= 5,
			buzz			= 5,
			sakbuzz			= 2,
			sphere			= 3
		}
	},
	generators = {
		75,
		105,
		{
			radiation		= 8,
			mincer			= 15,
			mosquito_bald	= 11,
			fountain		= 1,
			zavesa			= 5,
			smallrain		= 2,
			electra			= 15,
			zharka			= 5,
			gravi			= 10,
			buzz			= 16,
			sakbuzz			= 6,
			sphere			= 4
		}
	},
	atp_for_test22 = {
		90,
		110,
		{
			radiation		= 4,
			mincer			= 13,
			mosquito_bald	= 10,
			fountain		= 2,
			smallrain		= 2,
			zavesa			= 4,
			electra			= 15,
			zharka			= 10,
			gravi			= 10,
			buzz			= 20,
			sakbuzz			= 4,
			sphere			= 4
		}
	},
	dead_city = {
		55,
		80,
		{
			radiation		= 5,
			mincer			= 10,
			mosquito_bald	= 10,
			zavesa			= 3,
			fountain		= 2,
			smallrain		= 2,
			electra			= 10,
			zharka			= 8,
			gravi			= 10,
			buzz			= 10,
			sakbuzz			= 1,
			sphere			= 4
		}
	},
	zaton = {
		120,
		150,
		{
			radiation		= 10,
			electra			= 25,
			zavesa			= 6,
			smallrain		= 3,
			fountain		= 5,
			gravi			= 15,
			mincer			= 15,
			buzz			= 15,
			sakbuzz			= 8,
			mosquito_bald	= 15,
			sphere			= 12,
			zharka			= 8
		}
	},
	jupiter = {
		130,
		170,
		{
			radiation		= 12,
			electra			= 25,
			zavesa			= 4,
			smallrain		= 3,
			fountain		= 4,
			gravi			= 20,
			mincer			= 15,
			buzz			= 25,
			sakbuzz			= 5,
			mosquito_bald	= 20,
			sphere			= 12,
			zharka			= 5
		}
	},
	pripyat = {
		90,
		120,
		{
			radiation		= 7,
			electra			= 15,
			zavesa			= 4,
			smallrain		= 1,
			fountain		= 3,
			gravi			= 18,
			mincer			= 15,
			buzz			= 15,
			sakbuzz			= 4,
			mosquito_bald	= 18,
			sphere			= 10,
			zharka			= 4
		}
	},
	l41_darkscape_ogse = {
		80,
		110,
		{
			radiation		= 12,
			electra			= 25,
			zavesa			= 4,
			smallrain		= 3,
			fountain		= 4,
			gravi			= 20,
			mincer			= 15,
			buzz			= 25,
			sakbuzz			= 5,
			mosquito_bald	= 20,
			sphere			= 12,
			zharka			= 5
		}
	}
}

local level_arts = {}
local need_init_level_arts = true

---------------------------- variable and table ---------------------end--
---------------------------- function for spawn --------------------------
function init()
	n_vertexes.init()

	if not level_anoms[level.name()] then return end

	local blow = amk.load_variable("blowout",0)
	if blow <= 0 or blow >= 4 then
		this.spawn_anoms()
	end

	spatial_subway.init()
end

function spawn_anoms()
	local lname = level.name()
	if Actor:has_info("testsak_"..lname) then return end

	this.add_antispawn_zone(Actor:position(), 7, true)

	local string_gfind = string.gfind
	local ini = ini_file("misc\\amk_anoms.ltx")
	local result, id, value = nil, nil, nil
	local sec = lname..".anoms"
	if ini:section_exist(sec) and need_init_anti_spawn_zones then
		local x,y,z,r
		for a=0,ini:line_count(sec)-1 do
			result,id,value=ini:r_line(sec,a,"","")
			if id~=nil and id~="" then
				local t = {}
				for s in string_gfind(id, "[%d%-%.]+") do
					t[#t+1] = tonumber(s)
				end
				x,y,z,r = unpack(t)
				if not (x and y) then
					abort("[amk_anoms.init] Error while parsing safe zones for section [%s] at line #%d[%s]", sec, (a+1), id)
				else
					if z and r then
						table_insert( anti_spawn_zones, {vector():set(x, y, z), r} )
					elseif not (z and r) then
						table_insert( anti_spawn_zones, {level.vertex_position(x), y} )
					else
						abort("[amk_anoms.init] Error while parsing safe zones for section [%s] at line #%d[%s]", sec, (a+1), id)
					end
				end
			end
		end
		need_init_anti_spawn_zones = nil
	end

	sec = lname..".arts"
	if ini:section_exist(sec) then
		if need_init_level_arts then
			for a = 0, ini:line_count(sec)-1 do
				result, id, value = ini:r_line(sec, a, "", "")
				if id ~= nil and id ~= "" then
					level_arts[id] = tonumber(value) or 0
				end
			end
			need_init_level_arts = nil
		end
		local arts_min, arts_max = unpack( ini:r_list("arts_count", lname) )
		this.generate_arts(lname, arts_min, arts_max)
	end

	Actor:give_info_portion("testsak_"..lname)

	this.generate_anoms()
end 

function after_blow_on()
	this.spawn_anoms()

	move_mgr.invalidate_pp_accessibility()
end

function can_remove_anom(sobj, map)
	if not check_exclusion(sobj, map) then
		set_online_anomaly_status(sobj.id, "del")
		return true
	elseif level_anoms[map] == nil then
		if has_alife_info("testsak_"..map) then
			return false
		end
		if math_random() < 0.2 then
			Actor:give_info_portion("testsak_"..map)
			amk_anoms.spawn_anom_art(sobj)
		end
	end
	return false
end

function pre_blow_off()
	for i, lvl in ipairs( n_vertexes.get_locations() ) do
		Actor:disable_info_portion("testsak_"..lvl)
	end

	local sobj, map
	for i = 1, 65534 do
		sobj = AI:object(i)
		if sobj and IsAnomaly(nil, sobj:clsid(), true) then
			if can_remove_anom(sobj, object_level_name(sobj)) then
				AI:release(sobj,true)
			end
		end
	end

	local v
	for i = #anti_spawn_zones, 1, -1 do
		v = anti_spawn_zones[i]
		if v[3] then
			table.remove(anti_spawn_zones, i)
		end
	end
end

function generate_anoms()
	local lname = level.name()
	local v = level_anoms[lname]
	if v then
		local max_level_vertex = n_vertexes.get_max_level_vertex()
		local new_lv
		local cnt = 0
		local mxx = math_random(v[1],v[2]) * anoms_difficulty_koef[level.get_game_difficulty()]
		local anoms = v[3]
		local max_rnd = 0
		for k,v in pairs(anoms) do
			max_rnd = max_rnd + v
		end
		local section, t_shape, rnd, sobj
		local shapes = {}
		local chk_count = 100000
		while cnt < mxx do
			chk_count = chk_count - 1
			if chk_count<0 then break end
			new_lv = math_random(1, max_level_vertex)
			local pos = level.vertex_position(new_lv)
			if check_coordinates(pos, lname) then
				local rnd = math_random()*100
				section = "zone_ice"
				if 5 < rnd then
					rnd = math_random(1, max_rnd)
					for k, v in pairs(anoms) do
						if rnd <= v then section = k break end
						rnd = rnd - v
					end
					t_shape = anoms_sections[section][2]
					section = "amk_zone_"..
							anoms_sections[section][1]..
							anom_suffix(lname)
				else
					t_shape = anoms_sections[section][2]
				end

				local t = {}
				shapes[1] = t
				t.shtype = t_shape.shtype
				if t.shtype == 0 then
					t.radius = t_shape.radius
					t.center = vector():set( unpack(t_shape.center) )
				else
					t.box_matrix = matrix():set(
								vector():set( unpack(t_shape.v1) ),
								vector():set( unpack(t_shape.v2) ),
								vector():set( unpack(t_shape.v3) ),
								vector():set( unpack(t_shape.offset) )
							)
				end

				sobj = AI:create( section, pos, new_lv, n_vertexes.get_nearest_gv(pos) )
				if sobj then
					netpk:modify( sobj, { shapes = shapes }, netpk.fState )
					cnt = cnt + 1
					local r
					if t.shtype == 0 then
						r = t.radius
					else
						r = math.sqrt(
							t.box_matrix.i:magnitude()^2 +
							t.box_matrix.k:magnitude()^2
						)/2
					end
					table_insert( anti_spawn_zones, { pos, r+2, true } )
				end
			end
		end
	end
end

function generate_arts(lname, _min, _max)
	local spawn_count = math_random(_min, _max)
	if spawn_count == 0 then return end

	local max_rnd = 0
	for k,v in pairs(level_arts) do
		max_rnd = max_rnd + v
	end

	local max_level_vertex = n_vertexes.get_max_level_vertex()
	local cnt = 0
	local new_lv, new_gv, pos, min_dist, g1

	while cnt < spawn_count do
		new_lv = math_random(1, max_level_vertex)
		pos = level.vertex_position(new_lv)
		if check_coordinates(pos,lname) then
			new_gv = n_vertexes.get_nearest_gv( pos )

			local rnd = math_random(1, max_rnd)
			for sect, val in pairs(level_arts) do
				if rnd <= val then
					AI:create_free(sect, pos, new_lv, new_gv)
				--	log("# spawn artefact: %s", sect)
					cnt = cnt + 1
					break
				end
				rnd = rnd - val
			end
		end
	end
end

function spawn_anom_art(sobj)
	local sect = sobj:section_name()
	local art_section
	if sys_ini:line_exist(sect, "artefacts") then
		local str = sys_ini:r_string(sect, "artefacts")
		if str == nil or str == "" then return false end
		local tmp = string.explode(str, ",", true)
		local arts = { all = {} }
		for i = 1, #tmp, 2 do
			arts[tmp[i]] = tonumber(tmp[i+1])
			table_insert(arts.all, tmp[i])
		end
		art_section = table.random(arts.all)
	--	log("[amk_anoms.spawn_anom_art]: attempt to create artefact '%s' in '%s'", art_section, sobj:name())
		if math_random(1,1000)/1000 > arts[art_section] then
	--		log("! failed")
			return false
		end
	else
		return false
	end
	if not art_section then return false end

	local x = math_random(-30,30)/100
	local z = math_random(-30,30)/100
	local y = math_random(30,50)/100
	AI:create_free(art_section,
				sobj.position:add(vector():set(x,y,z)),
				sobj.m_level_vertex_id,
				sobj.m_game_vertex_id)
--	log("- successfully")
	return true
end


-- аномалии, которые не исчезнут при НИ, да и вообще
local exclusion_part = {
	"zat_psychic_",						-- рубец	15606 - 15618
	"zone_ozero",						-- танцовщица в кинотеатре Припяти
	"zone_tuman",						-- Острова туман 
	"zone_fly_island",					-- Острова парение
	"_snp",								-- Снайпер
	"anim_ph_",							-- Аномальные объекты
	"propeller",						-- Пропеллер
	"sky_anomaly",						-- Sky_Anomaly
	"esc_zone_witches",					-- перемещающаяся электра (Кордон)
	"pri_zone_witches",					-- электра на колесе обозрения (ЦП)
	"zone_topolinypuh",					-- пух (Радар)
	"red_zone_acidic",					-- холодцы в шахте (Красный Лес)
	"podval_tornado_strong",			-- торнадо в подвале (Лиманск)
	"dcity_fontan_fountain_average",	-- фонтан в фонтане (МГ)
	"rostok_zone_witches",				-- электры везде (Росток)
	"rostok_zone_zharka_static",		-- жарки в тоннеле (Росток)
	"tutorial"							-- эпичная смерть псевдоплоти (Кордон)
}
function check_exclusion(obj,map)
	local obj_section = obj:section_name()
	local obj_name = obj:name()
	if string_find(obj_name,"amk_")
		or obj_section == "zone_ice"
		or string_find(obj_section,"caps_")
	then return false end
	
	if not level_anoms[map] then return true end

	if (string_find(obj_section,"_mincer") and map ~= "l11_pripyat")
		or obj:clsid() == clsid.zone_radioactive
	then
		return true
	end

	for i, v in ipairs(exclusion_part) do
		if string_find(obj_name, v) then
			return true
		end
	end
	return false
end

function anom_suffix(lvl)
	local rnd = math.random(100)
	for k, v in pairs( anom_suffix_by_level[lvl] ) do
		if rnd <= v then return "_"..k end
		rnd = rnd - v
	end
	return "_average"
end

function check_coordinates(pos, lname)
	local hides = amk_hideouts.hide[lname]
	if hides then
		for i,o in ipairs(hides) do
			if o.zone then
				for j,v in ipairs(o.zone) do
					if amk.check_npc_in_box(
						pos,
						vector():set( unpack(v.p1) ),
						vector():set( unpack(v.p2) ),
						(v.p3 and vector():set( unpack(v.p3) ) )
					)
					then return false end
				end
			end
		end
	end
	for i,v in ipairs(anti_spawn_zones) do
		if pos:distance_to( v[1] ) <= v[2] then return false end
	end
	return true
end

function add_antispawn_zone(pos, radius, rem)
	table.insert( anti_spawn_zones, { pos, (radius or 4), rem } )
end

function set_online_anomaly_status(obj_id, status)
	local obj = level_object(obj_id)
	if obj then
		if status == "off" or status == "del" then
			obj:disable_anomaly()
			amk_anoms.remove_anomaly(obj_id)
			amk_anoms.restrictor_deleted( obj_id, obj:name() )
		else
			obj:enable_anomaly()
			local sobj = AI:object(obj_id)
			amk_anoms.add_anomaly(obj_id, sobj.position, sobj.radius)
		end
	end
end

function release_anomaly(sobj)
	if sobj and GGraph:valid_vertex_id(sobj.m_game_vertex_id) then
	--	if not check_exclusion( sobj, object_level_name(sobj) ) then
			amk_anoms.set_online_anomaly_status(sobj.id, "del")
			AI:release(sobj, true)
			return true
	--	end
	end
	return false
end
---------------------------- function for spawn ---------------------end--
---------------------------- npc and anom_binder -------------------------
local anoms_for_npc = {}
local npcs_for_anom = {}
local actual_anoms_for_npc = {}
local npc_restrictors_need_update = {}

function init_if_needed(nid)
	if ( not anoms_for_npc[nid] ) then
		anoms_for_npc[nid] = {}
	end
	if ( not actual_anoms_for_npc[nid] ) then
		actual_anoms_for_npc[nid] = {}
	end
	return anoms_for_npc[nid], actual_anoms_for_npc[nid]
end

function add_restriction(npc, id, name)
	if name == nil then
		name = ( level_object(id) and level_object(id):name() )
	end
	if not name then
		log("! amk_anoms.add_restriction: Warning! Nonexistent restrictor id %d", id)
		return
	end

	local nid = npc:id()
	init_if_needed(nid)
	if not anoms_for_npc[nid][id] then
		anoms_for_npc[nid][id] = name
		npc_restrictors_need_update[nid] = true
	end
end

function remove_restriction(npc,id,name,immed)
	local nid = npc:id()
	if name == nil then
		name = ( level_object(id) and level_object(id):name() )
	end
	if not name then
		abort("remove_restriction(): Nonexistent restrictor id:%d", id)
		return
	end
	
	init_if_needed(nid)
	if immed then
		if actual_anoms_for_npc[nid][id] then
			npc:remove_restrictions("", name)
			actual_anoms_for_npc[nid][id] = nil
			npcs_for_anom[id][nid] = nil
		end
		if anoms_for_npc[nid][id] then
			anoms_for_npc[nid][id] = nil
		end
	else
		if anoms_for_npc[nid][id] then
			anoms_for_npc[nid][id] = nil
			npc_restrictors_need_update[nid] = true
		end
	end
end

function restrictor_deleted(id,name)
	for nid,anoms in pairs(anoms_for_npc) do
		if anoms[id] then
			anoms[id] = nil
			npc_restrictors_need_update[nid] = true
		end
	end
end

function clear_to_release(id)
	if npcs_for_anom[id] then
		return table.size( npcs_for_anom[id] ) == 0
	else
		return true
	end
end

function have_pending_sync(npc)
	return npc_restrictors_need_update[ npc:id() ] == true
end

local max_dynamic_restrictors_count = 40

function syncronize(npc)
	local nid = npc:id()
	local anoms, actual = init_if_needed(nid)
	local cnt = table.size(anoms)

	if cnt > max_dynamic_restrictors_count then
		local disttbl = {}
		local dist, sobj
		local npc_pos = npc:position()
		for id in pairs(anoms) do
			dist = math.huge
			sobj = AI:object(id)
			if sobj then
				dist = npc_pos:distance_to_sqr(sobj.position)
			end
			table_insert( disttbl, {id = id, dist = dist} )
		end
		table_sort(disttbl, function (a, b) return a.dist > b.dist end)

		for i = 1, cnt-max_dynamic_restrictors_count do
			anoms[ disttbl[i].id ]=nil
		end
	end

	local add, rem = {}, {}
	for id, name in pairs(actual) do
		if not anoms[id] then
			table_insert(rem, name)
			if npcs_for_anom[id] then
				npcs_for_anom[id][nid] = nil
			end
			actual[id] = nil
		end
	end

	for id,name in pairs(anoms) do
		if not actual[id] then
			table_insert(add, name)
			if not npcs_for_anom[id] then
				npcs_for_anom[id] = {}
			end
			npcs_for_anom[id][nid] = true
			actual[id] = name
		end
	end
	npc:remove_restrictions( "", table.concat(rem, ",") )
	npc:add_restrictions( "", table.concat(add, ",") )
	npc_restrictors_need_update[nid] = false
end

function unreg_in_anom_manager(npc)
	local nid = npc:id()
	local anoms = anoms_for_npc[nid]
	if anoms then
		for aid in pairs(anoms) do
			if npcs_for_anom[aid] then
				npcs_for_anom[aid][nid] = nil
			end
		end
		anoms_for_npc[nid] = nil
	end
end

function bind(obj)
	obj:bind_object(anom_binder(obj))
end

class "anom_binder" ( object_binder )

function anom_binder:__init(obj) super(obj) end

function anom_binder:net_spawn(sobj)
	if not object_binder.net_spawn( self,sobj ) then return false end

	amk_anoms.add_anomaly(sobj.id, sobj.position, sobj.radius)
	return true
end

function anom_binder:net_destroy()
	amk_anoms.remove_anomaly( self.object:id() )
	object_binder.net_destroy(self)
end

local anom_list = {}

function add_anomaly(id,pos,radius)
	if anom_list == nil then anom_list = {} end 
	anom_list[id] = { pos = pos, radius = radius or 0.0 }
end

function remove_anomaly(id)
	if anom_list then anom_list[id] = nil end
end

function get_nearest_anomaly(npc)
	return get_nearest_anomaly_for_pos( npc:position() )
end

function get_nearest_anomaly_for_pos(posn)
	local anomid, pos, radius, dist
	local mindist = math.huge
	for id, o in pairs(anom_list) do
		dist = posn:distance_to(o.pos)-o.radius
		if dist<mindist then 
			mindist = dist
			anomid = id
			pos = o.pos
			radius = o.radius
		end
	end
	return anomid, pos, radius, mindist
end

function get_anomaly_list(npc, radius)
	return get_anomaly_list_for_pos( npc:position(), radius )
end

function get_anomaly_list_for_pos(posn, radius)
	local ret = {}
	if anom_list then
		local obj, dist
		for id, o in pairs(anom_list) do
			obj = level_object(id)
			if obj then
				dist = posn:distance_to(o.pos) - o.radius
				if dist < radius then
					table_insert(ret,
						{
							id = id,
							name = obj:name(),
							pos = o.pos,
							radius = o.radius
						}
					)
				end
			end
		end
	end
	return ret
end
---------------------------- npc and anom_binder --------------------end--
---------------------------- ------------------ --------------------------
