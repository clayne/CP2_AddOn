-- -*- mode: lua; encoding: windows-1251 -*-
--[[
	Изменения script_version:
	4 - сохранение поля job_online
	5 - сохранение поля was_in_smart_terrain
	modyfied by xStream
]]
off_online_kontroller = false
custom_data_on_spawn = nil

need_be_online = {}

local levels_types = {
	l01_escape = 0,
	l02_garbage = 0,
	l03_agroprom = 0,
	l03u_agr_underground = 1,
	l04_darkvalley = 0,
	l04u_labx18 = 1,
	l05_bar = 1,
	l06_rostok = 0,
	l07_military = 0,
	l08_yantar = 0,
	l08u_brainlab = 1,
	l10_radar = 0,
	l10u_bunker = 1,
	l11_pripyat = 0,
	l12_stancia = 0,
	l12_stancia_2 = 0,
	l12u_control_monolith = 1,
	l12u_sarcofag = 1,
	atp_for_test22 = 0,
	peshera = 1,
	puzir = 0,
	av_peshera = 1,
	aver = 0,
	hospital = 0,
	limansk = 0,
	marsh = 0,
	warlab = 1,
	lost_village = 0,
	generators = 0,
	dead_city = 0,
	jupiter = 0,
	zaton = 0,
	pripyat = 0,
	jupiter_underground = 1,
	labx8 = 1,
	l41_darkscape_ogse = 0
}

class "se_monster" (cse_alife_monster_base)
--------------------
function se_monster:__init (section) super (section)
	self.ini = nil
	self.ini_initialized = false

	self.smart_terrain_conditions = nil
	self.smart_terrain_conditions_initialized = false

	self.day_night_switch	= false
	self.min_distance_sqr	= 3600	-- 60m

	-- этот флаг берётся из работы смарта
	-- true     = всегда в онлайне
	-- false    = всегда в офлайне
	-- condlist = условие, которое отпределяет true или false
	-- nil      = смарту всё равно
	self.job_online          = nil
	self.job_online_condlist = nil

	-- посещал ли сталкер хоть один smart_terrain
	self.was_in_smart_terrain = false

	self.day_begin=-1
	self.day_end=-1

	self.spawner = nil
	
	self.state = nil
end
--------------------
function se_monster:get_ini()
	if not self.ini_initialized then
		if custom_data_on_spawn then
			self.ini = create_ini_file( custom_data_on_spawn )
			custom_data_on_spawn = nil
		else
			self.ini             = self:spawn_ini ()
		end
		self.ini_initialized = true

		if self.ini ~= nil and self.ini:section_exist ("spawner") then
			if self.ini:line_exist ("spawner", "min_distance") == true then
				local min_distance = utils.cfg_get_number(self.ini, "spawner", "min_distance", self, false, 100)
				self.min_distance_sqr = min_distance * min_distance
			end
			if self.ini:line_exist ("spawner", "day_night_switch") == true then
				self.day_night_switch = utils.cfg_get_bool(self.ini, "spawner", "day_night_switch", self, false, false)
			end
			if self.ini:line_exist ("spawner", "cond") then
				self.spawner = xr_logic.parse_condlist(Actor, "spawner", "cond", self.ini:r_string("spawner", "cond"))
			end
		end
		
		self.day_begin = utils.cfg_get_number(sys_ini, self:section_name(), "DayTime_Begin", self, false, -1)
		self.day_end = utils.cfg_get_number(sys_ini, self:section_name(), "DayTime_End", self, false, -1)
	end
end
--------------------
function se_monster:force_online()
	self.job_online_condlist = nil
	self.job_online = true
end

function se_monster:get_job_online()
	if self.job_online_condlist == nil then
		return self.job_online
	else
		return xr_logic.pick_section_from_condlist(db.actor_proxy, self, self.job_online) ~= nil
	end
end
--------------------
function se_monster:can_switch_offline ()
	local gj = self:get_job_online()
	if gj ~= nil then
		return not gj
	else
		return cse_alife_monster_base.can_switch_offline (self)
	end
end
--------------------
local dev = device()
local level_object_by_id = level.object_by_id
function se_monster:can_switch_online()
	if need_be_online[self.id] ~= nil then
		local r = need_be_online[self.id]
		need_be_online[self.id] = nil
		return save_state(self, r)
	end

	local r = self:get_job_online()
	if r ~= nil then
		return save_state(self, r)
	end

	if self:clsid() == clsid.psy_dog_phantom_s then
		return save_state( self, cse_alife_monster_base.can_switch_online(self) )
	end

	-- если игрока нет, то в оффлайн
	if Actor == nil then
		return save_state(self, false) 
	end

	if off_online_kontroller and self:clsid() == clsid.controller_s then
		return save_state(self, false)
	end

	-- Если в custom_data зверушки есть cond в секции [spawner], то это условие должно иметь приоритет.
	if self.spawner ~= nil then
		local chk_spawner = (xr_logic.pick_section_from_condlist(Actor, self, self.spawner) ~= nil)
			and cse_alife_monster_base.can_switch_online(self)
		return save_state(self, chk_spawner)
	end

	local level_name = object_level_name(self)

	local day_night_switch = true
	if self.day_night_switch ~= nil then
		day_night_switch = self.day_night_switch
	else
		day_night_switch = ( (levels_types[level_name] or 1) == 0 )
	end

	--если "ночь" - остаемся в офф
	if not is_creature_day(self, day_night_switch) then
		if self.online then
			local obj = level_object_by_id(self.id)
			if ( obj ~= nil and Actor:see(obj) ) then
				return save_state(self, true)
			end
		end
		return save_state(self, false)
	end

	--если задана дистанция проверки, то проверим.
	local res = cse_alife_monster_base.can_switch_online(self)
	if res and level_name == level.name() then
		if not self.online then
			local cam_pos = dev.cam_pos
			local obj_pos = self.position
			if cam_pos:distance_to_sqr(obj_pos) < self.min_distance_sqr then
				res = dev.cam_dir:dotproduct( obj_pos:sub(cam_pos) ) < 0
			end
		end
	end
	return save_state(self, res)
end
--------------------
function se_monster:STATE_Write(packet)
	cse_alife_monster_base.STATE_Write (self, packet)

	local st = 0
	if self.state == true then
		st=4
	end

	if self.job_online == true then
		packet:w_u8(0+st)
	elseif self.job_online == false then
		packet:w_u8(1+st)
	elseif self.job_online == nil then
		packet:w_u8(2+st)
	else
		packet:w_u8(3+st)
		packet:w_stringZ(self.job_online_condlist)
	end

	packet:w_bool(self.was_in_smart_terrain)
end
--------------------
function se_monster:STATE_Read(packet, size)
	cse_alife_monster_base.STATE_Read (self, packet, size)

	local t = packet:r_u8()

	if t>=4 then
		need_be_online[self.id]=true
		t = t - 4
	end

	if t == 0 then
		self.job_online = true
	elseif t == 1 then
		self.job_online = false
	elseif t == 2 then
		self.job_online = nil
	else
		self.job_online_condlist = packet:r_stringZ()

		self.job_online = xr_logic.parse_condlist(nil, "se_monster:STATE_Read", "job_online", self.job_online_condlist)
	end

	self.was_in_smart_terrain = packet:r_bool()
end
--------------------
function se_monster:on_before_register()
	self:fill_exclusives()
end
--------------------
function se_monster:on_register()
	-- Чистим рестрикторы
	netpk:modify( self, { dynamic_in_restrictions = {} }, netpk.fState )

	cse_alife_monster_base.on_register( self )

	-- dsh: Принудительно установим мобам flInteractive
	-- Есть подозрение, что те, у кого этот флаг сброшен, а таких полно в all.spawn, не обходят аномалии.
	AI:set_interactive( self, true )
end
--------------------
function se_monster:on_unregister()
	cse_alife_monster_base.on_unregister( self )

	smart_terrain.unregister_npc(self)
end
--------------------
function se_monster:on_death(killer)
	cse_alife_monster_base.on_death(self, killer)
end
--------------------
function se_monster:fill_exclusives()
	self:get_ini()
	self.smart_terrain_conditions             = smart_terrain.read_smart_terrain_conditions( self )

	if self.smart_terrain_conditions then
		for name, condlist in pairs(self.smart_terrain_conditions) do
			smart_terrain.exclusives[name] = (smart_terrain.exclusives[name] or 0) + 1
		end
	end
end

--------------------
function is_creature_day(obj, day_night_switch)
	--проверка на дневной/ночной режим
	if day_night_switch == true then
		if obj.day_begin~=-1 and obj.day_end~=-1 then
			local hrs = level.get_time_hours()
			local de = obj.day_end
			if obj.day_begin > de then
				hrs = hrs+24
				de = de+24
			end
			if not (hrs >= obj.day_begin and hrs < de) then
				return false
			end
		end
	end
	return true
end
--------------------
function save_state(obj, state)
	if state~=obj.state then
		obj.state = state
	end
	return state
end
