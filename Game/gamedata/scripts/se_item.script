-- -*- mode: lua; encoding: windows-1251 -*-
local registred_items = {}

class "se_outfit" (cse_alife_item_custom_outfit)
function se_outfit:__init (section) super (section)
	self.current_src = 0
	self.charge = 0
end
function se_outfit:on_register()
	cse_alife_item_custom_outfit.on_register( self )
	-- Регистрация в таскменеджере
	task_manager.get_random_task():register_target(self)
	
	-- Собираем статистику по предметам.
--	table.add(registred_items, self:section_name())
end
function se_outfit:on_unregister()
	cse_alife_item_custom_outfit.on_unregister(self)
	--' Отрегистрация в таскменеджере
	task_manager.get_random_task():unregister_target(self)
end
function se_outfit:STATE_Write (packet)
	cse_alife_item_custom_outfit.STATE_Write( self, packet )

	packet:w_s32(0)
	packet:w_u8(self.current_src)
	packet:w_float(self.charge)
end
function se_outfit:STATE_Read (packet, size)
	cse_alife_item_custom_outfit.STATE_Read( self, packet, size )

	if not packet:r_eof() then
		local worked_time = packet:r_s32()
		if not packet:r_eof() then
			self.current_src = packet:r_u8()
			self.charge = packet:r_float()
		else
			if worked_time > 0 then
				self.current_src = 1
				local full_time = sys_ini:r_float_ex( self:section_name(), "working_time", 1200 ) * 60
				self.charge = (full_time - worked_time)/full_time
			end
		end
	end
end


class "se_weapon" (cse_alife_item_weapon)
function se_weapon:__init (section) super (section)
end
function se_weapon:on_register()
	cse_alife_item_weapon.on_register( self )
	-- Регистрация в таскменеджере
	task_manager.get_random_task():register_target(self)

	-- Собираем статистику по предметам.
--	table.add(registred_items, self:section_name())
end
function se_weapon:on_unregister()
	cse_alife_item_weapon.on_unregister(self)
	--' Отрегистрация в таскменеджере
	task_manager.get_random_task():unregister_target(self)
end

class "se_weapon_shotgun" (cse_alife_item_weapon_shotgun)
function se_weapon_shotgun:__init (section) super (section)
end
function se_weapon_shotgun:on_register()
	cse_alife_item_weapon_shotgun.on_register( self )
	-- Регистрация в таскменеджере
	task_manager.get_random_task():register_target(self)

	-- Собираем статистику по предметам.
--	table.add(registred_items, self:section_name())
end
function se_weapon_shotgun:on_unregister()
	cse_alife_item_weapon_shotgun.on_unregister(self)
	--' Отрегистрация в таскменеджере
	task_manager.get_random_task():unregister_target(self)
end


class "se_weapon_magazined" (cse_alife_item_weapon_magazined)
function se_weapon_magazined:__init (section) super (section)
	self.worked_time = 0
end
function se_weapon_magazined:on_register()
	cse_alife_item_weapon_magazined.on_register( self )
	-- Регистрация в таскменеджере
	task_manager.get_random_task():register_target(self)

	-- Собираем статистику по предметам.
--	table.add(registred_items, self:section_name())
end
function se_weapon_magazined:on_unregister()
	cse_alife_item_weapon_magazined.on_unregister(self)
	--' Отрегистрация в таскменеджере
	task_manager.get_random_task():unregister_target(self)
end
function se_weapon_magazined:STATE_Write (packet)
	cse_alife_item_weapon_magazined.STATE_Write( self, packet )

	packet:w_s32(self.worked_time)
end
function se_weapon_magazined:STATE_Read (packet, size)
	cse_alife_item_weapon_magazined.STATE_Read( self, packet, size )

	if not packet:r_eof() then
		self.worked_time = packet:r_s32()
	end
end

class "se_weapon_magazined_w_gl" (cse_alife_item_weapon_magazined_w_gl)
function se_weapon_magazined_w_gl:__init (section) super (section)
end
function se_weapon_magazined_w_gl:on_register()
	cse_alife_item_weapon_magazined_w_gl.on_register( self )
	-- Регистрация в таскменеджере
	task_manager.get_random_task():register_target(self)

	-- Собираем статистику по предметам.
--	table.add(registred_items, self:section_name())
end
function se_weapon_magazined_w_gl:on_unregister()
	cse_alife_item_weapon_magazined_w_gl.on_unregister(self)
	--' Отрегистрация в таскменеджере
	task_manager.get_random_task():unregister_target(self)
end

class "se_item"	(cse_alife_item)
function se_item:__init (section) super (section)
end
function se_item:on_register()
	cse_alife_item.on_register( self )
	-- Регистрация в таскменеджере
	task_manager.get_random_task():register_target(self)

	-- Собираем статистику по предметам.
--	table.add(registred_items, self:section_name())
end
function se_item:on_unregister()
	cse_alife_item.on_unregister(self)
	--' Отрегистрация в таскменеджере
	task_manager.get_random_task():unregister_target(self)
end

class "se_item_torch" (cse_alife_item_torch)
function se_item_torch:__init (section) super (section)
	self.worked_time = 0
end
function se_item_torch:on_register()
	cse_alife_item_torch.on_register( self )
	-- Регистрация в таскменеджере
	task_manager.get_random_task():register_target(self)

	-- Собираем статистику по предметам.
--	table.add(registred_items, self:section_name())
end
function se_item_torch:on_unregister()
	cse_alife_item_torch.on_unregister(self)
	--' Отрегистрация в таскменеджере
	task_manager.get_random_task():unregister_target(self)
end
function se_item_torch:STATE_Write (packet)
	cse_alife_item_torch.STATE_Write( self, packet )

	packet:w_s32(self.worked_time)
end
function se_item_torch:STATE_Read (packet, size)
	cse_alife_item_torch.STATE_Read( self, packet, size )

	if not packet:r_eof() then
		self.worked_time = packet:r_s32()
	end
end


--' Физобъекты
class "se_physic" (cse_alife_object_physic)
function se_physic:__init (section) super (section)
end
function se_physic:keep_saved_data_anyway()
	return true
end


function stats()
	printf("*** SIM ITEMS STATISTIC ***")
	for k,v in pairs(registred_items) do
		printf("item = %s, num = %s", k, v)
	end
end