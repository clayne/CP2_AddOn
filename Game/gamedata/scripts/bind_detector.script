-- -*- mode: lua; encoding: windows-1251 -*-
local get_seconds = amk.game_seconds
local upd_step = 5 * level.get_time_factor()

local bad_charge_level = 0

class "det_binder" (object_binder)

function det_binder:__init(obj)
	super(obj)

	self.time_left = 0
	self.last_time = 0
end

function det_binder:net_spawn(data)
	if not object_binder.net_spawn(self, data) then
		return false
	end

	self.full_charge_time = sys_ini:r_u32(self.object:section(), "working_time") *60
	self.condition = self.object:condition()
	self.time_left = self.full_charge_time * self.condition
	self.last_time = get_seconds()

	if self:get_charge_level() > 0 then
		self.accum_sect = sys_ini:r_string( self.object:section(), "energy_source" )
		self.object:set_weight( self.object:get_weight() + sys_ini:r_float(self.accum_sect, "inv_weight") )
	end

	return true
end

function det_binder:update(delta)
	object_binder.update(self, delta)

	-- fix
	if self.object:condition() ~= self.condition then
	--	log("detector fix")
		self.condition = self.object:condition()
		self.time_left = self.full_charge_time * self.condition
		self:save_condition()
		return
	end

	if not self:check_update() then
		self.last_time = 0
		return
	end

	if self.last_time == 0 then
		self.last_time = get_seconds()
		return
	end

	if self.condition == 0 then
		Actor:move_to_ruck(self.object)
		return
	end

	local t = get_seconds()
	local _shift = t - self.last_time
	if _shift < upd_step then return end

	self.last_time = t

	self.time_left = math.max(self.time_left - _shift, 0)

	self.condition = self.time_left/self.full_charge_time
	self.object:set_condition(self.condition)
end

function det_binder:check_update()
	return Actor:is_on_belt(self.object)
end

function det_binder:net_destroy()
	self:save_condition()

	object_binder.net_destroy(self)
end

function det_binder:save(packet)
	self:save_condition()
	object_binder.save(self, packet)
end

function det_binder:save_condition()
	local se_obj = AI:object(self.object:id())
	if se_obj then
		netpk:modify(se_obj, {condition = self.condition}, netpk.fState)
	end
end

function det_binder:get_charge_level()
	return self.condition
end

function det_binder:charge(new_charge)
	if new_charge <= bad_charge_level then
		ui_inv_add.show_inv_msg("st_bad_accum", "red")
		return false
	-- elseif math.abs(self:get_charge_level() - new_charge) < 0.02 then
		-- return false
	end

	local old_charge = self:get_charge_level()
	if old_charge > bad_charge_level then
		inventory.create_cond_item_to_actor(self.accum_sect, old_charge)
		self.object:set_weight( self.object:get_weight() - sys_ini:r_float(self.accum_sect, "inv_weight") )
	end

	self.time_left = self.full_charge_time * new_charge
	self.last_time = get_seconds()
	self.condition = new_charge
	self.object:set_condition(new_charge)
	return true
end

function det_binder:get_current_accumm()
	return self.accum_sect
end


class "det_mine_binder" (det_binder)

function det_mine_binder:check_update()
	return Actor:is_in_slot(self.object)
end

------------------------------------------------------------------------------
function init(obj)
	local sect = obj:section()
	if sect == "detector_suit" then return end

	if sect == "detector_mine" then
		obj:bind_object( det_mine_binder(obj) )
	else
		obj:bind_object( det_binder(obj) )
	end
end
