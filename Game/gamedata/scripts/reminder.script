-- -*- mode: lua; encoding: windows-1251 -*-
-- Напоминания о невыполненных заданиях на территории
local get_string = game.translate_string
local tasks_info = {}
local trader_names = {
	[story_ids.Escape_Trader] = "Сидорович", 
	[story_ids.marsh_remont] = "Василий"
}
local need_init = true
local tmr
local m_ClockWnd = nil

function remind()
	local storyline = remind_storyline()
	local random_task = task_manager.get_random_task():remind()
	local treasure = treasure_manager.get_treasure_manager():remind()
	if storyline or random_task or treasure then
		return
	end
	send_info("%c[255,127,255,255]Нет напоминаний\\n")
end

function start_remind()
	if need_init then init() end

	if game_options.HudTIme then
		if m_ClockWnd == nil then
			local cs_os_time = get_hud():AddCustomStatic("cs_os_time", true)
			m_ClockWnd = cs_os_time:wnd()
			for i, v in ipairs( {"hours", "minutes", "seconds"} ) do
				local w = CUIStatic()
				m_ClockWnd[v] = w
				w:SetAutoDelete(true)
				w:Init( "ui_clock_"..v.."_arrow", 0, 0, m_ClockWnd:GetWidth(), m_ClockWnd:GetHeight() )
				w:SetStretchTexture( m_ClockWnd:GetStretchTexture() )
				w:CanRotate(true)
				m_ClockWnd:AttachChild(w)
			end
		end
		m_ClockWnd:Show(true)
		this.update_clock()
		xr_s.subscribe( "update", this.update_clock, {timeout = 200} )
	end

	tmr = start_small_timer(1000, this.remind)
end

local last_sec = -1
function update_clock(delta)
	local tm = os.date("*t")
	if last_sec == tm.sec then return end

	local two_pi = -2*math.pi

	local sec_step = two_pi/60
	local sec_angle = sec_step*tm.sec
	m_ClockWnd.seconds:SetHeading(sec_angle)
	m_ClockWnd.minutes:SetHeading(sec_step*tm.min + sec_angle/60)
	local hour = tm.hour%12
	m_ClockWnd.hours:SetHeading(two_pi/12*hour + (two_pi/12) * (tm.min/60))
end

function on_key_release(dik, bind)
	if bind == key_bindings.kSCORES then
		remove_small_timer(tmr)
		local hud = get_hud()
		if hud:GetCustomStatic("cs_reminder") then
			hud:RemoveCustomStatic("cs_reminder")
		end
		if m_ClockWnd then
			xr_s.unsubscribe("update", this.update_clock)
			m_ClockWnd = nil
			get_hud():RemoveCustomStatic("cs_os_time")
		end
	end
end
-- сюжетные задания
function remind_storyline()
	local obj, t, npc_name
	local str = ""

	for sid, v in pairs(tasks_info) do
		obj = AI:story_object(story_ids[sid])
		if obj then
			npc_name = "%c[255,0,255,255]"..get_npc_name(obj).." > "
			for task_id, ob in pairs(v) do
				if Actor:get_task_state(task_id, ob) == task.in_progress then
					t = CGameTask()
					t:load(task_id)

					if ob > 0 or all_subtasks_done(task_id, t) then
						if ob == 0 then 
							ob = t:get_objectives_cnt()-1
						end

						str = str..npc_name.."%c[255,127,255,255]"..get_string(t:get_title())..
							": %c[default]"..get_string(t:get_objective(ob):get_description()).."\\n"
					end
				end
			end
		end
	end

	-- Выдаем напоминания
	if #str > 0 then
		send_info(str)
		return true
	end

	return false
end

-- все ли подзадания выполнены?
function all_subtasks_done(task_id, t)
	for i=1,t:get_objectives_cnt()-2 do
		if Actor:get_task_state(task_id, i) ~= task.completed then
			return false
		end
	end
	
	return true
end

-- имя квестовика
function get_npc_name(obj)
	return trader_names[obj.m_story_id]
		or naxac_netpk.get_character_name(obj)
end

-- выдача информации
function send_info(info_text)
	local hud = get_hud()
	local cs = hud:GetCustomStatic("cs_reminder")
	if cs == nil then
		cs = hud:AddCustomStatic("cs_reminder", true)
		cs:wnd():SetText(info_text)
	else
		local t = cs:wnd():GetText()
		t = t.." \\n"..info_text
		cs:wnd():SetText(t)
	end
end

function init()
	need_init = false
	tasks_info = {}
	
	local ini = ini_file("misc\\reminder.ltx")
	local result, id, sid, task_id, ob, obj
	for i=0,ini:line_count("tasks")-1 do
		result, id, sid = ini:r_line("tasks",i,"","")
		task_id, ob = string.match(id, "(.+)[_](.+)")
		if story_ids[sid] then
			obj = AI:story_object(story_ids[sid])
			if obj and (obj:clsid() == clsid.script_trader or obj:alive())
				and GGraph:vertex(obj.m_game_vertex_id):level_id() == AI:level_id()
			then
				if tasks_info[sid] == nil then
					tasks_info[sid] = {}
				end
				tasks_info[sid][task_id] = tonumber(ob)
			end
		end
	end

	xr_s.subscribe( "key_release", this.on_key_release )
end
