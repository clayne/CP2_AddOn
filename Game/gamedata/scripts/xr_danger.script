-- -*- mode: lua; encoding: windows-1251 -*-
----------------------------------------------------------------------------------------------------------------------
--'	Схема кемпер. Чудак с бальшой пушкой ходит и отстреливает живность.
--'	автор: Диденко Руслан (Stohe)
--'	TODO: 
----------------------------------------------------------------------------------------------------------------------
local def = {
	ignore_distance			= 150,
	ignore_distance_grenade	= 15,
	ignore_distance_corpse	= 10,
	ignore_distance_hit		= 150,
	ignore_distance_sound	= 50,

	danger_inertion_time_grenade	= 20000,
	danger_inertion_time_corpse		= 10000,
	danger_inertion_time_hit		= 60000,
	danger_inertion_time_sound		= 15000,
	danger_inertion_time_ricochet	= 30000
}
local sqr = {
	ignore_distance = true,
	ignore_distance_grenade = true,
	ignore_distance_corpse = true,
	ignore_distance_hit = true,
	ignore_distance_sound = true
}

local engage_after_update 	= 5 	-- С какого апдейта схема начинает работать. Нельзя чтобы схема стартовала включенной сразу же, иначе будут застранцы без вариантов
local count_update 			= {}		-- Счетчик апдейтов

local always_ignore_danger_from = { m_car = "true" }

----------------------------------------------------------------------------------------------------------------------
-- EVALUATORS
----------------------------------------------------------------------------------------------------------------------
-- true - есть danger, false - нет danger
class "evaluator_danger" (property_evaluator)
function evaluator_danger:__init(name, storage, npc) super (nil, name)
	self.a = storage

	self.is_zombied = npc:character_community() == "zombied"
end
function evaluator_danger:evaluate()
	local npc_id = self.object:id()
	if (count_update[npc_id] or 0) <= engage_after_update then
		table.add(count_update, npc_id)
		return false			
	end
	
	self.a.exist = false	-- bak  - информация для скриптов: есть актуальный дэнжер или нет

	if self.mgr == nil then
		self.mgr = self.object:motivation_action_manager()
	end

	local best_danger = self.object:best_danger()

	-- проверка на денжер.
	if best_danger == nil then
	--	printf("DANGER [%s] [FALSE] no danger", self.object:name())
		self.danger_time = nil
		return false
	end
	
	local bd_type = best_danger:type()
	local active_scheme = db.storage[npc_id].active_scheme
	local is_friend = self.object:relation(Actor) ~= game_object.enemy

	-- проверка не находится ли денжер в списке вечнозапрещенных.(БТР, Вертолеты и тд)
	local best_danger_object = best_danger:object()
	if bd_type ~= danger_object.grenade
		and best_danger:dependent_object() ~= nil
	then
		best_danger_object = best_danger:dependent_object()
	end
	
	--' Проверяем наличие объекта денжера.
	if best_danger_object == nil then
		return false
	end
	
	local best_danger_section_name = best_danger_object:section()
--	local best_danger_name = best_danger_object:name()
	
	if always_ignore_danger_from[best_danger_section_name] == "true" then
		--	printf("DANGER [%s] [FALSE] forbidded", self.object:name())
		return false
	end
	
	local is_monster_obj = IsMonster(best_danger_object)
	local is_stalker_obj = IsStalker(best_danger_object)
	
	if is_monster_obj or is_stalker_obj then
		if best_danger_object:alive() == false and bd_type ~= danger_object.entity_corpse then
			return false
		end
	else
		if bd_type == danger_object.enemy_sound then
			return false
		end		
	end
	
	-- Отсеиваем далёких монстров
	if is_monster_obj then
		if ( not self.object:see(best_danger_object) )
			and best_danger_object:position():distance_to(self.object:position()) > 40
		then
			return false
		end
	-- И неписей
	elseif is_stalker_obj and is_friend then	
		if ( not self.object:see(best_danger_object) )
			and ( not best_danger_object:see(self.object) )
			and best_danger_object:position():distance_to(self.object:position()) > 150
		then
			return false
		end		
	end

	-- три года на зоне, вся жопа в шрамах, сам себя боюсь
	if is_stalker_obj and best_danger_object:id() == npc_id then
		return false
	end	

	-- Проверка на запрещенный денжер от актера
	if best_danger_object:id() == 0 and
		( bd_type == danger_object.attack_sound
		or bd_type == danger_object.bullet_ricochet )
	then
		if self.object:best_enemy() == nil and is_friend then
		--	printf("DANGER [%s] [FALSE] actor_danger", self.object:name())
			if bd_type ~= danger_object.bullet_ricochet
				or time_global()-best_danger:time()>10000
			then return false end
		end	
	end

	-- если тип опасности = звук атаки тогда
	-- если объект опасности сталкер и он нам не враг или соратник
	-- и у него нету лучшей опасности либо лучшего врага
	-- тогда пропускаем
	-- а если есть лучшая опасность
	-- если эта лучшая опасность он сам то пропускаем
	-- если эта лучшая опасность это мы то пропускаем, ибо закольцовка

	if bd_type == danger_object.attack_sound or bd_type == danger_object.enemy_sound then
		if is_stalker_obj and is_friend
		and (best_danger_object:character_community() == self.object:character_community() 
		or ((self.object:relation(best_danger_object) ~= game_object.enemy) and (best_danger_object:relation(self.object) ~= game_object.enemy))) then
			if (not best_danger_object:best_enemy()) and not best_danger_object:best_danger() then
				return false
			elseif best_danger_object:best_danger() then 		
				local bdo_bd = best_danger_object:best_danger() -- ужас друга
				local best_danger_object_test = bdo_bd:object() -- предмет ужаса друга
				if best_danger_object_test and best_danger_object_test:id() == best_danger_object:id() then
					-- сам себя боится, идиот. Игнорируем.
					return false
				elseif best_danger_object_test and best_danger_object_test:id() == self.object:id() then
					-- нас боится, при этом дружелюбен, идиот. Игнорируем.
					return false
				elseif best_danger_object_test and (IsStalker(best_danger_object_test) or IsMonster(best_danger_object_test)) and not best_danger_object_test:alive() then	
					-- боится атаки трупа. Игнорируем.
					return false
				end				
			end
		end	
	end	

	--' Игнорим денжеры от своих.
	if is_stalker_obj and is_friend
		and best_danger_object:character_community() == self.object:character_community()
	then
		if self.object:relation(best_danger_object) ~= game_object.enemy then
			return false
		end
	end

	-- Проверка, не находится ли данжер в списке запрещенных.
	if bd_type == danger_object.grenade then
		if self.a.ignore_types["grenade"] == true
			or self.is_zombied
		then
		--	printf("DANGER [%s] [FALSE] ignore grenade", self.object:name())
			return false		
		end
	elseif bd_type == danger_object.entity_corpse then
		if self.a.ignore_types["corpse"] == true then
		--	printf("DANGER [%s] [FALSE] ignore corpse", self.object:name())
			return false
		end
	elseif bd_type == danger_object.entity_attacked or
		   bd_type == danger_object.attacked then
		if self.a.ignore_types["hit"] == true then
		--	printf("DANGER [%s] [FALSE] ignore hit", self.object:name())
			return false
		end	
	elseif bd_type == danger_object.enemy_sound or
	       bd_type == danger_object.attack_sound or
	       bd_type == danger_object.entity_death then
		if self.a.ignore_types["sound"] == true then
		--	printf("DANGER [%s] [FALSE] ignore sound", self.object:name())
			return false
		end	
	end

	-- отсеиваем по настройке combat_ignore/danger
	local bd_obj = best_danger:object()
	if bd_obj and (IsMonster(bd_obj) or IsStalker(bd_obj)) and bd_obj:alive() then
		db.storage[npc_id].enemy = bd_obj
	end
	if db.storage[npc_id].enemy ~= nil then
	    local overrides = xr_logic.generic_scheme_overrides(self.object)
	    if overrides and
			overrides.combat_ignore and
			active_scheme ~= nil and
			xr_logic.pick_section_from_condlist(Actor, self.object, overrides.combat_ignore.condlist ) ~= nil
	    then
		--    printf("DANGER [%s]->[%s] [FALSE] ignore_danger", self.object:name(), best_danger_name)
		    return false
	    end
    end	 

    -- Отсеиваем дружественные туррели.
	if bd_type == danger_object.attack_sound and
	   self.object:best_enemy() == nil and
	   turret_mgun.is_friendly_turret(self.object, best_danger_object, best_danger:position()) then
	--	printf("DANGER [%s] [FALSE] friendly turret", self.object:name())
		return false
	end	

	-- Отсеиваем по дистанции
	if check_danger_distance(self.object, best_danger) == false then
	--	log("DANGER [%s]->[%s] [FALSE] danger_distance", self.object:name(), best_danger_object:name())
		return false
	end

	-- Отсеиваем по зоне
	if sr_danger.check_danger_position(best_danger:position()) then
	--	printf("DANGER [%s]->[%s] [FALSE] nodanger_zone", self.object:name(), best_danger_name)
		return false
	end

	-- Отсеиваем по информационным рестрикторам
	if xr_gulag.is_info_restricted(npc_id, best_danger:position()) then
	--	printf("DANGER [%s]->[%s] [FALSE] info restrictor", self.object:name(), best_danger_name)
		return false
	end

	-- Отсеиваем тяжелораненых
	if xr_wounded.is_heavy_wounded_by_id(npc_id) then
	--	printf("DANGER [%s]->[%s] [FALSE] heavy_wounded", self.object:name(), best_danger_name)
		return false
	end

	-- Отсеиваем психораненых
	if xr_wounded.is_psy_wounded_by_id(npc_id) then
	--	printf("DANGER [%s]->[%s] [FALSE] psy_wounded", self.object:name(), best_danger_name)
		return false
	end


	-- Денжер для снайпера
	if active_scheme == "camper" then
		if bd_type == danger_object.grenade
			or ( (is_monster_obj or is_stalker_obj)
		--	and bd_type == danger_object.enemy_sound
			and best_danger_object:alive()
			and best_danger_object:see(self.object) )
		then
			self.danger_time = best_danger:time()
			self.a.exist = true
			return true
		end
		return false
	else
		-- инерция возврата. Только не для кемпера.
		if self.danger_time then
			-- self.danger_time = best_danger:time() <-- Дико непонятно нахуя тут вот это было. Убрал пока позырить
			local passed_time = time_global() - self.danger_time
			if check_danger_inertion_time(self.object, best_danger, passed_time) then
				self.a.exist = true
				return true
			end
		end
		self.danger_time = best_danger:time()
	end

--	printf("DANGER [%s]->[%s] [FALSE] default", self.object:name(), best_danger_name)
	return false
end


----------------------------------------------------------------------------------------------------------------------
-- BINDER
----------------------------------------------------------------------------------------------------------------------
function add_to_binder(object, ini, scheme, section, storage)
  	--	local operators	= {}
	-- 	local properties  = {}
		
	   	local manager = object:motivation_action_manager()

--		if true then return end
		manager:remove_evaluator(stalker_ids.property_danger)
		manager:add_evaluator(stalker_ids.property_danger, this.evaluator_danger("danger", storage, object))
end
function set_danger(npc, ini, scheme, section)
	local st = xr_logic.assign_storage_and_bind(npc, ini, scheme, section)
end

function reset_danger(npc, scheme, st, section)
	if not npc:alive() then return end

	-- log("- reset_danger for %s", npc:name())
	local danger_section
	if scheme ~= nil and scheme ~= "nil" then
		danger_section = utils.cfg_get_string(st.ini, section, "danger", npc, false, "")
	end
	count_update[npc:id()] = 0
--	printf("DANGER SECTION [%s]", utils.to_str(danger_section))
	local danger = st.danger
	danger.ignore_types = {}

	if danger_section and st.ini:section_exist(danger_section) then
		-- log("read from section [%s]", danger_section)
		if st.ini:line_exist(danger_section, "ignore_types") then
			local t = parse_names( st.ini:r_string(danger_section, "ignore_types") )
			for k,v in pairs(t) do
				danger.ignore_types[v] = true
			end
		end

		for k, v in pairs(def) do
			danger[k] = st.ini:r_float_ex(danger_section, k, v)
			if sqr[k] then
				danger[k] = math.pow(danger[k], 2)
			end
		end
	else
		-- log("set default")
		for k, v in pairs(def) do
			if sqr[k] then
				danger[k] = math.pow(v, 2)
			else
				danger[k] = v
			end
		end
	end

	-- log("successfully")
	-- table.print(danger)
end


function check_danger_inertion_time(npc, danger, passed_time)
	local danger_settings = db.storage[npc:id()].danger
	local bd_type = danger:type()
	
	if danger_settings ~= nil then
		if bd_type == danger_object.grenade then
			if danger_settings.danger_inertion_time_grenade <= passed_time then
				return false
			end
		elseif bd_type == danger_object.entity_corpse then
			if danger_settings.danger_inertion_time_corpse <= passed_time then
				return false
			end
		elseif bd_type == danger_object.entity_attacked or
			bd_type == danger_object.attacked then
			if danger_settings.danger_inertion_time_hit <= passed_time then
				return false
			end	
		elseif bd_type == danger_object.enemy_sound or
			bd_type == danger_object.attack_sound or
	        bd_type == danger_object.entity_death then
			if danger_settings.danger_inertion_time_sound <= passed_time then
				return false
			end	
		elseif bd_type == danger_object.bullet_ricochet then
			if danger_settings.danger_inertion_time_ricochet <= passed_time then
				return false
			end	
		end
	else
		if bd_type == danger_object.grenade then
			if def.danger_inertion_time_grenade <= passed_time then
				return false
			end
		elseif bd_type == danger_object.entity_corpse then
			if def.danger_inertion_time_corpse <= passed_time then
				return false
			end
		elseif bd_type == danger_object.entity_attacked or
			bd_type == danger_object.attacked then
			if def.danger_inertion_time_hit <= passed_time then
				return false
			end	
		elseif bd_type == danger_object.enemy_sound or
			bd_type == danger_object.attack_sound or
	        bd_type == danger_object.entity_death then
			if def.danger_inertion_time_sound <= passed_time then
				return false
			end	
		elseif bd_type == danger_object.bullet_ricochet then
			if def.danger_inertion_time_ricochet <= passed_time then
				return false
			end	
		end
	end
	return true
end

function check_danger_distance(npc, danger)
	local danger_settings = db.storage[npc:id()].danger
	local bd_type = danger:type()
	local danger_distance_sqr = danger:position():distance_to_sqr(npc:position())	
	
--	log("DANGER_DIST [%s] [%s]", npc:name(), tostring(danger_distance_sqr))

	if danger_settings ~= nil then
		if danger_distance_sqr >= danger_settings.ignore_distance then
			return false
		end
		if bd_type == danger_object.grenade then
			if danger_distance_sqr >= danger_settings.ignore_distance_grenade then
				return false
			end
		elseif bd_type == danger_object.entity_corpse then
			if danger_distance_sqr >= danger_settings.ignore_distance_corpse then
				return false
			end
		elseif bd_type == danger_object.entity_attacked or
			   bd_type == danger_object.attacked then
			if danger_distance_sqr >= danger_settings.ignore_distance_hit then
				return false
			end
		elseif bd_type == danger_object.enemy_sound or
			   bd_type == danger_object.attack_sound or
			   bd_type == danger_object.entity_death then
			if danger_distance_sqr >= danger_settings.ignore_distance_sound then
				return false
			end
		end		   	   
	else
		if danger_distance_sqr >= def.ignore_distance then
			return false
		end
		if bd_type == danger_object.grenade then
			if danger_distance_sqr >= def.ignore_distance_grenade then
				return false
			end
		elseif bd_type == danger_object.entity_corpse then
			if danger_distance_sqr >= def.ignore_distance_corpse then
				return false
			end
		elseif bd_type == danger_object.entity_attacked or
			   bd_type == danger_object.attacked then
			if danger_distance_sqr >= def.ignore_distance_hit then
				return false
			end
		elseif bd_type == danger_object.enemy_sound or
			   bd_type == danger_object.attack_sound or
			   bd_type == danger_object.entity_death then
			if danger_distance_sqr >= def.ignore_distance_sound then
				return false
			end
		end	
	end
	return true
end