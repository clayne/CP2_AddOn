-- -*- mode: lua; encoding: windows-1251 -*-
function bind(obj)
--	printf("turret_mgun.bind")
	local ini = obj:spawn_ini()
	if ini == nil or not ini:section_exist("logic") then
		abort("turret '%s' must have logic", obj:name())
	end
	obj:bind_object(turret_binder(obj, ini))
end

class "turret_binder" (object_binder)

function turret_binder:__init(obj, ini) super(obj)
	self.ini = ini
	self.initialized = false
	self.loaded = false
end

function turret_binder:reinit()
	object_binder.reinit(self)
	db.storage[self.object:id()] = {}
	self.st = db.storage[self.object:id()]
	self.heli = self.object:get_helicopter()
	self.object:set_callback(callback.helicopter_on_hit, self.on_hit, self)
end

function turret_binder:update(delta)
	object_binder.update(self, delta)
	if not self.initialized and Actor ~= nil then
		xr_logic.initialize_obj(self.object, self.st, self.loaded, Actor, modules.stype_heli)
		self.initialized = true
	end
	if self.st.active_section ~= nil then
		xr_logic.issue_event(self.object, self.st[self.st.active_scheme], "update", delta)
	end
	self:check_health()
end

function turret_binder:net_spawn(data)
	if not object_binder.net_spawn(self, data) then
		return false
	end
	self.se_obj = AI:object(self.object:id())
	self.heli:SetfHealth(self.se_obj.health)
	self.st.alive = self.se_obj.health > 0.005
	db.add_turret(self.object)
	return true
end

function turret_binder:net_destroy()
	db.del_turret(self.object)
	object_binder.net_destroy(self)
end

function turret_binder:net_save_relevant()
	return true
end

function turret_binder:save(packet)
	object_binder.save(self, packet)
	xr_logic.save_obj(self.object, packet)
end

function turret_binder:load(packet)
	object_binder.load(self, packet)
	xr_logic.load_obj(self.object, packet)
end

function turret_binder:on_hit(power, impulse, hit_type, enemy_id)
--	dbglog("hit: power=%f impulse=%f hit_type=%d enemy_id=%d health=%f",
--			power, impulse, hit_type, enemy_id, self.heli:GetfHealth())
	self.se_obj.health = self.heli:GetfHealth()
	local enemy = level.object_by_id(enemy_id)
	if enemy ~= nil and self.st.active_section ~= nil then
		xr_logic.issue_event(self.object, self.st[self.st.active_scheme],
				"hit_callback", self.object, power, nil, enemy, nil)
	end
end

function turret_binder:check_health()
	if self.st.alive and self.heli:GetfHealth() <= 0.005 then
		explode_turret(self.object)
		self.st.release_time = time_global() + 4000
	end
	if (not self.st.alive)
		and (not self.heli:isVisible(Actor))
		and (self.st.release_time or 0) < time_global()
	then
		 AI:release(self.se_obj, true)
	end
end

function explode_turret(turret)
	local heli = turret:get_helicopter()
	heli:ClearEnemy()
	heli:Die()
	local se_obj = AI:object(turret:id())
	se_obj.health = 0
	db.storage[turret:id()].alive = false
	xr_statistic.addKillCount(turret)
--	utils2.deferred_release(turret:id(), 5)
end


function is_friendly_turret(npc, turret, position)
    -- сначала выясним, турель ли это вообще.
    local k,v
    if turret == nil then
        -- ссылки на объект нет. что ж, бывает, попробуем
        -- определить по месту расположения.
        for k,v in pairs(db.turret) do
            local test_position = v:position()
            if test_position.x == position.x and
               test_position.z == position.z then
                turret = v
                break
            end
        end
        if turret == nil then
            return false
        end
    elseif (turret:section() ~= "turret_mgun") and (turret:section() ~= "turret_army") and (turret:section() ~= "turret_nato") then
        return false
    end
    local community = db.storage[turret:id()].community
    if community == nil then
        return false
    end
    if utils2.community_relation(community, npc) > -400 then
        return true
    end
    return false
end

function create_turret(turret_section_name, level_name, position, community, owner_gulag, search_dist, hunt_actor_prob, explode_dist, spawner)
	local level_vertex_id, game_vertex_id = utils2.get_top_graph_ids(level_name)
	local se_obj = AI:create(turret_section_name, position, level_vertex_id, game_vertex_id)
	if se_obj == nil then
		abort("can't create '%s' at (%f,%f,%f)", turret_section_name, position.x, position.y, position.z)
	end

	local cd = {}
	cd.logic = {
		active = "turret"
	}
	cd.turret = {
		community = community,
		owner_gulag = owner_gulag,
		hunt_actor_prob = hunt_actor_prob or 50,
		search_dist = search_dist or 90,
		explode_dist = explode_dist or 1
	}
	if spawner ~= nil then
		cd.spawner = { cond = spawner }
	end

	local data = {}
	data.custom_data = netpk:gen_custom_data(cd)
	data.startup_animation = 'idle'
	data.engine_sound = '$no_sound'
	netpk:modify(se_obj, data)
end

-----------------------------------------------------------------------

class "se_turret_mgun" (cse_alife_helicopter)

function se_turret_mgun:__init(section) super(section)
	self.spawner = nil
	self.health = 1.0
	self.direction = vector():set(0, 0, 0)
	self.ammo_elapsed = 0
end

function se_turret_mgun:can_switch_offline()
	return cse_alife_helicopter.can_switch_offline(self)
end

function se_turret_mgun:can_switch_online()
	if self.health <= 0.005 then
		return false
	end

	if self.spawner == nil then
		local ini = self:spawn_ini()
		if ini:section_exist("spawner") and ini:line_exist("spawner", "cond") then
			self.spawner = xr_logic.parse_condlist(Actor, "spawner", "cond", ini:r_string("spawner", "cond"))
		else
			self.spawner = false
		end
	end

	if (not self.spawner)
		or (xr_logic.pick_section_from_condlist(Actor, self, self.spawner) ~= nil)
	then
		return cse_alife_helicopter.can_switch_online(self)
	else
		return false
	end
end    

function se_turret_mgun:STATE_Read(packet, size)
	cse_alife_helicopter.STATE_Read(self, packet, size)

	self.health = packet:r_float()
	self.direction = packet:r_vec3()
	self.ammo_elapsed = packet:r_u16()
end

function se_turret_mgun:STATE_Write(packet)
	cse_alife_helicopter.STATE_Write(self, packet)

	packet:w_float(self.health)
	packet:w_vec3(self.direction)
	packet:w_u16(self.ammo_elapsed)
end
