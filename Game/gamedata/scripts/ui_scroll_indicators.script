-- -*- mode: lua; encoding: windows-1251 -*-

local icons_scroll = nil
local right_ident = 2
local vert_interval = 0
local vert_interval2 = 10

class "UIScrollIndicators"

function UIScrollIndicators:__init()
	self.scroll_items = {}
	self.tIndicatorThresholds = {}
	self.current_thresholds = {}

	self.restore_indicators = {}

	self.xml = CScriptXmlInit()
	self.xml:ParseFile("maingame.xml")

	self.scroll = get_hud():AddCustomStatic("icons_scroll", true):wnd()

	local st = self.xml:InitStatic("icons_scroll_view", nil)
	local posX, posY = st:GetHPos(), st:GetVPos() + st:GetHeight()
	self.scroll:SetWndPos( posX, posY )

	self.scroll2 = self.xml:InitStatic("indicators_scroll_view", self.scroll)
	self.scroll2_pos0 = vector2():set(512-posX, self.scroll2:GetVPos()-posY)
	self.scroll2:SetWndPos( self.scroll2_pos0.x, self.scroll2_pos0.y )
end

function UIScrollIndicators:get_indicator(name)
	for i, v in ipairs(self.scroll_items) do
		if v.name == name then
			return v
		end
	end

	local y = vert_interval
	for i, v in ipairs(self.scroll_items) do
		y = y + v:GetHeight() + vert_interval
	end
	local st = self.xml:InitStatic(name.."_static", self.scroll)
	table.insert(self.scroll_items, st)
	st.name = name
	st:SetWndPos(right_ident, y)
	return st
end

function UIScrollIndicators:remove_indicator(name)
	local n = math.huge
	local y = vert_interval
	for i, v in ipairs(self.scroll_items) do
		if n > i then
			if v.name == name then
				n = i
				self.scroll:DetachChild(v)
			else
				y = y + v:GetHeight() + vert_interval
			end
		else
			v:SetWndPos(right_ident, y)
			y = y + v:GetHeight() + vert_interval
		end
	end
	if self.scroll_items[n] then
		table.remove(self.scroll_items, n)
	end
end

function UIScrollIndicators:init_indicator(name, ini_line)
	local t = {}
	local tmp = sys_ini:r_list("main_ingame_indicators_thresholds", ini_line)
	for i, v in ipairs(tmp) do
		t[i] = tonumber(v)
	end
	self.tIndicatorThresholds[name] = t
	return t
end
function UIScrollIndicators:update_indicator(name, iniline, value)
	local thresholds = self.tIndicatorThresholds[name]
	if not thresholds then
		thresholds = self:init_indicator(name, iniline)
	end

	local n = #thresholds
	for i, v in ipairs(thresholds) do
		if value < v then
			n = i-1
			break
		end
	end

	if self.current_thresholds[name] == n then return end
--	log("UIScrollIndicators:update_indicator %s(%s): threshold = %s", name, value, n)
	self.current_thresholds[name] = n

	if n == 0 then
		self:remove_indicator(name)
		return
	end

	local st = self:get_indicator(name)
	local k = (n - 1) / (#thresholds - 1)
	local clr = GetARGB(
		255,
		math.min( k*510, 255 ),
		math.min( (1-k)*510, 255 ),
		0
	)
	st:SetColor(clr)
end

function UIScrollIndicators:add_restore_indicator(name, bclr)
	local st
	for i, v in ipairs(self.restore_indicators) do
		if v.name == name then
			st = v
			break
		end
	end

	if not st then
		local x = 0
		for i, v in ipairs(self.restore_indicators) do
			x = x + v:GetWidth() + vert_interval2
		end
		st = self.xml:InitStatic(name.."_restore_static", self.scroll2)
		table.insert(self.restore_indicators, st)
		st.name = name
		st:SetWndPos(x, 0)
		x = x + st:GetWidth() + vert_interval2
		self.scroll2:SetWndPos(self.scroll2_pos0.x-x/2, self.scroll2_pos0.y)
	end

	local clr = GetARGB(
		200,
		(bclr and 160 or 255),
		(bclr and 255 or 160),
		160
	)
	st:SetColor(clr)
end
function UIScrollIndicators:remove_restore_indicator(name)
	if #self.restore_indicators == 0 then return end

	local n = math.huge
	local x = 0
	for i, v in ipairs(self.restore_indicators) do
		if n > i then
			if v.name == name then
				n = i
				self.scroll2:DetachChild(v)
			else
				x = x + v:GetWidth() + vert_interval2
			end
		else
			v:SetWndPos(x, 0)
			x = x + v:GetWidth() + vert_interval2
		end
	end
	if self.restore_indicators[n] then
		table.remove(self.restore_indicators, n)
		x = x - vert_interval2
		self.scroll2:SetWndPos(self.scroll2_pos0.x-x/2, self.scroll2_pos0.y)
	end
end

function UIScrollIndicators:destroy_indicators()
	if #self.scroll_items > 0 then
		for i = 1, #self.scroll_items do
			self.scroll_items[i] = nil
		end
	end
	if #self.restore_indicators > 0 then
		for i = 1, #self.restore_indicators do
			self.restore_indicators[i] = nil
		end
	end
	self.xml = nil
	self.scroll = nil
	self.scroll2 = nil
	self.scroll2_pos0 = nil
	get_hud():RemoveCustomStatic("icons_scroll")
end


function destroy_indicators()
	if icons_scroll == nil then return end
	icons_scroll:destroy_indicators()
	icons_scroll = nil
end

function set_vert_interval(val)
	vert_interval = val
end

---------------------------------------------------------------------------
local first_run_queue = {}
local can_update = false

function get_scroll()
	if icons_scroll == nil then
		icons_scroll = UIScrollIndicators()
		xr_s.subscribe( "net_destroy", this.destroy_indicators )
	end
	return icons_scroll
end

function update_indicator(name, ini_line, value)
	if can_update then
		get_scroll():update_indicator(name, ini_line, value)
	else
		first_run_queue[name] = { ini_line, value }
	end
end

function add_restore_indicator(name, bclr)
	if can_update then
		get_scroll():add_restore_indicator(name, bclr)
	else
		first_run_queue[name] = bclr
	end
end
function remove_restore_indicator(name)
	if can_update then
		get_scroll():remove_restore_indicator(name)
	else
		first_run_queue[name] = nil
	end
end

function first_update()
	can_update = true
	local scroll = get_scroll()
	for k, v in pairs(first_run_queue) do
		if type(v) == "boolean" then
			scroll:add_restore_indicator(k, v)
		else
			scroll:update_indicator( k, v[1], v[2] )
		end
	end
	first_run_queue = {}
end
