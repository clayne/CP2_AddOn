-- -*- mode: lua; encoding: windows-1251 -*-
--[[

File:  gps_habar.script
Copyright by Idler (and AMK TEAM 2007-2008 местами :)
rev: 10/11/08.02
]]
local table_remove = table.remove
local table_sort = table.sort
local string_find = string.find
local string_gsub = string.gsub

local is_gps_debug = false -- для включения локальной отладочной информации
local max_comments_strings_on_screen = 35 -- сколько строк комментариев максимально влезает в экран на ПДА

local labels = {} -- в таблице ссылки на тайники помеченные маячками, а также реквизиты маячка (время до заряда  и т.д.). содержит всегда актуальные значения
local items_in_box = {}

local fake_box = {}

--  переменные из конфига  misc\gps_habar.ltx
local activity_time = 0
local warning_time = 0
local warning_icons_time = 0
local habar_list_mode = true
local auto_recharge = true
local is_show_quantity = true
local is_update_on_time = true
local is_set_label_on_npc = true
local is_show_health = false
local is_warning_on_death = false
local is_color_and_sort_list = true

local is_gps_update_in_process = false -- для устранения коллизий при "on_actor_update"

function toboolean(_str)
	if string_find(string.lower(_str), "true") or _str == "1" then
		return true
	end
	
	return false
end

function objinfo(obj)
	local text = ""
	
	if is_gps_debug and obj then
		if IsGameObject(obj) then
			text = "G-OBJ:"
			if obj.id then
				text = text .. "[" .. tostring(obj:id()) .. "] "
			end
			if obj.section then
				text = text .. ", s_name=" .. tostring(obj:section())
			end
			if obj.character_name then
				text = text .. ", c_name=" .. tostring(obj:character_name())
			end
			if obj.health then
				text = text .. ", health=" .. tostring(obj.health)
			end
		else
			text = "A-OBJ:"
			if obj.id then
				text = text .. "[" .. tostring(obj.id) .. "] "
			end
			if obj.section_name then
				text = text .. ", s_name=" .. tostring(obj:section_name())
			end
			if obj.character_name then
				text = text .. ", c_name=" .. tostring(obj:character_name())
			end
			if obj.parent_id then
				text = text .. ", p_id=" .. tostring(obj.parent_id)
			end
			if obj.health then
				text = text .. ", health=" .. tostring(obj:health())
			end
		end
	end
	
	return text
end

function tableinfo(tbl)
	if is_gps_debug and tbl then
		return amk.pack_array_to_string(tbl)
	end
	
	return ""
end


function mylog(msg)
	if is_gps_debug and msg and get_console() then
		get_console():execute("load ~~~ "..string.sub(tostring(msg),1,200))
--		get_console():execute("flush")
	end
end

function IsGameObject(obj)
	local bResult = false
	if (obj and obj.fov) then
		bResult = true
	end
	return bResult
end

-- получим Id тайника если знаем предмет в нем лежащий
function get_inventory_box_id(obj)
	if not obj then
		return
	end
	local aobj = AI:object(obj:id())
	if aobj and aobj.parent_id then
		return aobj.parent_id
	end
end

function get_health(npc)
	if npc then
		if IsGameObject(npc) then
			-- mylog("GET_HEALTH: " .. objinfo(npc))
			return npc.health
		elseif npc.health then
			-- mylog("GET_HEALTH: " .. objinfo(npc))
			return npc:health()
		end
	end
	
	return nil
end

function get_health_str(npc)
	if get_health(npc) <= 0 then
		return "погиб"
	end
	
	return "жив"
end

-- ищем существует-ли item в тайнике box
function is_find_item(boxId, itemId)
	if boxId and itemId and items_in_box and items_in_box[boxId] then
		for i, v in ipairs(items_in_box[boxId]) do
			if v.id == itemId then
				return true
			end
		end
	end
	
	return false
end

-- что-то положили в тайник. Проверим, если к нам имеет отношение, добавим к списку. 
function insert_item(boxId, item)
	if boxId and boxId ~= 0 and boxId ~= 65535 and item then
		if not is_find_item(boxId, item.id) then 
			if not items_in_box[boxId] then items_in_box[boxId] = {} end
			table.insert(items_in_box[boxId], {id = item.id, name=item:name()})
			-- mylog("INSERT_ITEM: добавили в items_in_box[" .. boxId .. "] предмет:" .. objinfo(item))
		end
	end
end

-- что-то забрали из тайника, почистим нашу таблицу с хабаром
function remove_item(boxId, item, is_need_msg_warning)
	local is_msg_warning = false

	if is_need_msg_warning == nil then
		is_need_msg_warning = true
	end
	
	if boxId and item then
		local itemId = item.id
		if boxId and itemId and items_in_box[boxId] then
			if labels[boxId] then
				is_msg_warning = true
			end

			local v
			local tmp = items_in_box[boxId]
			for i = #tmp, 1, -1 do
				v = tmp[i]
				if v.id == itemId then
					-- mylog("REMOVE_ITEM: удалили из items_in_box[" .. boxId .. "] предмет: " .. objinfo(item))
					table_remove(tmp, i)
					break
				end
			end
		end
	end

	-- если было ограбление и нет мода Заминированные тайники, предупреждаем ГГ
	if is_need_msg_warning and is_msg_warning then
		local seBox = AI:object(boxId)
		if seBox and not IsHuman[seBox:clsid()] then
			local lvname = news_data.level_name[ object_level_name(seBox) ][2]
			amk.send_tip("%c[red_sms]" .. lvname .. " ограбили тайник.", "GPS", nil, 20, "nano")
		end
		update_gps(nil, nil, boxId)
	end
end

-- считаем кол-во маячков в тайнике
function get_gps_count(boxId)
	if not boxId then
		return 0
	end
	if boxId == 0 or boxId == 65535 then 
		return 0 
	end

	local locObj
	local gps_count = 0
	
	if items_in_box[boxId] then
		for i, v in ipairs(items_in_box[boxId]) do
			locObj = AI:object(v.id)
			if locObj and locObj:section_name() == "amk_metka" then
				gps_count = gps_count + 1
			end
		end
	end
	
	-- mylog("GET_GPS_COUNT: в тайнике[" .. boxId .. "] нашли маячков: " .. tostring(gps_count))
	return gps_count
end

-- соствялем таблицу вещей в тайниках. не используется.
function load_items()
	local aobj
	for i = 1, 65534 do 
		aobj =  AI:object(i)
		if aobj and aobj.parent_id and aobj.parent_id ~= 0 and aobj.parent_id ~=65535 then
			if not items_in_box[aobj.parent_id] then items_in_box[aobj.parent_id] = {} end
			table.insert(items_in_box[aobj.parent_id], {id = aobj.id, name=aobj:name()})
			-- mylog("добавили в items_in_box[" .. aobj.parent_id .. "] предмет Id:" .. aobj.id)
		end
	end
end

function get_local_time(gtime)
	gdays = math.floor(gtime / 24);
	ghours = gtime - gdays * 24;
	
	local res = ""
	if gdays > 0 then
		res = tostring(gdays) .. "дн "
	end
	if ghours > 0 then
		res = res .. tostring(ghours) .. "ч"
	end
	if res == "" then
		res = "менее часа"
	end
	
	return trim(res)
end

function get_npc_name(box)
	if box then
		if news_main then
			return tostring(news_main.get_npc_name(box))
		elseif m_amk_news then
			return tostring(m_amk_news.get_npc_name(box))
		end
	end
	
	return "'Неизвестный'"
end

function get_npc_presentation(box)
	if box then
		if news_main then
			return tostring(news_main.get_npc_name(box) .. " (" .. game.translate_string(news_main.get_npc_community(box)) .. ", " .. game.translate_string(news_main.get_npc_rank(box)))
		elseif m_amk_news then
			return tostring(m_amk_news.get_npc_name(box) .. " (" .. game.translate_string(m_amk_news.get_npc_community(box)) .. ", " .. game.translate_string(m_amk_news.get_npc_rank(box)))
		end
	end
	
	return get_npc_name(box)
end

-- снимаем метки относящиеся к списку хабара с ящика
function remove_all_spots(boxId)
	if boxId then
		amk.remove_spot_from_map(boxId, "habar_location")
		amk.remove_spot_from_map(boxId, "habar_clear_location")
		amk.remove_spot_from_map(boxId, "habar_location_w")
		amk.remove_spot_from_map(boxId, "habar_clear_location_w")
		amk.remove_spot_from_map(boxId, "gps_stalker")
	end
end

-- удаляем ящик из таблицы тайников с метками
function remove_label(boxId)
	if boxId then
		labels[boxId] = nil 			-- фикс зависа при сейве 
		--table_remove(labels, boxId)	-- фикс зависа при сейве
		-- mylog("REMOVE_LABEL: удалили метку с тайника [" .. boxId .. "]. Осталось:" .. tableinfo(labels))
	end
end

-- почистим тайник от удаленных вещей.
function reinit_box(boxId)
	if not boxId or boxId == 0 or boxId == 65535 or not items_in_box then
		return
	end
	
	local t = items_in_box[boxId]
	if t then
		local aobj, v
		for i = #t, 1, -1 do
			v = t[i]
			if v.id then
				aobj = AI:object(v.id)
				if (not aobj) or aobj.parent_id ~= boxId then
					table_remove(t, i)
				end
			end
		end
	end
end

-- перезарядка маячка
function recharge_gps(item, box)
	if not auto_recharge then
		return
	end
	
	if not box then return end
	
	-- если неизвестен тайник, получим его из предмета
	local boxId = nil
	if box then
		boxId = box:id()
	else
		boxId = get_inventory_box_id(item)
	end
	
	-- если предмет не в тайник и не из тайника - не наш случай
	if not boxId then
		return
	end
	if boxId == 0 or boxId == 65535 then 
		return 
	end
	
	-- если метки нет на тайнике,  перезаряжать нечего
	if not labels[boxId] then
		return
	end

	local t = labels[boxId]
	-- перезаряка новыми значениями
	t.at = activity_time
	t.wr = 0 -- не предупреждали о разряде сообщением
	t.wi = 0 -- не предупреждали о разряде цветом
	t.wt = warning_time
	t.wit = warning_icons_time
	t.gt = game_time_hours
	t.upd = game_time_minutes
	t.wh = 0 -- не предупреждали о гибели npc
	
	amk.save_table("gps_labels", labels)
	-- mylog("RECHARGE_GPS: перезарядили маячок в тайнике [" .. tostring(boxId) .. "]")
end

-- Обновляем список хабара, зная или предмет или ящик
function update_gps(item, box, boxId, is_new_metka)

	is_gps_update_in_process = true

	-- если неизвестен тайник, получим его из предмета
	if not boxId then
		if box then
			boxId = box:id()
		else
			boxId = get_inventory_box_id(item)
		end
	end

	if boxId then
		box = AI:object(boxId)
	end
	
	-- если предмет не в тайник и не из тайника - не наш случай
	if not boxId then
		is_gps_update_in_process = false
		return
	end

	if not box then
		-- непись мог погибнуть, ну или тайник могли уничтожить (наверное)
		local aobj = AI:object(boxId)
		if not aobj then
			remove_label(boxId)
		end
		
		is_gps_update_in_process = false
		return
	end
	
	if boxId == 0 or boxId == 65535 then 
		is_gps_update_in_process = false
		return
	end

	if IsHuman[box:clsid()] then
		-- mylog("UPDATE_GPS: начато обновление метки сталкера " .. objinfo(box))
		update_gps_stalker(box, boxId, is_new_metka)
	else
		-- mylog("UPDATE_GPS: начато обновление метки хабара " .. objinfo(box))
		update_gps_habar(boxId)
	end
	
	is_gps_update_in_process = false
end

function update_gps_stalker(box, boxId, is_new_metka)
	local gps_count = get_gps_count(boxId)
	local is_save_table = false
	
	if gps_count > 0 then
		local fl_send_tip_msg = false
		local text_metki = ""
		local gm = game_time_minutes
		local gh = game_time_hours
		
		-- новая метка, добавляем в таблицу
		if not labels[boxId] then
			-- нет команды помечать сталкера
			if is_new_metka ~= true then
				return
			end
			
			fl_send_tip_msg = true -- надо сообщить что ставим новую метку
			labels[boxId] = {wr = 0, wi = 0, gt = gh, wt = warning_time, at = activity_time, wit = warning_icons_time, upd = gm, wh = 0}
			is_save_table = true
			-- mylog("UPDATE_GPS_STALKER: уст. метка на сталкера " .. objinfo(box) .. ". " .. tableinfo(labels[boxId]))
		end

		local npc_name = get_npc_name(box)
		
		-- помеченный погиб, предупредим ГГ
		local aobj = AI:object(boxId)
		if is_warning_on_death and aobj and get_health(aobj) <= 0 and labels[boxId].wh == 0 then
			labels[boxId].wh = 1
			is_save_table = true
			amk.send_tip("%c[red_sms]Погиб сталкер " .. npc_name .. " с GPS-маячком", "GPS", nil, 20, "nano")
		end
		
		-- на сталкера вешаем другие метки, чем на тайник
		local text_health = ""
		if is_show_health then
			text_health = ", " .. get_health_str(box)
		end
		text_metki = get_npc_presentation(box) .. text_health .. ")."
		
		local location = "gps_stalker"
		if fl_send_tip_msg then
			amk.send_tip("Установлена метка на сталкера " .. get_npc_name(box), "GPS", nil, 10, "nano")
		end

		--апдейтим список
		remove_all_spots(boxId)
		amk.add_spot_on_map(boxId, location, text_metki)
	else
		remove_all_spots(boxId)
		remove_label(boxId)
		is_save_table = true
	end
	
	if is_save_table then
		amk.save_table("gps_labels", labels)
	end
end

function get_name(section)
	local inv_name = game.translate_string( artefact_hunter.get_art_name(section, true) )
	if inv_name~= "" then
		if string_find(inv_name, "Патроны") == 1 then
			return trim(string_gsub(inv_name, "Патроны", "П:"))
		elseif string_find(inv_name, "Комбинезон") == 1 then
			return trim(string_gsub(inv_name, "Комбинезон", "Комб"))
		elseif string_find(inv_name, "Противорадиационные") == 1 or string_find(inv_name, "Антирадиационные") == 1 then
			return "Антирад"
		elseif string_find(inv_name, "Радость туриста") then
			return "Консерва"
		elseif string_find(inv_name, "Колбаса") == 1 then
			return "Колбаса"
		elseif string_find(inv_name, "Энергетический") == 1 or string_find(inv_name, "Энергетик") == 1 then
			return "Энергетик"
		end
	end
	
	return inv_name
end

function get_color(secName)
	if (not secName) or string.len(secName) == 0 then
		return "%c[default]"
	end
	
	local cls = sys_ini:r_clsid(secName, "class")
	
	if isAmmo(nil, cls) or isGrenade(nil, cls) then -- нашли патроны
		return "%c[254,129,129,11]" -- хаки
	elseif isWeapon(nil, cls) then -- нашли оружие
		return "%c[254,243,122,11]" -- оранжевый
	elseif bind_det_arts.is_detected_art(secName) then -- нашли артефакт
		return "%c[207,255,085,085]" -- красный
	elseif isOutfit(nil, cls) then -- нашли броник
		return "%c[100,200,200,1]" -- желтый
	elseif string_find(secName, "mutant_") or string_find(secName, "part_") or string_find(secName, "_cocoon") then -- нашли часть монстра или эмбрион
		return "%c[50,1,150,1]" -- зеленый
	elseif string_find(secName, "pda") or string_find(secName, "flash") then -- нашли пда
		return "%c[208,100,100,255]" --  синий
	end

	return "%c[default]"
end

function spawn_m_inv()
	local aobj
	for i = 1, 65534 do 
		aobj =  AI:object(i)
		if aobj and aobj.section_name and aobj:section_name() == "m_inventory_box" then
			amk.add_spot_on_map(aobj.id, "red_location", "рюкзак")
		end
	end
end

function update_gps_habar(boxId)
--	spawn_m_inv()
	-- если в тайнике есть метка, апдейтим или ставим список. иначе снимаем маркер
	local gps_count = get_gps_count(boxId)
	if gps_count == 0 then
		remove_all_spots(boxId)
		remove_label(boxId)
		amk.save_table("gps_labels", labels)
		return
	end

	local fl_send_tip_msg = false
	local text_metki = ""
	local gm = game_time_minutes
	local gh = game_time_hours
	
	-- новая метка, добавляем в таблицу
	if not labels[boxId] then
		fl_send_tip_msg = true -- надо сообщить что ставим новую метку
		labels[boxId] = {wr = 0, wi = 0, gt = gh, wt = warning_time, at = activity_time, wit = warning_icons_time, upd = gm, wh = 0}
		amk.save_table("gps_labels", labels)
		-- mylog("UPDATE_GPS_HABAR: уст. новая метка с хабаром на тайник. " .. tableinfo(labels[boxId]))
	end

	--составляем список предметов
	if items_in_box[boxId] then
		local secName, invName, locObj
		local itemsbox = {}
		local is_yes
		
		for i, v in ipairs(items_in_box[boxId]) do
			locObj = AI:object(v.id)
			if locObj and locObj:section_name() then
				secName = locObj:section_name()
				invName = get_name(secName)
				
				is_yes = false
				-- mylog("itemsbox = " .. table.getn(itemsbox))
				for k, kk in pairs(itemsbox) do
					-- mylog("k = " .. k)
					if kk.inv == invName then
						kk.cnt = kk.cnt + 1
						is_yes = true
						break
					end
				end
				
				if not is_yes then
					table.insert(itemsbox, {sn = secName, inv = invName, cnt = 1, clr = get_color(secName)})
				end
			end
		end
		
		-- сортируем по section_name, чтобы список хабара получился с какой-то закономерностью, а не в разброд.
		table_sort(	itemsbox, 
					function(a,b)
						if a.clr == b.clr then
							return a.inv < b.inv
						end
						return (a.clr > b.clr)
					end
		)
		
		-- лежит только мячок, считаем что тайник пустой
		if #itemsbox == 1 and itemsbox[1].sn == "amk_metka" and itemsbox[1].cnt == 1 then
		else
--				local items_count = 0
			local is_one_item_on_string = true
			
			-- если много предметов, выключаем режим "один предмет на строку"
			if #itemsbox > max_comments_strings_on_screen then
				is_one_item_on_string = false
			end
			
			-- формируем текст метки
			local all_cnt = 0
			local color_code  = ""
			for i, v in pairs(itemsbox) do
				--mylog("i = " .. i .. " name = " .. v.sn)
				if not (v.sn == "amk_metka" and v.cnt == 1) then
					if is_color_and_sort_list then
						color_code = v.clr
					end
					
					if is_one_item_on_string then
						if text_metki ~= "" then 
							text_metki = text_metki .. "\\n"
						end
						text_metki = text_metki .. color_code .. v.inv
					else
						if text_metki ~= "" then 
							text_metki = text_metki .. ", "
						end
						text_metki = text_metki .. game.translate_string(color_code .. v.inv)
					end
					
					if is_show_quantity then
						if v.cnt > 1 then 
							text_metki = text_metki .. "(" .. tostring(v.cnt) .. ")"
						end
						all_cnt = all_cnt + v.cnt
					end
				end
			end

			if is_show_quantity then 
				text_metki = text_metki .. "\\n%c[255,255,255,255]Итого " .. tostring(all_cnt) .. " предм" 
			end
		end
	end

	-- mylog("Список хабара: " .. text_metki)

	--смотрим какого цвета нужны иконки
	local is_warning = false
	local labels_item = labels[boxId]
	if habar_list_mode and labels_item.at > 0 and labels_item.wit > 0 and ((gh - labels_item.gt) >= (labels_item.at - labels_item.wit)) then
		is_warning = true
	end
	
	local location = ""
	-- смотрим пустой тайник или есть что-то?
	if text_metki == "" then
		if fl_send_tip_msg then
			amk.send_tip("В схроне нет хабара. Установлена метка пустого тайника.", "GPS", nil, 10, "nano")
		end
		if is_warning then
			location = "habar_clear_location_w"
		else
			location = "habar_clear_location"
		end
		
		text_metki = "Пустой тайник."
	else
		text_metki = text_metki .. "."
		if fl_send_tip_msg then
			amk.send_tip("Установлена метка со списком хабара.", "GPS", nil, 10, "nano")
		end
		if is_warning then
			location = "habar_location_w"
		else
			location = "habar_location"
		end
	end
	
	-- добавим инфу о разряде
	if habar_list_mode and labels_item.at > 0 then
		text_metki = "Осталось: "..get_local_time(labels_item.gt + labels_item.at - gh) .. ".\\n" .. text_metki
	end
	
	--апдейтим список
	remove_all_spots(boxId)
	amk.add_spot_on_map(boxId, location, text_metki)
end

-- колбэк на апдейт ГГ (удобно для проверки условий, так как вызывается постоянно, нельзя перегружать, а то будут лаги)
-- вызываем из amk.script
function on_actor_update(delta)
	local aobj, lvname
	local is_save_table = false
	
	-- если юзаем режим разряда маячков
	if habar_list_mode then
		local gm = game_time_minutes
		local gh = game_time_hours
		
		for i, v in pairs(labels) do
			-- если надо предупредить о разряде сообщением
			if v.at > 0 and v.wt > 0 and v.wr == 0 and gh - v.gt > v.at - v.wt then
--					mylog("i = " .. i)
				aobj = AI:object(i)
				v.wr = 1
				lvname = news_data.level_name[ object_level_name(aobj) ][2]
				amk.send_tip("%c[red_sms]"..lvname.." через ".. tostring(v.gt + v.at - gh) .. " ч. на маячке надо сменить батарею.", "GPS", nil, 20, "nano")
				is_save_table = true
			end
			
			-- апдейтим информацию каждые 3 минуты или если надо предупредить о разряде сменой иконок
			if (gm - v.upd > 3 and is_update_on_time) or (v.wit > 0 and v.wi == 0 and gh - v.gt > v.at - v.wit) then
--						mylog("i = " .. i)
				v.wi = 1
				v.upd = gm;
				
				if not is_gps_update_in_process then
					if not v.fk then
						this.update_gps(nil, nil, i)
					else
						this.update_gps_fake(i)
					end
				end
				is_save_table = true
			end
			
			-- если время вышло, выключаем метку
			if v.at > 0 and gh - v.gt > v.at then
				aobj = AI:object(i)
				lvname = news_data.level_name[ object_level_name(aobj) ][2]
				amk.send_tip("%c[red_sms]"..lvname.." на маячке села батарея. Связь потеряна.", "GPS", nil, 20, "nano")

				remove_all_spots(i)
				remove_label(i)
				is_save_table = true
			end	
		end
	end
	
	if is_save_table then
		amk.save_table("gps_labels", labels)
	end
end

function show_dlg_dots_npc(obj)
	if (not obj) or (not is_set_label_on_npc) then
		return
	end

	-- это не маячок или маячок, но лежит на улице или у ГГ в инвентаре, заканчиваем
	local secName = obj:section()
	local boxId = get_inventory_box_id(obj)
	if not boxId or boxId == 0 or boxId == 65535 or (not secName) or secName ~= "amk_metka" then
		return
	end
	
	-- маячок попал не сталкеру или метка уже установлена, заканчиваем.
	local box = AI:object(boxId)
	if not box then 
		return
	end
	if not IsHuman[box:clsid()] or labels[boxId] then
		return
	end
	
	local spwn=ui_gps_trade.gps_trade(get_hud(), boxId)
	level.start_stop_menu(spwn,true)
end

-- вызываем из amk.script
-- при загрузке игры
function on_game_load()
	-- mylog("Инициализация переменных модуля gps_habar.")

	local gps_ini = ini_file("misc\\gps_habar.ltx")
	
	activity_time          = gps_ini:r_float("amk_metka", "activity_time")
	warning_time		   = gps_ini:r_float("amk_metka", "warning_time")
	warning_icons_time     = gps_ini:r_float("amk_metka", "warning_icons_time")
	habar_list_mode        = gps_ini:r_bool("amk_metka", "habar_list_mode")
	auto_recharge          = gps_ini:r_bool("amk_metka", "auto_recharge")
	is_show_quantity       = gps_ini:r_bool("amk_metka", "show_quantity")
	is_update_on_time      = gps_ini:r_bool("amk_metka", "update_on_time")
	is_color_and_sort_list = gps_ini:r_bool("amk_metka", "color_and_sort_list")
	
	-- метки на сталкерах
	is_set_label_on_npc   = gps_ini:r_bool("amk_metka", "set_label_on_npc")
	is_show_health        = gps_ini:r_bool("amk_metka", "show_health")
	is_warning_on_death   = gps_ini:r_bool("amk_metka", "warning_on_death")
	
	-- загружаем таблицу привязки ящиков к меткам.
	labels = amk.load_table("gps_labels")

--	log("gps_labels: %s", table.size(labels))
	local is_save_table = false
	local obj
	for id in pairs(labels) do
		obj = AI:object(id)
		if obj == nil
			or ( obj:clsid() ~= clsid.inventory_box
			and IsHuman[obj:clsid()] == nil )
		then
		--	log(obj and obj:name() or "nil")
			remove_all_spots(id)
			remove_label(id)
			is_save_table = true
		end
	end
	if is_save_table then
		amk.save_table("gps_labels", labels)
	--	log("gps_labels cleaning: %s", table.size(labels))
	end
	-- mylog("Загрузили таблицу меток: " .. tableinfo(labels))
end

function add_item(obj)
	-- заполняем таблицу хабара в помеченных тайниках, фикс неотображения на метках некоторых предметов
	if labels[obj.parent_id] then
		insert_item(obj.parent_id, obj)
	end
end

--колбэк на взятие предмета в инвентарь ГГ
-- вызываем из amk.script
function on_item_take()
	-- если взяли метку, проверяем всех помеченных. вдруг меку купили у одного из них.
	for i, v in pairs(labels) do
		if not v.fk then
			reinit_box(i)
			update_gps(nil, nil, i)
		end
	end
end

function on_item_take_from_box(box, item)
	-- mylog("ON_ITEM_TAKE_FROM_BOX: взят предмет " .. objinfo(item) .. ". Из ящика. Id: " .. tostring(boxId))
	-- если удалили из ящика почистим items_in_box
	if item and item:id() and box and box:id() then
		remove_item(box:id(), AI:object(item:id()), false)
	end
	
	recharge_gps(item, box)
	update_gps(item, box, nil)
end

--колбэк на потерю предмета из инвентаря ГГ
-- вызываем из amk.script
function on_item_drop(obj)
	if _G["biznes_remove_special_item"]==true then return end

	-- mylog("ON_ITEM_DROP: потерян предмет: " .. objinfo(obj))
	local se_obj = obj and obj:id() and AI:object(obj:id())
	if se_obj then
		insert_item(get_inventory_box_id(obj), se_obj)
	end

	show_dlg_dots_npc(obj)
	recharge_gps(obj, nil)
	update_gps(obj, nil, nil)
end


------------------------------------------------------------------------------------------------------
function update_gps_fake(box_id)
	local tbl = invbox_new.get_box(box_id)
	if tbl == nil or #tbl == 0 then
		return
	end

	local items = {}
	for i, id in ipairs(tbl) do
		local stor = se_storage.get_storage(id)
		if stor then
			for i = #stor, 1, -1 do
				table.insert(items, stor[i])
			end
		end
	end

	gps_habar.update_gps_spot_on_fake(true, box_id, items)
end

function update_gps_spot_on_fake(has_gps, boxId, items, recharge)
	if not has_gps then
		remove_all_spots(boxId)
		remove_label(boxId)
		amk.save_table("gps_labels", labels)
		return
	end
		
	local fl_send_tip_msg = false
	local text_metki = ""
	local gm = game_time_minutes
	local gh = game_time_hours
	
	-- новая метка, добавляем в таблицу
	if (not labels[boxId]) or recharge then
		fl_send_tip_msg = not labels[boxId] -- надо сообщить что ставим новую метку
		labels[boxId] = {wr = 0, wi = 0, gt = gh, wt = warning_time, at = activity_time, wit = warning_icons_time, upd = gm, wh = 0, fk = true}
		amk.save_table("gps_labels", labels)
	end

	local itemsbox = {}
	local invName
	local is_yes
	for i, v in ipairs(items) do
		invName = get_name(v.s)

		is_yes = false
		for k, kk in pairs(itemsbox) do
			if kk.inv == invName then
				kk.cnt = kk.cnt + 1
				is_yes = true
				break
			end
		end

		if not is_yes then
			table.insert(itemsbox, {sn = v.s, inv = invName, cnt = 1, clr = get_color(v.s)})
		end
	end

	table_sort(	itemsbox, function(a,b)
		if a.clr == b.clr then
			return a.inv < b.inv
		end
		return (a.clr > b.clr)
	end )

	-- лежит только мячок, считаем что тайник пустой
	if #itemsbox == 1 and itemsbox[1].sn == "amk_metka" and itemsbox[1].cnt == 1 then
	else
		local is_one_item_on_string = true
		-- если много предметов, выключаем режим "один предмет на строку"
		if #itemsbox > max_comments_strings_on_screen then
			is_one_item_on_string = false
		end

		-- формируем текст метки
		local all_cnt = 0
		local color_code  = ""
		for i, v in pairs(itemsbox) do
			if not (v.sn == "amk_metka" and v.cnt == 1) then
				if is_color_and_sort_list then
					color_code = v.clr
				end

				if is_one_item_on_string then
					if text_metki ~= "" then 
						text_metki = text_metki .. "\\n"
					end
					text_metki = text_metki .. color_code .. v.inv
				else
					if text_metki ~= "" then 
						text_metki = text_metki .. ", "
					end
					text_metki = text_metki .. color_code .. v.inv
				end

				if is_show_quantity then
					if v.cnt > 1 then 
						text_metki = text_metki .. "(" .. tostring(v.cnt) .. ")"
					end
					all_cnt = all_cnt + v.cnt
				end
			end
		end

		if is_show_quantity then 
			text_metki = text_metki .. "\\n%c[white]Итого " .. tostring(all_cnt) .. " предм" 
		end
	end

	--смотрим какого цвета нужны иконки
	local is_warning = false
	local labels_item = labels[boxId]
	if habar_list_mode and labels_item.at > 0 and labels_item.wit > 0 and ((gh - labels_item.gt) >= (labels_item.at - labels_item.wit)) then
		is_warning = true
	end
	
	local location = ""
	-- смотрим пустой тайник или есть что-то?
	if text_metki == "" then
		if fl_send_tip_msg then
			amk.send_tip("В схроне нет хабара. Установлена метка пустого тайника.", "GPS", nil, 10, "nano")
		end
		if is_warning then
			location = "habar_clear_location_w"
		else
			location = "habar_clear_location"
		end
		
		text_metki = "Пустой тайник."
	else
		text_metki = text_metki .. "."
		if fl_send_tip_msg then
			amk.send_tip("Установлена метка со списком хабара.", "GPS", nil, 10, "nano")
		end
		if is_warning then
			location = "habar_location_w"
		else
			location = "habar_location"
		end
	end
	
	-- добавим инфу о разряде
	if habar_list_mode and labels_item.at > 0 then
		text_metki = "Осталось: "..get_local_time(labels_item.gt + labels_item.at - gh) .. ".\\n" .. text_metki
	end
	
	--апдейтим список
	remove_all_spots(boxId)
	level.map_add_object_spot_ser(boxId, location, text_metki)
end

function has_label(box_id)
	return labels[box_id] ~= nil
end


function get_labels()
	return labels
end