-- -*- mode: lua; encoding: windows-1251 -*-
class "UISettingsWnd" (CUIScriptWnd)

function UISettingsWnd:__init(owner) super()
	self.owner = owner
	self:InitControls()
end

function UISettingsWnd:InitControls()
	self:Init(0, 0, 1024, 768)

	local xml = CScriptXmlInit()
	xml:ParseFile("ui_pda_settings.xml")

	self.back = xml:InitFrame("back_frame", self)
	local frame_h = self.back:GetHeight() - 10

	xml:InitStatic("caption", self.back)
	xml:InitStatic("minimap_settings", self.back)

	self.show_npc = xml:InitCheck("check_show_npc", self.back)
	self.show_npc:SetCheck( Actor:has_info("pda_show_npc") )
	self.show_npc:SetWndPos(15, frame_h)
	frame_h = frame_h + 22

	local dif = level.get_game_difficulty()
	if dif < game_difficulty.veteran then
		self.show_enemy = xml:InitCheck("check_show_enemy", self.back)
		self.show_enemy:SetCheck( Actor:has_info("pda_show_enemy") )
		self.show_enemy:SetWndPos(15, frame_h)
		frame_h = frame_h + 22
	elseif Actor:has_info("pda_show_enemy") then
		Actor:disable_info_portion("pda_show_enemy")
	end

	if dif < game_difficulty.veteran then
		self.show_monsters = xml:InitCheck("check_show_monsters", self.back)
		self.show_monsters:SetCheck( Actor:has_info("pda_show_monsters") )
		self.show_monsters:SetWndPos(15, frame_h)
		frame_h = frame_h + 22
	elseif Actor:has_info("pda_show_monsters") then
		Actor:disable_info_portion("pda_show_monsters")
	end

	if dif ~= game_difficulty.master then
		self.show_corpse = xml:InitCheck("check_show_corpse", self.back)
		self.show_corpse:SetCheck( Actor:has_info("pda_show_corpse") )
		self.show_corpse:SetWndPos(15, frame_h)
		frame_h = frame_h + 22
	elseif Actor:has_info("pda_show_corpse") then
		Actor:disable_info_portion("pda_show_corpse")
	end

	self.show_time = xml:InitCheck("check_show_time", self.back)
	self.show_time:SetCheck( Actor:has_info("pda_show_time") )
	self.show_time:SetWndPos(15, frame_h)
	frame_h = frame_h + 22

	self.show_compass = xml:InitCheck("check_show_compass", self.back)
	self.show_compass:SetCheck( Actor:has_info("pda_show_compass") )
	self.show_compass:SetWndPos(15, frame_h)
	frame_h = frame_h + 22

	if game_options.QuickSlotsOnHUD ~= 1 then
		self.show_quick_slots_always = xml:InitCheck("check_show_quick_slots_always", self.back)
		self.show_quick_slots_always:SetCheck( Actor:has_info("pda_show_quick_slots") )
		self.show_quick_slots_always:SetWndPos(15, frame_h)
		frame_h = frame_h + 22
	end

	if inventory.on_belt("bioradar") or inventory.on_belt("bioradar2") then
		self.biodetector = xml:InitCheck("check_biodetector", self.back)
		self.biodetector:SetCheck( Actor:has_info("pda_biodetector_mode") )
		self.biodetector:SetWndPos(15, frame_h)
		frame_h = frame_h + 22
	end

	self.back:SetHeight(frame_h + 10)

	local btn = xml:InitButton("btn_quit", self.back)
	self:Register(btn, "button_quit")
	self:AddCallbackEx("button_quit", ui_events.BUTTON_CLICKED, self.OnButtonQuit)
end

function UISettingsWnd:SaveSettings()
	local function check_option(ctrl, info)
		if ctrl == nil then return end
		local has = Actor:has_info(info)
		local chk = ctrl:GetCheck() 
		if chk and not has then
			Actor:give_info_portion(info)
		elseif has and not chk then
			Actor:disable_info_portion(info)
		end
	end

	check_option(self.show_npc, "pda_show_npc")
	check_option(self.show_enemy, "pda_show_enemy")
	check_option(self.show_monsters, "pda_show_monsters")
	check_option(self.show_corpse, "pda_show_corpse")
	check_option(self.show_time, "pda_show_time")
	check_option(self.show_compass, "pda_show_compass")
	check_option(self.show_quick_slots_always, "pda_show_quick_slots")
	check_option(self.biodetector, "pda_biodetector_mode")

	ui_script_hud.init_settings()
end

function UISettingsWnd:OnButtonQuit()
	self:SaveSettings()

	self.owner:Enable(true)
	self:ClearCallbacks()
	self:GetHolder():start_stop_menu(self, true)
end

function UISettingsWnd:OnKeyboard(dik, keyboard_action)
	CUIScriptWnd.OnKeyboard(self, dik, keyboard_action)

	if keyboard_action == ui_events.WINDOW_KEY_PRESSED then
		if dik == DIK_keys.DIK_ESCAPE then
			self:OnButtonQuit()
		end
	end
	return true
end
