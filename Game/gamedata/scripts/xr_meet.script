-- -*- mode: lua; encoding: windows-1251 -*-
----------------------------------------------------------------------------------------------------------------------
--  Схема встречи двух сталкеров
--  автор: Диденко Руслан (Stohe)
--  TODO:
----------------------------------------------------------------------------------------------------------------------
local function is_weapon(obj)
	if obj and IAmAWeapon[obj:clsid()] then
		return (string.find(obj:section(), "^wpn_binoc")) == nil
	end
	return false
end
---------------------------------------------------------------------------------------------------------------------
--Evaluators
----------------------------------------------------------------------------------------------------------------------
--' Возвращает есть ли у нас контакт с другим сталкером
class "evaluator_contact" (property_evaluator)
function evaluator_contact:__init(name, storage) super (nil, name)
	self.a = storage
end
function evaluator_contact:evaluate()
	if self.a.meet_set ~= true then return false end

--	if xrs_armor and xrs_armor.pickupers[self.object:id()]==true then return false end

	if not Actor:alive() then
		return false
	end
--	Red75 +
	if xr_wounded.is_wounded(self.object) then
		self.begtime=nil
		return false
	end

	self.a.meet_manager:update()

	if self.mgr == nil then
		self.mgr = self.object:motivation_action_manager()
	end
	if self.mgr:evaluator(stalker_ids.property_enemy):evaluate() then
		self.object:disable_talk()
		self.begtime=nil
		return false
	end
	-- Чтобы не стояли и не пялились часами
	local tken=(self.a.meet_manager.state~="nil")
	local istk=self.object:is_talking()
	if self.begtime==nil and tken then
		self.begtime=time_global()
	elseif not tken then
		self.begtime=nil
	elseif tken and self.begtime+10000<time_global()
		and (not istk) and (not self.a.meet_manager.wpn_meet)
	then
    -- 10 секунд посмотрели на меченного и хватит
		return false
	elseif istk or self.a.meet_manager.wpn_meet then
		self.begtime=time_global()
	end

	return self.a.meet_manager.state~="nil"
-- Red75 -
end

----------------------------------------------------------------------------------------------------------------------
--Actions
----------------------------------------------------------------------------------------------------------------------
--' Приглашение к тороговле
class "action_meet_wait" (action_base)
function action_meet_wait:__init (npc_name,action_name, storage, char_ini) super (nil, action_name)
	self.char_ini = char_ini
	self.a = storage
end
function action_meet_wait:initialize()
	action_base.initialize(self)
--	self.object:set_node_evaluator()
--	self.object:set_path_evaluator()
	self.object:set_desired_position()
	self.object:set_desired_direction()
	-- кешируемые данные
	self.sound = "nil"

	-- Здороваемся.
	if self.a.init_meet ~= "" then
		xr_sound.set_sound_play(self.object, self.a.init_meet)
	end
end
function action_meet_wait:execute ()
	action_base.execute(self)
	local meet_manager = self.a.meet_manager

	local victim = nil
	if meet_manager.victim == "actor" then
		victim = Actor
	elseif meet_manager.victim == "nil" then
		victim = nil
--	else
--		victim = AI:story_object(victim)
	end

  local synsound = nil
  if meet_manager.state == "true" then
    local h = hit()
    h.power = 0
    h.direction = self.object:direction()
    h.bone = "bip01_spine"
    h.draftsman = Actor
    h.impulse = 0
    h.type = hit.wound
    self.object:hit(h)
    self.object:set_relation(game_object.enemy, Actor)
  else
    -- является ли текущий звук синхронным для текущего стейта
    for k,v in pairs(self.a.syndata) do
      if v.state == meet_manager.state and
         v.sound == meet_manager.sound
      then
        synsound = meet_manager.sound
      end
    end

    if meet_manager.state~="nil" then
      if meet_manager.emerg_state == true then
        state_mgr.set_state(self.object, meet_manager.state, nil, nil, {look_object = victim}, {animation = true}, synsound)
      else
        state_mgr.set_state(self.object, meet_manager.state, nil, nil, {look_object = victim}, nil, synsound)
      end
    end
  end

  if synsound == nil then
    -- нужно отыграть фоновый
    if self.sound ~= meet_manager.sound then
      self.sound = meet_manager.sound
      if self.sound == "nil" then
        xr_sound.set_sound(self.object, nil)
      else
        local idle_timeout = 0
        if meet_manager.sound == "wait" then
          idle_timeout = 10000
        end
        xr_sound.set_sound(self.object, meet_manager.sound, nil, idle_timeout)
      end
    end
  else
    -- нужно зарубить фоновый
    if self.sound ~= nil then
      self.sound = "nil"
      xr_sound.set_sound(self.object, nil)
    end
  end

  --' Туториал на спрятать оружие
--  if meet_manager.disable_talk_weapon == true and
--       not has_alife_info("tutorial_part_15_hide_weapon")
--  then
    --game.start_tutorial("part_15_hide_weapon")
--    Actor:give_info_portion("tutorial_part_15_hide_weapon")
--  end

  local tt = db.storage[self.object:id()]
  if tt.active_scheme then
    if Actor then
      if xr_logic.try_switch_to_another_section(self.object, tt[tt.active_scheme], Actor) then
        return
      end
    end
  end
end
function action_meet_wait:finalize ()
  action_base.finalize(self)
  xr_sound.set_sound(self.object, nil)
end

class "Cmeet_manager"
function Cmeet_manager:__init(npc, storage)
  self.npc = npc
  self.a = storage
  self.emerg_state = false
  self.startdialog = nil
end
function Cmeet_manager:update()
  -- стартовый диалог
  local targets=amk.load_table("kill_targets")
  local kill_dialog=nil
  for k,v in pairs(targets) do
    if v.id==self.npc:id() then
      kill_dialog=v.dialog
      break
    end
  end
  if kill_dialog then
  -- NPC собрались убивать, поэтому ничего важнее быть не может. Всё остальное потом
    if self.startdialog~=kill_dialog then
      self.npc:set_start_dialog(kill_dialog)
      self.startdialog=kill_dialog
    end
  elseif self.a.meet_dialog ~= nil then
    local tmp = xr_logic.pick_section_from_condlist(Actor, self.npc, self.a.meet_dialog)
    if self.startdialog ~= tmp then
      self.startdialog = tmp
--      printf("*DIALOGS %s* SET [%s]", self.npc:name(), utils.to_str(tmp))
      if tmp == nil or tmp == "nil" then
        -- восстановление начального
--        printf("RESTORE")
        self.npc:restore_default_start_dialog()
      else
--        printf("SET")
        -- установка нового
        self.npc:set_start_dialog(tmp)
      end
    end
  elseif (not kill_dialog) then
    self.npc:restore_default_start_dialog()
  end

  self:process_use()
  if self.a.precond == "usability" and not self.npc:is_talking() then
    self.state = "nil"
    self.sound = "nil"
    return
  end
  if self.a.precond == "visibility" and (not self.npc:see(Actor)) and not self.npc:is_talking() then
    self.state = "nil"
    self.sound = "nil"
    return
  end

  if self.npc:is_talking() then
    self.dist = 0
  else
    self.dist = self.npc:position():distance_to(Actor:position())
  end

  self.victim = self:process_victim()

  self.state_zone,self.sound_zone = self:process_zone()
  if self.state_zone ~= "nil" then
    if self.victim == "nil" then
      self.victim = "actor"
    end
    self.state,self.sound = self.state_zone,self.sound_zone
  else
    self.state,self.sound = self:process_meet()
  end
  -- Если актер говорит, и говорит не с нами, то мы не должны говорить звуков.
  if Actor:is_talking() and not self.npc:is_talking() then
    self.sound = "nil"
  end
  -- printf("MEET [%s], state: [%s], sound: [%s]", self.npc:name(), tostring(self.state), tostring(self.sound))
end
function Cmeet_manager:process_zone()
  if self.a.zone == nil then return "nil","nil" end
  local key
  key = self:get_key_from_zone(self.a.zone)
  if key ~= nil then
    local r1,r2
    if self.a.zone[key].state then
      r1 = xr_logic.pick_section_from_condlist(Actor, self.npc, self.a.zone[key].state)
      self.emerg_state = true
    end
    if self.a.zone[key].sound then
      r2 = xr_logic.pick_section_from_condlist(Actor, self.npc, self.a.zone[key].sound)
    end
    return tostring(r1), tostring(r2)
  end
  return "nil","nil"
end
function Cmeet_manager:process_meet()
  local key
  local is_talking = self.npc:is_talking()
  if is_weapon(actor_active_item) and
       self.npc:relation(Actor) ~= game_object.friend and self:actor_targets_npc(self.npc)
    then
    key = self:get_key_from_distance(self.a.meet_state_wpn)
    if key ~= nil then
      self.wpn_meet=true
      local r1,r2
      if self.a.meet_state_wpn[key].state then
        r1 = xr_logic.pick_section_from_condlist(Actor, self.npc, self.a.meet_state_wpn[key].state)
        self.emerg_state = true
      end
      if is_talking then
        r2 = nil
      else
        if self.a.meet_state_wpn[key].sound then
          r2 = xr_logic.pick_section_from_condlist(Actor, self.npc, self.a.meet_state_wpn[key].sound)
        end
      end
      return tostring(r1), tostring(r2)
    end
  else
    self.wpn_meet=false
    key = self:get_key_from_distance(self.a.meet_state)
    if key ~= nil then
      local r1,r2
      if self.a.meet_state[key].state then
        r1 = xr_logic.pick_section_from_condlist(Actor, self.npc, self.a.meet_state[key].state)
        self.emerg_state = false
      end
      if is_talking then
        r2 = nil
      else
        if self.a.meet_state[key].sound then
          r2 = xr_logic.pick_section_from_condlist(Actor, self.npc, self.a.meet_state[key].sound)
        end
      end
      return tostring(r1), tostring(r2)
    end
  end
  return "nil","nil"
end
function Cmeet_manager:process_victim()
  local key
  if is_weapon(actor_active_item) then
    key = self:get_key_from_distance(self.a.victim_wpn)
    if key ~= nil then
      return tostring(xr_logic.pick_section_from_condlist(Actor, self.npc, self.a.victim_wpn[key].state))
    end
  else
    key = self:get_key_from_distance(self.a.victim)
    if key ~= nil then
      return tostring(xr_logic.pick_section_from_condlist(Actor, self.npc, self.a.victim[key].state))
    end
  end
  return "nil"
end

function Cmeet_manager:actor_targets_npc(npc)
  local dangerang=1/npc:position():distance_to(Actor:position())
  local ang=horz_angle(device().cam_dir,npc:position():sub(device().cam_pos))
  local tgt=ang>-dangerang and ang<dangerang
  if tgt then
    if self.tgt_time then
      return self.tgt_time<time_global()
    else
      self.tgt_time=time_global()+600
      return false
    end
  else
    self.tgt_time=nil
  end
  return false
end


function Cmeet_manager:get_key_from_distance(t)
  local key
  for k,v in pairs(t) do
    if v.dist >= self.dist then
      key = k
    else
      return key
    end
  end
  return key
end
function Cmeet_manager:get_key_from_zone(t)
  for k,v in pairs(t) do
    if utils.npc_in_zone(Actor, db.zone_by_name[v.zone]) then
      return k
    end
  end
  return nil
end
function Cmeet_manager:process_use()
  local is_talking = self.npc:is_talking()
--  printf("MM1 %s %s", self.npc:name(), tostring(is_talking))
  -- запрещаем юзать спящих
  if xr_sleeper.is_npc_asleep(self.npc) then
    self.npc:disable_talk()
    self.disable_talk_weapon = false
    if is_talking then
      self.npc:stop_talk()
    end
    return
  end
  
  local t
  if is_weapon(actor_active_item) then
    t = xr_logic.pick_section_from_condlist(Actor, self.npc, self.a.use_wpn)
    if t == "false" then
      self.disable_talk_weapon = true
    end
  else
    t = xr_logic.pick_section_from_condlist(Actor, self.npc, self.a.use)
    self.disable_talk_weapon = false
  end
  -- проверка по дистанции
--  printf("MM2 %s %s", self.npc:name(), tostring(t))
  if (is_talking and self.npc:position():distance_to_sqr(Actor:position()) > 9) and
    t ~= "self"
  then
--    printf("MM3 %s stop talk", self.npc:name())
    self.npc:stop_talk()
  end

  if t == "true" then
    self.npc:enable_talk()
	self:check_trade()
  elseif t == "false" then
    self.npc:disable_talk()
    if is_talking then
      self.npc:stop_talk()
    end
  elseif t == "self" then
    if not is_talking then
--      printf("MM3 %s start talk", self.npc:name())
      Actor:run_talk_dialog(self.npc)
	  self:check_trade()
    end
  end
end

function Cmeet_manager:check_trade()
	local can_trade = self.npc:is_trade_enabled()
	if self.a.can_trade == "false" and can_trade then
		self.npc:disable_trade()
	elseif self.a.can_trade == "true" and not can_trade then
		self.npc:enable_trade()
	end
end
----------------------------------------------------------------------------------------------------------------------
-- binder
----------------------------------------------------------------------------------------------------------------------
function add_to_binder(object, char_ini, scheme, section, st)
  local operators   = {}
  local properties  = {}

  local manager = object:motivation_action_manager()

  properties["contact"]   = xr_evaluators_id.stohe_meet_base + 1
  properties["wounded"]   = xr_evaluators_id.sidor_wounded_base
  properties["abuse"]     = xr_evaluators_id.abuse_base

  operators["contact"]    = xr_actions_id.stohe_meet_base + 1
  operators["state_mgr_to_idle_alife"]  = xr_actions_id.state_mgr + 2

  -- Evaluators
  manager:add_evaluator (properties["contact"],     evaluator_contact("meet_contact", st))

  -- Actions
  local action = action_meet_wait (object:name(),"action_process_meet", st, char_ini)
  action:add_precondition   (world_property(stalker_ids.property_alive, true))
  action:add_precondition   (world_property(stalker_ids.property_enemy, false))
  action:add_precondition   (world_property(stalker_ids.property_danger,false))
  action:add_precondition   (world_property(stalker_ids.property_anomaly,false))
  action:add_precondition   (world_property(properties["contact"],    true))
  action:add_precondition   (world_property(properties["wounded"],    false))
  action:add_precondition   (world_property(properties["abuse"],    false))
  action:add_effect (world_property(properties["contact"],      false))
  manager:add_action (operators["contact"], action)

  action = manager:action (xr_actions_id.alife)
  action:add_precondition   (world_property(properties["contact"],    false))

  action = manager:action (operators["state_mgr_to_idle_alife"])
  action:add_precondition   (world_property(properties["contact"],    false))

  st.meet_manager = Cmeet_manager(object, st)
end



------------
-- Вызывается только в начале на чтении логики, создает экшены, эвалуаторы и производит
-- первичную настройку.
function set_meet(npc, ini, scheme, section)
  local st = xr_logic.assign_storage_and_bind(npc, ini, scheme, section)
end
-- Вызывается на переключении на новую секцию. Производит вычитывание настроек из текущей секции.
function reset_meet(npc, scheme, st, section)
  local meet_section
--  printf("[%s]", utils.to_str(st.section_logic))
  if scheme == nil or scheme == "nil" then
    meet_section = utils.cfg_get_string(st.ini, st.section_logic, "meet", npc, false, "")
  else
    meet_section = utils.cfg_get_string(st.ini, section, "meet", npc, false, "")
  end
  if meet_section == "default_meet" then
    if scheme == "kamp" then
      init_meet(npc, st.ini, nil, st.meet, scheme)
    else
      init_meet(npc, st.ini, nil, st.meet, nil)
    end
  else
    init_meet(npc, st.ini, meet_section, st.meet, scheme)
  end
end

-- Функция чтения настроек. В нее передается секция, откуда их нужно читать.
local def_meet = {
	["scheme_nil"] = {
		meet_state     = "5|wait@wait",
		meet_state_wpn = "5|backoff@threat_weap",
		init_meet      = "talk_hello",
		victim         = "5|actor",
		victim_wpn     = "5|actor",
		use            = "true",
		use_wpn        = "false",
		syndata        = "backoff@threat_weap",
		precond        = "usability",
		abuse          = "true",
		can_trade      = "true"
	},
	["scheme_kamp"] = {
		meet_state     = "2|wait",
		meet_state_wpn = "",
		init_meet      = "",
		victim         = "2|actor",
		victim_wpn     = "",
		use            = "{=_kamp_talk}true,false",
		use_wpn        = "false",
		syndata        = "",
		precond        = "usability",
		abuse          = "false",
		can_trade      = "true"
	},
	["no_meet"] = {
		meet_state     = "",
		meet_state_wpn = "",
		init_meet      = "",
		victim         = "",
		victim_wpn     = "",
		use            = "false",
		use_wpn        = "false",
		syndata        = "",
		precond        = "usability",
		abuse          = "false",
		can_trade      = "false"
	},
	["bad_community"] = {
		meet_state     = "",
		meet_state_wpn = "",
		init_meet      = "",
		victim         = "",
		victim_wpn     = "",
		use            = "true",
		use_wpn        = "false",
		syndata        = "",
		precond        = "usability",
		abuse          = "true",
		can_trade      = "true"
	},
	["good_community"] = {
		meet_state     = "2|wait",
		meet_state_wpn = "",
		init_meet      = "",
		victim         = "2|actor",
		victim_wpn     = "",
		use            = "true",
		use_wpn        = "false",
		syndata        = "",
		precond        = "usability",
		abuse          = "true",
		can_trade      = "true"
	}
}
local bad_community = {
	["military"] = true,
	["bandit"] = true,
	["sniper"] = true,
	["killer"] = true,
	["lastday"] = true,
	["monolith"] = true,
	["zombied"] = true
}
local no_meet_community = {
	["fotoman"] = true,
	["vermaht"] = true,
	["arena_enemy"] = true
}
function init_meet(npc, ini, section, st, scheme)
--  printf("MEET SECTION [%s][%s]", tostring(section), tostring(scheme))

	if tostring(section) == st.meet_section and
		tostring(section) ~= "nil"
	then
		return
	end

	st.meet_section = utils.tostring(section)

	-- Устанавливаем дефолты
	local def
	local npc_community = npc:character_community()
	if no_meet_community[npc_community] then
		def = def_meet.no_meet
	elseif bad_community[npc_community] then
		def = def_meet.bad_community
	elseif tostring(scheme) == "nil" then
		def = def_meet.scheme_nil
	elseif tostring(scheme) == "kamp" then
		def = def_meet.scheme_kamp
	else
		def = def_meet.good_community
	end

	if tostring(section) == "nil" then
		-- Загружаем дефолты!
		st.meet_state     = parse_data(npc, def.meet_state)
		st.meet_state_wpn = parse_data(npc, def.meet_state_wpn)
		st.init_meet      = def.init_meet
		st.victim         = parse_data(npc, def.victim)
		st.victim_wpn     = parse_data(npc, def.victim_wpn)
		st.use            = xr_logic.parse_condlist(npc, section, "use", def.use)
		st.use_wpn        = xr_logic.parse_condlist(npc, section, "use_wpn", def.use_wpn)
		st.meet_dialog    = xr_logic.parse_condlist(npc, section, "meet_dialog", "")
		st.zone           = parse_zone_data(npc, "")
		st.syndata        = parse_syn_data(npc, def.syndata)
		st.precond        = def.precond
		st.abuse          = def.abuse
		st.can_trade      = def.can_trade
	elseif tostring(section) == "no_meet" then
		st.meet_state     = parse_data(npc, "")
		st.meet_state_wpn = parse_data(npc, "")
		st.init_meet      = ""
		st.victim         = parse_data(npc, "")
		st.victim_wpn     = parse_data(npc, "")
		st.use            = xr_logic.parse_condlist(npc, section, "use", "false")
		st.use_wpn        = xr_logic.parse_condlist(npc, section, "use_wpn", "false")
		st.meet_dialog    = xr_logic.parse_condlist(npc, section, "meet_dialog", "")
		st.zone           = parse_zone_data(npc, "")
		st.syndata        = parse_syn_data(npc, "")
		st.precond        = "usability"
		st.abuse          = "false"
		st.can_trade      = "false"
	else
		st.meet_state     = parse_data(npc, utils.cfg_get_string(ini, section, "meet_state", npc, false, "", def.meet_state))
		st.meet_state_wpn = parse_data(npc, utils.cfg_get_string(ini, section, "meet_state_wpn", npc, false, "", def.meet_state_wpn))
		st.init_meet      = utils.cfg_get_string(ini, section, "init_meet", npc, false, "", def.init_meet)
		st.victim         = parse_data(npc, utils.cfg_get_string(ini, section, "victim", npc, false, "", def.victim))
		st.victim_wpn     = parse_data(npc, utils.cfg_get_string(ini, section, "victim_wpn", npc, false, "", def.victim_wpn))
		st.use            = xr_logic.parse_condlist(npc, section, "use", utils.cfg_get_string(ini, section, "use", npc, false, "", def.use))
		st.use_wpn        = xr_logic.parse_condlist(npc, section, "use_wpn", utils.cfg_get_string(ini, section, "use_wpn", npc, false, "", def.use_wpn))
		st.meet_dialog    = xr_logic.parse_condlist(npc, section, "meet_dialog", utils.cfg_get_string(ini, section, "meet_dialog", npc, false, "", ""))
		st.zone           = parse_zone_data(npc, utils.cfg_get_string(ini, section, "zone", npc, false, ""))
		st.syndata        = parse_syn_data(npc, utils.cfg_get_string(ini, section, "synpairs", npc, false, "", def.syndata))
		st.precond        = utils.cfg_get_string(ini, section, "precond", npc, false, "", def.precond)
		st.abuse          = utils.cfg_get_string(ini, section, "abuse", npc, false, "", def.abuse)
		st.can_trade      = utils.cfg_get_string(ini, section, "can_trade", npc, false, "", def.can_trade)
	end

	--print_table(st)

	-- Проверяем включать ли обижание на заюзывание
	if st.abuse == "true" then
		xr_abuse.enable_abuse(npc)
	else
		xr_abuse.disable_abuse(npc)
	end

	-- флажок, что функция хотя бы раз вызывалась
	st.meet_set = true
end

function parse_data(npc,s)
  local t = {}

    if s then
    for name in string.gfind( s, "(%|*%d+%|[^%|]+)%p*" ) do
--      printf("[%s]", utils.to_str(name))
      local dat = { dist = nil,
              state = nil,
              sound = nil}

      local t_pos = string.find( name, "|", 1, true )
      local s_pos = string.find( name, "@", 1, true )

      local dist = string.sub( name, 1, t_pos - 1 )
      local state
      local sound

      if s_pos then
        state = string.sub( name, t_pos + 1,
                      s_pos - 1 )
        sound = string.sub( name, s_pos + 1)
      else
        state = string.sub( name, t_pos + 1)
      end

--      printf("  [%s]=[%s][%s]", utils.to_str(dist), utils.to_str(state), utils.to_str(sound))

      dat.dist = tonumber(dist)
      if state then
        dat.state = xr_logic.parse_condlist(npc, dist, state, state)
      end
      if sound then
        dat.sound = xr_logic.parse_condlist(npc, dist, sound, sound)
      end
      table.insert(t, dat)
    end
  end
    return t
end
function parse_zone_data(npc,s)
--  printf("parse_zone_data [%s]", utils.to_str(s))
  local t = {}

    if s then
    for name in string.gfind( s, "(%|*[^%|]+%|[^%|]+)%p*" ) do
--      printf("[%s]", utils.to_str(name))
      local dat = { zone = nil,
              state = nil,
              sound = nil}

      local t_pos = string.find( name, "|", 1, true )
      local s_pos = string.find( name, "@", 1, true )

      local zone = string.sub( name, 1, t_pos - 1 )
      local state
      local sound

      if s_pos then
        state = string.sub( name, t_pos + 1,
                      s_pos - 1 )
        sound = string.sub( name, s_pos + 1)
      else
        state = string.sub( name, t_pos + 1)
      end

--      printf("  [%s]=[%s][%s]", utils.to_str(zone), utils.to_str(state), utils.to_str(sound))

      dat.zone = zone
      if state then
        dat.state = xr_logic.parse_condlist(npc, zone, state, state)
      end
      if sound then
        dat.sound = xr_logic.parse_condlist(npc, zone, sound, sound)
      end
      table.insert(t, dat)
    end
  end

    return t
end
function parse_syn_data(npc,s)
--  printf("parse_syn_data [%s]", utils.to_str(s))
  local t = {}
    if s then
    for name in string.gfind( s, "(%|*[^%|]+%|*)%p*" ) do
      local dat = { zone = nil,
              state = nil,
              sound = nil}
--      printf("[%s]", utils.to_str(name))

      local t_pos = string.find( name, "@", 1, true )
      local s_pos = string.find( name, "|", 1, true )

      local state = string.sub( name, 1, t_pos - 1 )
      local sound
      if s_pos then
        sound = string.sub( name, t_pos + 1, s_pos -1)
      else
        sound = string.sub( name, t_pos + 1)
      end

      dat.state = state
      dat.sound = sound
      table.insert(t, dat)
    end
  end

    return t
end

-- ДИАЛОГИ ПОКА НЕ ТРОГАЕМ!!!
--' Считывание доступных диалогов игрока.
function set_actor_dialogs(npc, ini, name, dialog_section)
--  printf("*ACTOR_DIALOGS*")
  if dialog_section == nil then return end
--  printf("*ACTOR_DIALOGS*: set_actor_dialogs: npc_name='%s' section='%s'", npc:name(), dialog_section)

  local actor_dialogs_string = utils.cfg_get_string(ini, dialog_section, "id", npc, false, "")
  if actor_dialogs_string ~= nil then
--    printf("*ACTOR_DIALOGS*: actor_dialogs=%s", actor_dialogs_string)
    --' Создаем в массиве запись где будут храниться считанные диалоги.
    db.storage[npc:id()].actor_dialogs = parse_names(actor_dialogs_string)
  else
--    printf("*ACTOR_DIALOGS*: actor_dialogs=nil")
  end

  local actor_disable = utils.cfg_get_string(ini, dialog_section, "disable", npc, false, "")
  if actor_disable ~= nil then
--    printf("*ACTOR_DIALOGS*: actor_disable=%s", actor_disable)
    --' Создаем в массиве запись где будут храниться считанные диалоги.
    db.storage[npc:id()].actor_disable = parse_names(actor_disable)
  else
--    printf("*ACTOR_DIALOGS*: actor_disable=nil")
  end
end
--' ВНИМАНИЕ: Эта функция вызывается и для сталкеров, и для монстров!
function dialog_manager_reset(npc, stype)
  if stype == modules.stype_mobile then
--    printf("*DIALOGS*: dialog_manager_reset: npc:name='%s'", npc:name())
    --' Смена стартового диалога
    local overrides = xr_logic.generic_scheme_overrides(npc)
    if overrides ~= nil then
      if overrides.meet_dialog then
--        printf("*DIALOGS_MOB*: Set start dialog %s", overrides.meet_dialog)
        npc:set_start_dialog(overrides.meet_dialog)
      else
--        printf("*DIALOGS_MOB*: Restore start dialog")
        npc:restore_default_start_dialog()
      end
    else
--      printf("*DIALOGS_MOB*: SCHEME HAS NO OVERRIDES: Restore start dialog")
      npc:restore_default_start_dialog()
    end
  end
end
function disable_scheme(npc, scheme)
  db.storage[npc:id()].actor_dialogs = nil
  db.storage[npc:id()].actor_disable = nil
end

--- Находится ли чувак в данный момент в состоянии мита
function is_meet(npc)
  local manager = npc:motivation_action_manager()
  if manager and manager:initialized() then
    local id = manager:current_action_id()
    if id == xr_actions_id.stohe_meet_base + 1 then
      return true
    end
  end
  return false
end
-- Функция проверяет не мешает ли персонажу говорить с нами оружие
function cannot_talk_by_weapon(npc)
  local st = db.storage[npc:id()].meet
  if st then
    if not is_weapon(actor_active_item) then
      return false
    end
    if st.use then
      local t = xr_logic.pick_section_from_condlist(Actor, npc, st.use)
      if t == "false" then
        return false
      end
    end
    if st.use_wpn then
      local t = xr_logic.pick_section_from_condlist(Actor, npc, st.use_wpn)
      if t == "false" then
        return true
      end
    end
  end
  return false
end

-- Возвращает угол между проекциями векторов vec1 и vec2 на горизонтальную плоскость
-- положительный угол - доворот vec1 до vec2 по часовой.
function horz_angle(vec1,vec2)
  local x=vec2.x*vec1.x+vec2.z*vec1.z
  local y=-vec2.z*vec1.x+vec2.x*vec1.z -- повернули систему координат
  return math.atan2(y,x) -- угол доворота от -pi до pi
end
