-- -*- mode: lua; encoding: windows-1251 -*-
local math_clamp = math.clamp

THIRST = 0

local thirst_v
local thirst_critical_power
local thirst_min_critical_power
local thirst_critical_health
local thirst_min_critical_health
local thirst_power_v
local thirst_health_v

local death_timer = nil

function init()
	local v = amk.load_variable("thr", 0)
--	log("[thirst.init] %s", v)
	death_timer = math.floor(v)
	THIRST = v - death_timer
	if death_timer == 0 then
		death_timer = nil
	end

	local cond_sect = sys_ini:r_string("actor", "condition_sect")
	thirst_v = sys_ini:r_float(cond_sect, "thirst_v")
	thirst_power_v = -sys_ini:r_float(cond_sect, "thirst_power_v")
	thirst_health_v = -sys_ini:r_float(cond_sect, "thirst_health_v")
	thirst_critical_power = sys_ini:r_float(cond_sect, "thirst_critical_power")
	thirst_min_critical_power = sys_ini:r_float(cond_sect, "thirst_min_critical_power")
	thirst_critical_health = sys_ini:r_float(cond_sect, "thirst_critical_health")
	thirst_min_critical_health = sys_ini:r_float(cond_sect, "thirst_min_critical_health")
end

-- delta - игровые секунды
function update(delta)
	amk.oau_reason="thirst.update"

	if Actor:is_actor_sprinting() then
		delta = delta * 2
	end

	THIRST = math_clamp(THIRST + thirst_v*delta, 0, 1)
--	log("thirst: %s", THIRST)

	if THIRST > thirst_critical_power then
		if Actor.power > thirst_min_critical_power then
			Actor.power = thirst_power_v * (THIRST - thirst_critical_power)/(1 - thirst_critical_power)
		end
	end

	if THIRST > thirst_critical_health then
		if Actor.health > thirst_min_critical_health then
			Actor.health = thirst_health_v * (THIRST - thirst_critical_health)/(1 - thirst_critical_health)
		end
		if not death_timer then
			death_timer = 24*60*60
		elseif death_timer > 0 then
			death_timer = death_timer - delta
		else
			Actor:kill(Actor)
		end
	elseif death_timer then
		death_timer = nil
	end

	ui_scroll_indicators.update_indicator( "thirst", "thirst", THIRST )
end

function change_thirst(delta)
	THIRST =  math_clamp(THIRST + delta, 0, 1)
end

function save()
	if THIRST == 1 then THIRST = 0.99999 end
	local v = THIRST + (death_timer and math.ceil(death_timer) or 0)
--	log("[thirst.save] %s", v)
	amk.save_variable("thr", v)
end

function attach()
	xr_s.subscribe( "net_spawn",   this.init )
	xr_s.subscribe( "pre_save",    this.save )
end

function test(...)
	thirst_v, thirst_power_v, thirst_health_v = ...
end
