-- -*- mode: lua; encoding: windows-1251 -*-
local math_clamp = math.clamp

THIRST = 0

local thirst_v
local thirst_critical_power
local thirst_min_critical_power
local thirst_critical_health
local thirst_min_critical_health
local thirst_power_v
local thirst_health_v

local death_timer = nil

local tIndicatorThresholds = {}

local icon_wnd = nil
local current_threshold = nil

function init()
	local v = amk.load_variable("thr", 0)
--	log("[thirst.init] %s", v)
	death_timer = math.floor(v)
	THIRST = v - death_timer
	if death_timer == 0 then
		death_timer = nil
	end

	local cond_sect = sys_ini:r_string("actor", "condition_sect")
	thirst_v = sys_ini:r_float(cond_sect, "thirst_v")
	thirst_power_v = -sys_ini:r_float(cond_sect, "thirst_power_v")
	thirst_health_v = -sys_ini:r_float(cond_sect, "thirst_health_v")
	thirst_critical_power = sys_ini:r_float(cond_sect, "thirst_critical_power")
	thirst_min_critical_power = sys_ini:r_float(cond_sect, "thirst_min_critical_power")
	thirst_critical_health = sys_ini:r_float(cond_sect, "thirst_critical_health")
	thirst_min_critical_health = sys_ini:r_float(cond_sect, "thirst_min_critical_health")

	local tmp = string.explode( sys_ini:r_string("main_ingame_indicators_thresholds", "thirst"), ",", true)
	for i, v in ipairs(tmp) do
		tIndicatorThresholds[i] = tonumber(v)
	end
	table.insert(tIndicatorThresholds, 1)
end

-- delta - игровые секунды
function update(delta)
	amk.oau_reason="thirst.update"

	if Actor:is_actor_sprinting() then
		delta = delta * 2
	end

	THIRST = math_clamp(THIRST + thirst_v*delta, 0, 1)
--	log("thirst: %s", THIRST)

	if THIRST > thirst_critical_power then
		if Actor.power > thirst_min_critical_power then
			Actor.power = thirst_power_v * (THIRST - thirst_critical_power)/(1 - thirst_critical_power)
		end
	end

	if THIRST > thirst_critical_health then
		if Actor.health > thirst_min_critical_health then
			Actor.health = thirst_health_v * (THIRST - thirst_critical_health)/(1 - thirst_critical_health)
		end
		if not death_timer then
			death_timer = 24*60*60
		elseif death_timer > 0 then
			death_timer = death_timer - delta
		else
			Actor:kill(Actor)
		end
	elseif death_timer then
		death_timer = nil
	end

	this.update_indicator()
end

function update_indicator()
	local n = #tIndicatorThresholds
	for i, v in ipairs(tIndicatorThresholds) do
		if THIRST < v then
			n = i-1
			break
		end
	end
	if current_threshold == n then return end
	current_threshold = n

	local clr
	if n == 0 then
		if get_hud():GetCustomStatic("cs_thirst") ~= nil then
			ui_scroll_indicators.remove_indicator(icon_wnd)
			get_hud():RemoveCustomStatic("cs_thirst")
		end
		icon_wnd = nil
		return
	else
		local mn = tIndicatorThresholds[1]
		local mx = tIndicatorThresholds[#tIndicatorThresholds]
		local k = (tIndicatorThresholds[n] - mn)/(mx - mn)
		clr = GetARGB(
			255,
			math.min( k*510, 255 ),
			math.min( (1-k)*510, 255 ),
			0
		)
	end

	if icon_wnd == nil then
		local cs = get_hud():AddCustomStatic("cs_thirst", true)
		icon_wnd = cs:wnd()
		ui_scroll_indicators.add_indicator(icon_wnd)
	end

	icon_wnd:SetColor(clr)
end

function change_thirst(delta)
	THIRST =  math_clamp(THIRST + delta, 0, 1)
end

function save()
	if THIRST == 1 then THIRST = 0.99999 end
	local v = THIRST + (death_timer and math.ceil(death_timer) or 0)
--	log("[thirst.save] %s", v)
	amk.save_variable("thr", v)
end

function destroy()
	icon_wnd = nil
end

function attach()
	xr_s.subscribe( "net_spawn",   this.init )
	xr_s.subscribe( "pre_save",    this.save )
	xr_s.subscribe( "net_destroy", this.destroy )
end

function test(...)
	thirst_v, thirst_power_v, thirst_health_v = ...
end
