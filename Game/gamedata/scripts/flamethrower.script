-- -*- mode: lua; encoding: windows-1251 -*-
local math_random = math.random

--Функции для квеста на огнемёт.
-- flamethrower.script
local min_fuel = 150
local max_fuel = 300

function remove_spot()
	local sobj=AI:story_object(story_ids.gar_stalker_flame_quest23)
	if sobj then
		level.map_remove_object_spot(sobj.id,"green_location")
	end
	local obj
	for a=1,65534 do
		obj = AI:object(a)
		if obj then
			if obj:section_name()=="trubka" then
				level.map_remove_object_spot(obj.id,"red_location")
				break
			end
		end
	end
end

function good_bye(first_speaker, second_speaker)
	local actor, trader
	if Actor and Actor:id() == first_speaker:id() then
		trader = second_speaker
	else
		trader = first_speaker
	end
	dialogs.relocate_item_section(trader, "af_fireball", "out")
	dialogs.relocate_item_section(trader, "trubka", "out")
	dialogs.relocate_item_section(trader, "gorelka", "out")
	dialogs.relocate_item_section(trader, "manometr", "out")
	inventory.out_items("vodka", 10)
	dialogs.relocate_item_section(trader, "flamethrower_bad", "out")
end

function have_n_items(section,number)
	return inventory.search(section, number)
end

function have_10_vodka()
  return inventory.search("vodka", 10)
end

function have_bablo()
	return Actor:money()>=25000
end

function give_flamethrower_worked(first_speaker, second_speaker)
	local trader
	if Actor and Actor:id() == first_speaker:id() then
		trader = second_speaker
	else
		trader = first_speaker
	end
	dialogs.relocate_item_section(trader, "wpn_flame", "in")
  	dialogs.relocate_money(trader, 25000, "out")
	clear_parts(first_speaker, second_speaker)

	local flame = Actor:object("wpn_flame")
	if flame ~= nil then
		flame:set_ammo_elapsed(max_fuel)
	end	
end

function clear_parts(first_speaker, second_speaker)	
	local actor, trader
	if Actor and Actor:id() == first_speaker:id() then
		actor = first_speaker
		trader = second_speaker
	else
		actor = second_speaker
		trader = first_speaker
	end
	local obj = trader:object("manometr")
	if obj ~= nil then
		del_obj_by_id(obj:id())
	end
	obj = trader:object("trubka")
	if obj ~= nil then
		del_obj_by_id(obj:id())
	end
	obj = trader:object("gorelka")
	if obj ~= nil then
		del_obj_by_id(obj:id())
	end
	obj = trader:object("flamethrower_bad")
	if obj ~= nil then
		del_obj_by_id(obj:id())
	end
	obj = trader:object("af_fireball")
	if obj ~= nil then
		del_obj_by_id(obj:id())
	end
end

function clear_fuel(first_speaker, second_speaker)	
	local trader
	if Actor and Actor:id() == first_speaker:id() then
		trader = second_speaker
	else
		trader = first_speaker
	end
	trader:iterate_inventory( function (dummy,item)
	if item:section() == "amk_ballon" or item:section() == "amk_kanistra" or item:section() == "wpn_flame" then 
	  del_obj_by_id(item:id())
	end
	end, nil)
end

function spawn_parts()
	AI:create_free("manometr", vector():set(-146.01,6.04,-201.16), 91750, 621)
end


function set_metka()
	local obj = AI:create_free("trubka", vector():set(-57.36,22.54,-120.73), 118492, 298)
	amk.add_spot_on_map(obj.id,"red_location","Трубка")
end

function have_money2500(fs, ss)
	return Actor:money() >= 2500
end

function relocate_to_barman(first_speaker, second_speaker)
	dialogs.relocate_item_section(second_speaker, "gorelka", "in")
    dialogs.relocate_money(second_speaker, 2500, "out")
end

function out_antirad(first_speaker, second_speaker)
	inventory.out_items("antirad", 3)
end

function transfer_deneg_blockpost(first_speaker, second_speaker)
    dialogs.relocate_money(second_speaker, 5000, "in")
end

function give_flamethrower(first_speaker, second_speaker)
	dialogs.relocate_item_section(second_speaker, "flamethrower_bad", "in")
end

function have_a_flamethrower_bad(stalker, player)
    return Actor:object ("flamethrower_bad") ~= nil
end

function give_1000(first_speaker, second_speaker)
    dialogs.relocate_money(second_speaker, 1000, "in")
end

function have_a_antirad(stalker, player)
    return inventory.search("antirad", 3)
end

function out_flamethrower(first_speaker, second_speaker)
	dialogs.relocate_item_section(first_speaker, "flamethrower_bad", "out")
    dialogs.relocate_money(second_speaker, 2500, "in")
end

function have_a_gorelka2(stalker, player)
    return inventory.search("gorelka", 1)
end

function have_a_manometr2(stalker, player)
    return inventory.search("manometr", 1)
end

function have_a_trubka2(stalker, player)
    return inventory.search("trubka", 1)
end

function have_a_af_fireball(stalker, player)
    return inventory.search("af_fireball", 1)
end

function have_a_drink()
    if Actor ~= nil and Actor:object("vodka") ~= nil then
		return true
	end
	return false
end

function have_a_fuel()
	return have_a_ballon() and have_a_kanistra()
end

function have_30000()
	if Actor and Actor:money() >= 30000 then
		return true
	else
		return false
	end
end

function have_2000()
	if Actor and Actor:money() >= 2000 then
		return true
	else
		return false
	end
end

function have_a_ballon()
    if Actor ~= nil and Actor:object("amk_ballon") ~= nil then
		return true
	end
	return false
end

function have_a_kanistra()
    if Actor ~= nil and Actor:object("amk_kanistra") ~= nil then
		return true
	end
	return false
end

function have_a_flamethrower()
    if Actor ~= nil and Actor:object("wpn_flame") ~= nil then
		return true
	end
	return false
end

function metka_na_npc()
	local cd = 
		"[logic]\n"..
		"active = walker\n"..
		"[walker]\n"..
		"path_walk = garb_tambovski_path\n"..
		"path_look = garb_tambovski_look\n"..
		"on_info= {+find_815} nil %=flamethrower.tambovski_free%\n"..
		"combat_ignore_cond = always\n"..
		"[smart_terrains]\n"..
		"none = {-find_815}"
	se_stalker.custom_data_on_spawn = cd
	local obj = AI:create("gar_stalker_flame_quest23",vector():set(24.86,0.40,209.75),198510,359)
	local params = {
		custom_data = cd,
		story_id = story_ids.gar_stalker_flame_quest23
	}
	netpk:modify( obj, params, netpk.fState )
	amk.add_spot_on_map(obj.id,'green_location','Лёха Тамбовский')
end

function tambovski_free(actor, npc)
	local obj = AI:object( npc:id() )
	if obj then
		netpk:modify( obj, { custom_data = "" }, netpk.fState )
	end
end


function start_work(first_speaker, second_speaker)
	local gtime = amk.game_minutes()
	amk.save_variable("flame_start", gtime)
	clear_parts(first_speaker, second_speaker)
end

function is_ready(first_speaker, second_speaker)
	local gtime = amk.game_minutes()
	local ftime = amk.load_variable("flame_start", gtime)
	return (gtime - ftime) >= 60*24
end

function not_ready(first_speaker, second_speaker)
	local gtime = amk.game_minutes()
	local ftime = amk.load_variable("flame_start", gtime)
	return (gtime - ftime) < 60*24
end

function clear_ready(first_speaker, second_speaker)
	amk.del_variable("flame_start")
end

function start_reload(first_speaker, second_speaker)
	local trader = (first_speaker:id() == 0 and second_speaker) or first_speaker
	dialogs.relocate_money(trader, 2000, "out")
	dialogs.relocate_item_section(trader, "vodka", "out")	
	dialogs.relocate_item_section(trader, "wpn_flame", "out")	
	local gtime = amk.game_minutes()
	amk.save_variable("flame_reload", gtime + 30)
	dialogs.relocate_item_section(trader, "amk_kanistra", "out")
	dialogs.relocate_item_section(trader, "amk_ballon", "out")
	amk.save_variable("flame_reload_count", max_fuel)
--	calc_reload(Actor, trader)
	clear_flame(Actor)
end

function start_find_and_reload(first_speaker, second_speaker)
	local trader = (first_speaker:id() == 0 and second_speaker) or first_speaker
	dialogs.relocate_money(trader, 30000, "out")
	dialogs.relocate_item_section(trader, "vodka", "out")	
	dialogs.relocate_item_section(trader, "wpn_flame", "out")	
	local gtime = amk.game_minutes()
	amk.save_variable("flame_reload", gtime + math_random(12, 24) * 60)
	amk.save_variable("flame_reload_count", max_fuel)
	clear_flame(Actor)
end

function is_reload_ready(first_speaker, second_speaker)
	local gtime = amk.game_minutes()
	return gtime > amk.load_variable("flame_reload", gtime)
end

function is_reload_not_ready(first_speaker, second_speaker)
	local gtime = amk.game_minutes()
	return gtime <=amk.load_variable("flame_reload", gtime)
end

function is_reload_started(first_speaker, second_speaker)
	return amk.load_variable("flame_reload", 0) > 0
end

function finish_reload(first_speaker, second_speaker)
	reload(first_speaker, second_speaker)
	clear_fuel(first_speaker, second_speaker)
	clear_reload(first_speaker, second_speaker)
end

function clear_reload(first_speaker, second_speaker)
	amk.del_variable("flame_reload")
	amk.del_variable("flame_reload_count")
end

function calc_reload(actor, trader)
	if have_a_ballon() and have_a_kanistra() then
		local cnt_kanistra = inventory.get_items_count("amk_kanistra")
		local cnt_ballon = inventory.get_items_count("amk_ballon")
		
		local mm = math.min(cnt_kanistra, cnt_ballon)
		if mm == 1 then
			dialogs.relocate_item_section(trader, "amk_kanistra", "out")
			dialogs.relocate_item_section(trader, "amk_ballon", "out")
			--rpm в конфиге 300, значит полминуты - 150, а минута 300.
			amk.save_variable("flame_reload_count", min_fuel)
		elseif mm >= 2 then
			inventory.out_items("amk_kanistra", 2)
			inventory.out_items("amk_ballon", 2)
			amk.save_variable("flame_reload_count", max_fuel)
		end
	end
end

function reload(first_speaker, second_speaker)
	local actor, trader
	if Actor and Actor:id() == first_speaker:id() then
		actor = first_speaker
		trader = second_speaker
	else
		actor = second_speaker
		trader = first_speaker
	end
	dialogs.relocate_item_section(trader, "wpn_flame", "in")
	start_real_timer("set_flame_ammo", 0.2, amk.load_variable("flame_reload_count", 0))
end

function set_flame_ammo(ammo)
	local flame = Actor:object("wpn_flame")
	if flame ~= nil then
		flame:set_ammo_elapsed(ammo)
	end
end

function clear_flame(person)
	if person and person:object("wpn_flame") then
		local sobj = AI:object(person:object("wpn_flame"):id())
		if sobj then AI:release(sobj, true) end
	end
end

function set_ammo(first_speaker, second_speaker)
	local flame = Actor:object("wpn_flame")
	if flame ~= nil then
		local ammo = amk.load_variable("flame_reload_count", 0)
		flame:set_ammo_elapsed(ammo)
	end
	amk.del_variable("flame_reload_count")
end
