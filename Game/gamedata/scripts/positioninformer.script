-- -*- mode: lua; encoding: windows-1251 -*-
local num_point = 0

local file_path = getFS():update_path("$logs$", "position.log")
local function tolog(text)
	if #text>0 then
		local file = io.open(file_path, "a")
		file:write(text, "\n")
		file:close(file)
	end
end

class "pi" (CUIScriptWnd)

function pi:__init(owner) super()
	self.owner = owner
	self:InitControls()
	self:InitCallBacks()
end

function pi:__finalize() end

function pi:InitControls()
	self:Init(30,30,600,530)

	local xml = CScriptXmlInit()
	xml:ParseFile("ui_position_informer.xml")

	xml:InitStatic("background", self)
	xml:Init3tButton("caption1", self)
	xml:Init3tButton("caption2", self)
	self:Register(xml:Init3tButton("btn_quit", self),"btn_q")
	self:Register(xml:Init3tButton("btn_save", self),"btn_s")
	self.edit_posname = xml:InitEditBox("edit_box", self)

	xml:InitStatic("gamevertexid", self)
	self.st_game_vertex = xml:InitStatic("gamevertexid_box", self)
	xml:InitStatic("levelname", self)
	self.st_level_name = xml:InitStatic("levelname_box", 	self)

	self:Register(xml:Init3tButton("btn_show", self),"btn_show")

	xml:InitStatic("levelvertexid", self)
	self.st_level_vertex = xml:InitStatic("levelvertexid_box", self)
	xml:InitStatic("position", self)
	self.st_pos_x = xml:InitStatic("positionX", self)
	self.st_pos_y = xml:InitStatic("positionY", self)
	self.st_pos_z = xml:InitStatic("positionZ", self)
	xml:InitStatic("direction", self)
	self.st_dir_x = xml:InitStatic("directionX", self)
	self.st_dir_y = xml:InitStatic("directionY", self)
	self.st_dir_z = xml:InitStatic("directionZ", self)
	xml:InitStatic("caption3", self)

	self.check_capmos = xml:InitCheck("check_campos", self)

	self:Register(xml:Init3tButton("btn_clear_log", self),"btn_clear")
end

function pi:InitCallBacks()
	self:AddCallbackEx("btn_q", ui_events.BUTTON_CLICKED, self.on_quit)
	self:AddCallbackEx("btn_s", ui_events.BUTTON_CLICKED, self.getposinfo)
	self:AddCallbackEx("btn_show", ui_events.BUTTON_CLICKED, self.showposinfo)
	self:AddCallbackEx("btn_clear", ui_events.BUTTON_CLICKED, self.clear_log)
end

function pi:clear_log()
	local file = io.open(file_path, "w")
	file:write("")
	file:close(file)
end

function pi:OnKeyboard(dik, keyboard_action)
	CUIScriptWnd.OnKeyboard(self,dik,keyboard_action)

	check_input_language(self, dik, keyboard_action)

	if keyboard_action == ui_events.WINDOW_KEY_PRESSED then
		if dik == DIK_keys.DIK_ESCAPE then
			self:on_quit()
		elseif dik == DIK_keys.DIK_RETURN then
			self:getposinfo()
		end
	end
	return true
end

function pi:showposinfo()
	self.level_name = level.name()
	self.game_vertex = Actor:game_vertex_id()
	self.level_vertex = Actor:level_vertex_id()
	if self.check_capmos:GetCheck() then
		self.pos = device().cam_pos
		self.dir = device().cam_dir
	else
		self.pos = Actor:position()
		self.dir = Actor:direction()
	end

	self.st_level_name:SetText(self.level_name)
	self.st_game_vertex:SetText(self.game_vertex)
	self.st_level_vertex:SetText(self.level_vertex)
	if Actor:position():distance_to( level.vertex_position(self.level_vertex) ) > 0.5 then
		self.st_level_vertex:SetTextColor(255,255,50,50)
	else
		self.st_level_vertex:SetTextColor(255,50,255,50)
	end
	self.st_pos_x:SetText(self.pos.x)
	self.st_pos_y:SetText(self.pos.y)
	self.st_pos_z:SetText(self.pos.z)
	self.st_dir_x:SetText(self.dir.x)
	self.st_dir_y:SetText(self.dir.y)
	self.st_dir_z:SetText(self.dir.z)
end

function pi:getposinfo()
	local posname = self.edit_posname:GetText()
	if #posname == 0 then
		posname = "point_"..string.format("%03d", num_point)
		num_point = num_point + 1
		self.edit_posname:SetText(posname)
	end
	if posname == self.posname then
		return
	end
	self.posname = posname

	self:showposinfo()

	-- Формат вывода координат поправлен для удобства вставки в код
	local text = "posName = %s\n"..
		-- "vector():set(%s,%s,%s), %s, %s)\n"..
		-- "{%.2f,%.2f,%.2f},\n"..
		"position = %s,%s,%s\n"..
		"game_vertex_id = %s\n"..
		"level_vertex_id = %s\n"..
		-- "directiion = %s,%s,%s\n"..
		"rotation = %s\n"..
		"levelName = %s\n"
	tolog(
		string.format(
			text,
			self.posname,

			self.pos.x, self.pos.y, self.pos.z,
			self.game_vertex,
			self.level_vertex,
			-- self.dir.x, self.dir.y, self.dir.z,
			self.dir:getH(),
			self.level_name
		)
	)
end


function pi:on_quit()
	self:GetHolder():start_stop_menu (self.owner, true)
	self:GetHolder():start_stop_menu (self,true)
	self.owner:Show	(true)
	self.owner:ReturnToGame()
end
