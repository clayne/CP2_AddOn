-- -*- mode: lua; encoding: windows-1251 -*-
local med_data = {
	health    = { offset = 220, line = "eat_health",       delta = 0.00002,  func = function( v ) Actor.health              = v   end, it = true  },
	power     = { offset = 224, line = "eat_power",        delta = 0.00005,  func = function( v ) Actor.power               = v   end, it = true  },
	bleeding  = { offset = 240, line = "wounds_heal_perc", delta = 0.00003,  func = function( v ) Actor:heal_wounds         ( v ) end, it = true  },
	satiety   = { offset = 228, line = "eat_satiety",      delta = 0.000015, func = function( v ) Actor.satiety             = v   end, it = true  },
	radiation = { offset = 232, line = "eat_radiation",    delta = 0.0003,   func = function( v ) arc_radiation.use_antirad ( v ) end, it = false },
	psy       = { offset = nil, line = "eat_psy_health",   delta = 0.00003,  func = function( v ) Actor.psy_health          = v   end, it = true  },
	thirst    = { offset = nil, line = "eat_thirst",       delta = 0.00002,  func = function( v ) thirst.change_thirst      ( v ) end, it = false }
}
local medkits = {}
local base_time_factor = sys_ini:r_u32("alife", "time_factor")

slow_shift = false

function on_before_use_item( item )
	if slow_shift then
		slow_shift = false
		return
	end

	local section = item:section()
	local t = medkits[section]
	if t == nil then
		medkits[section] = {}
		t = medkits[section]
		local n = 0
		for k, v in pairs( med_data ) do
			n = sys_ini:r_float_ex( section, v.line, 0 )
			if n ~= 0 then
				t[k] = n
			end
		end
		if table.size(t) == 0 then
			medkits[section] = false
		end
	end

	if not t then return end

	if section == "energy_drink" then
		this.before_use_nrg( item )
	elseif section == "vodka" then
		amk_alcohol.drink_vodka_chunk( item )
	end

	for k, v in pairs( t ) do
		if med_data[k].offset then
			item:set_inventory_item_float( nil, 0.0, med_data[k].offset )
		end
	--	log( "process healing: %s = %s", k, v )
		this.start_healing( k, v )
	end
end
-----------------------------------------------------------------------------------------------
local energy_drink_power = sys_ini:r_float( "energy_drink", "eat_power" )
local energy_drink_max_power = sys_ini:r_float( "energy_drink", "eat_max_power" )

function before_use_nrg( item )
	local n = amk.load_variable( "gg_need_sleep_nrg", 0 )
	if n < 3 then
		medkits["energy_drink"].power = energy_drink_power
		amk.save_variable( "gg_need_sleep_nrg", n + 1 )
		local v = amk.load_variable( "gg_need_sleep", 0 ) - 30 + n*10
		amk.save_variable( "gg_need_sleep", math.max( v, 0 ) ) 
		sleep_manager.test_sleep_pp( v )
		if has_timer( "block_sleep_menu" ) then
			remove_timer( "block_sleep_menu")
		else
			xr_s.subscribe( "update", this.add_power_nrg )
		end
		start_game_timer( "block_sleep_menu", 0, 0, ( 4-n ) *30 )
	else
		medkits["energy_drink"].power = energy_drink_power/( n - 1 )
		item:set_inventory_item_float( nil, energy_drink_max_power/( n - 1 ), 236 )
		if n == 3 then
			news_manager.send_tip("nrg_dont_work", 8, "str", 10000)
		end
	end
end

local upd_time = 0
local add_power = 0.000013
function add_power_nrg( delta )
	if upd_time < 100 then
		upd_time = upd_time + delta
		return
	end

	Actor.power = add_power*upd_time
	upd_time = 0
end
function add_power_nrg_end()
	xr_s.unsubscribe( "update", this.add_power_nrg )
	Actor.power = -0.9 * Actor.power
	level.add_pp_effector( "alcohol.ppe", 1100, false )
end
-----------------------------------------------------------------------------------------------
local med_params = {}

function start_healing( var, val )
	if table.size( med_params ) == 0 then
		xr_s.subscribe( "update", this.update_med_params )
	end
	med_params[var] = ( med_params[var] or 0 ) + val
	if game_options.RestoreIndicators then
		ui_scroll_indicators.add_restore_indicator( var, med_data[var].it == (med_params[var] > 0) )
	end
end

local last_gtime = nil
function update_med_params( delta )
	if last_gtime == nil then
		last_gtime = game_time_ms
		return
	end

	local delta_time = (game_time_ms - last_gtime)/base_time_factor
	last_gtime = game_time_ms

	local dec, fdelta
	for k, v in pairs( med_params ) do
		if v then
			local t = med_data[k]
			fdelta = delta_time * t.delta
			dec = v < 0
			if dec then fdelta = -fdelta end
			t.func( fdelta )
			v = v - fdelta

			if dec ~= ( v < 0 ) then
				med_params[k] = false
				ui_scroll_indicators.remove_restore_indicator(k)
			else
				med_params[k] = v
				if game_options.RestoreIndicators then
					if math.abs(v/t.delta) < 4000 then
						ui_scroll_indicators.flashing_indicator(k)
					end
				end
			end
		end
	end

	for k, v in pairs( med_params ) do
		if v then return end
	end

	med_params = {}
	last_gtime = nil
	xr_s.unsubscribe( "update", this.update_med_params )
end

function healing_is_active(k)
	return not (not med_params[k])
end
-----------------------------------------------------------------------------------------------
function save()
	local t = {}
	for k, v in pairs( med_params ) do
		if v then
			t[k] = v
		end
	end
	amk.save_table( "slow_med", t )
end

function load()
	local t = amk.load_table( "slow_med" )
	for k, v in pairs( t ) do
		start_healing( k, v )
	end
	if has_timer("block_sleep_menu") then
		xr_s.subscribe("update", slow_med.add_power_nrg)
	end
end

function attach()
	xr_s.subscribe( "pre_save",  this.save )
	xr_s.subscribe( "net_spawn", this.load )
end
