-- -*- mode: lua; encoding: windows-1251 -*-
-- порядок в массиве имеет значение
local monsters = {
	{ sect = "sucker",		bones = { 14 }, part_rnd = "mutant_krovosos_red_jaw", rnd = 0.018 },
	{ sect = "krovosos",	bones = { 14 }, part_rnd = "mutant_krovosos_red_jaw", rnd = 0.018 },

	{ sect = "boar",		bones = { 39,41,34,36,3,5,8,10 } },
	{ sect = "fire_flesh",	bones = { 39,41,34,36,3,5,8,10 } },

	{ sect = "flesh",		bones = { 14 } },

	{ sect = "burer",		bones = { 18,19,24,31,32,37 }, part_rnd = "mutant_burer_red_hand", rnd = 0.015 },

	{ sect = "controller_swamp", bones = { 14 } },
	{ sect = "controller",	bones = { 24,25,40,41 }, part_rnd = "mozg", rnd = 0.01 },
	{ sect = "kontrik_red_mozg", bones = { 14 } },
	{ sect = "kontrik",		bones = { 24,25,40,41 }, part_rnd = "mozg", rnd = 0.01 },
	{ sect = "psyonik",		bones = { 24,25,40,41 }, part_rnd = "red_mozg", rnd = 0.007 },

	{ sect = "pseudodog",	bones = { 32 } },
	{ sect = "psy_dog",		bones = { 32 } },
	{ sect = "ohota_dog",	bones = { 32 } },
	{ sect = "dog",			bones = { 30,31 } },

	{ sect = "deathclaw",	bones = { 45 } },
	{ sect = "kogot",		bones = { 45 } },

	{ sect = "fracture",	bones = { 24,23 } },

	{ sect = "gigant",		bones = { 44,52 } },

	{ sect = "himera",		bones = { 4,9,23,33 } },
	{ sect = "wolf",		bones = { 4,9,23,33 } },

	{ sect = "snork",		bones = { 2,3,4,7,8,9 } },

	{ sect = "tushkan",		bones = { 25 } },

	{ sect = "vypolzen",	bones = { 1, 2 } },

	{ sect = "scelet",		bones = { 14 } },
	{ sect = "vodjanoj",	bones = { 18,19,20,30,31,32 } },
	{ sect = "ghoul",		bones = { 18,19,20,30,31,32 } },
	{ sect = "zombie_babka",	bones = { 10,11 } },
	{ sect = "zombie_immortal",	bones = { 10,11 } },
	{ sect = "zombi",		bones = { 18,19,20,30,31,32 } },

	{ sect = "tarakan",		bones = { 35 } },

	{ sect = "carlic",		bones = { 24,25,26,29,32,35,38,43,44,45,48,51,54,57 } },
	{ sect = "karlito",		bones = { 22,23,24,25,26,27,28,29,30,31,32,33,34,35,38,39,40,41,42,43,44,45,46,47,48,49,50,51 } },

	{ sect = "kikimora",	bones = { 12 } },
	{ sect = "molerat",		bones = { 12 } },
	{ sect = "rat",			bones = { 10 } },
	{ sect = "volkodav",	bones = { 12 } },

	{ sect = "zanoza",		bones = { 2,3,4,5,7,8,9,10,18,19,20,23,24,25 } },

	{ sect = "spider",		bones = { 51 } },

	{ sect = "new_hell",	bones = { 3,7,36,50 } },

	{ sect = "bibli",		bones = { 19,20,21,22,23,24,25,26,27,28,31,32,33,34,35,36,37,38,39,40 } },

	{ sect = "polter",		bones = { 4 } },

	{ sect = "cat",			bones = { 28,29 } },

	{ sect = "rotan",		bones = { 0 } }
}

local del_corpse = {
	ohota_polter1 = true,
	ohota_polter3 = true,
	ohota_polter_flame = true,
	m_poltergeist_normal_flame = true,
	m_poltergeist_strong_flame = true
}

local unique_names = {
	["marsh_controller"]	= "red_mozg",
	["rad_red_burer1"]		= "mutant_burer_red_hand",
	["rad_red_krovosos1"]	= "mutant_krovosos_red_jaw",
	["mil_red_burer1"]		= "mutant_burer_red_hand",
	["mil_red_krovosos1"]	= "mutant_krovosos_red_jaw",
	["agr_red_burer1"]		= "mutant_burer_red_hand",
	["agr_red_krovosos1"]	= "mutant_krovosos_red_jaw",
	["val_red_burer1"]		= "mutant_burer_red_hand",
	["val_red_krovosos1"]	= "mutant_krovosos_red_jaw"
}
	
	
local tbl_hit = {}

local rnd_hit_prob = 0.03

local is_debug = false

function on_hit(obj, bone_index, amount)
--	if amount <= 0 then return false end

	local sect = obj:section()
	if del_corpse[sect] then return false end

	local id = obj:id()
	local th = tbl_hit[id]
	if th == nil then
		for i, t in ipairs(monsters) do
			if string.find(sect,t.sect) then
				th = {}
				th.hit = 0
				th.part = sys_ini:r_string(sect, "Spawn_Inventory_Item_Section")
				if t.part_rnd and t.rnd > math.random() then
					unique_names[obj:name()] = t.part_rnd
				end
				th.bones = t.bones
				tbl_hit[id] = th
				break
			end
		end
		if th == nil then
			tbl_hit[id] = false 
			return false
		end
	elseif th == false then
		return false
	end

	local checked = false
	for i, v in ipairs(th.bones) do
		if v == bone_index then
			th.hit = th.hit + amount
			if is_debug then
				log("# [%s] hit on part of [%s:%d] , bone_index = %d, amount = %s, total: %s",
					script_name(), sect, id, bone_index, amount, th.hit)
			end
			checked = true
			break
		end
	end

	if checked == false
		and amount > 0
		and math.random() < rnd_hit_prob
	then
		th.hit = th.hit + amount/math.random(5,8)
		if is_debug then
			log("# [%s]  random hit on part of [%s:%d] , bone_index = %d, amount = %s, total: %s",
				script_name(), sect, id, bone_index, amount, th.hit)
		end
	end

	return checked
end

function on_death(obj)
	local id = obj:id()
	if AI:object(id) == nil then return end

	if del_corpse[obj:section()] then		-- удаляем тушку
		AI:release( AI:object(id), true )
		return
	end

	if tbl_hit[id] == nil then		-- убили с одного попадания, сымитируем хит
		on_hit(obj, math.random(0,51), math.random())
	end

	local th = tbl_hit[id]
	if not th then return end

	local part = obj:object(th.part)
	local spawn_part = th.part
	local spawn_unique = false

	local obj_name = obj:name()
	if unique_names[obj_name] then
		spawn_part = unique_names[obj_name]
		spawn_unique = true
		if is_debug then
			log("# [%s]: spawn unique monster part '%s' -> '%s'", script_name(), spawn_part, obj_name)
		end
	end

	if part or spawn_unique then
		local cond = math.clamp(1-th.hit, 0.01, 1)
		if spawn_unique then
			this.remove_item(part)
			this.spawn_part_in_inv(obj, spawn_part, cond)
		else
			local se_obj = AI:object(part:id())
			netpk:modify(se_obj, {condition = cond}, netpk.fState)
			part:set_condition(cond)
		end
	end

	tbl_hit[id] = nil
end

function remove_item(item)
	if item==nil then return end
	local sobj = AI:object(item:id())
	if sobj then AI:release(sobj, true) end
end

local function fix_spawn_item_in_inv(tbl, id, item)
    tbl.npc:transfer_item(item, tbl.npc)
	item:set_condition(tbl.cond)
end

function spawn_part_in_inv(npc, part, condition)
	local item = AI:create(part, 
		npc:position(),
		npc:level_vertex_id(),  
		npc:game_vertex_id(),
		npc:id())

	netpk:modify(item, {condition = condition}, netpk.fState)
	level.client_spawn_manager():add(item.id, -1, fix_spawn_item_in_inv, {npc = npc, cond = condition})
end

