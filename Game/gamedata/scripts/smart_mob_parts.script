-- -*- mode: lua; encoding: windows-1251 -*-
-- порядок в массиве имеет значение
local monsters = {
	{ sect = "sucker",		bones = { {14} }, part = "mutant_krovosos_jaw", part_rnd = "mutant_krovosos_red_jaw", rnd = 0.018 },
	{ sect = "krovosos",	bones = { {14} }, part = "mutant_krovosos_jaw" },
	
	{ sect = "boar",		bones = { {39,41}, {34,36}, {3,5}, {8,10} }, part = "mutant_boar_leg" },
	{ sect = "fire_flesh",	bones = { {39,41}, {34,36}, {3,5}, {8,10} }, part = "mutant_boar_leg" },
	
	{ sect = "flesh",		bones = { {14} }, part = "mutant_flesh_eye" },
	
	{ sect = "burer",		bones = { {18,19,24}, {31,32,37} }, part = "mutant_burer_hand", part_rnd = "mutant_burer_red_hand", rnd = 0.015 },
	
	{ sect = "controller",	bones = { {24,25}, {40,41} }, part = "mutant_hand_kontroler", part_rnd = "mozg", rnd = 0.012 },
	{ sect = "kontrik_red_mozg", bones = { {14} }, part = "red_mozg" },
	{ sect = "kontrik",		bones = { {24,25}, {40,41} }, part = "mutant_hand_kontroler" },
	{ sect = "psyonik",		bones = { {24,25}, {40,41} }, part = "mutant_hand_kontroler", part_rnd = "red_mozg", rnd = 0.007 },
	
	{ sect = "pseudodog",	bones = { {32} }, part = "mutant_psevdodog_tail" },
	{ sect = "psy_dog",		bones = { {32} }, part = "mutant_psevdodog_tail" },
	{ sect = "ohota_dog",	bones = { {32} }, part = "mutant_psevdodog_tail" },
	{ sect = "dog",			bones = { {30,31} }, part = "mutant_dog_tail" },
	
	{ sect = "deathclaw",	bones = { {45}, {45} }, part = "mutant_deathclaw_antler" },
	{ sect = "kogot",		bones = { {45}, {45} }, part = "mutant_deathclaw_antler" },
	
	{ sect = "fracture",	bones = { {24,23} }, part = "mutant_fracture_hand" },
	
	{ sect = "gigant",		bones = { {44}, {52} }, part = "mutant_psevdogigant_hand" },
	
	{ sect = "himera",		bones = { {4}, {9}, {23}, {33} }, part = "mutant_chimera_kogot" },
	{ sect = "wolf",		bones = { {4}, {9}, {23}, {33} }, part = "mutant_chimera_kogot" },
	
	{ sect = "snork",		bones = { {2,3,4}, {7,8,9} }, part = "mutant_snork_leg" },
	
	{ sect = "tushkan",		bones = { {25} }, part = "mutant_face_tushkano" },
	
	{ sect = "vypolzen",	bones = { {1,2} }, part = "mutant_vypolzen_hrebet" },
	
--	{ sect = "scelet",		bones = { {19,20}, {31,32} }, part = "mutant_zombie_hand" },
	{ sect = "vodjanoj",	bones = { {18,19,20}, {30,31,32} }, part = "mutant_zombie_hand" },
	{ sect = "ghoul",		bones = { {18,19,20}, {30,31,32} }, part = "mutant_zombie_hand" },
	{ sect = "zombie_plague",	bones = { {18,19,20}, {30,31,32} }, part = "mutant_plague_hand" },
	{ sect = "zombie_babka",	bones = { {10,11} }, {10,11}, part = "mutant_zombie_teeth" },
	{ sect = "zombie_immortal",	bones = { {10,11} }, {10,11}, part = "mutant_zombie_teeth" },
	{ sect = "zombi",		bones = { {18,19,20}, {30,31,32} }, part = "mutant_zombie_hand" },
	
	{ sect = "tarakan_strong",	bones = { {35} }, part = "part_tarakan_strong" },
	{ sect = "tarakan",		bones = { {35} }, part = "part_tarakan" },
	
	{ sect = "carlic",		bones = { {24,25,26,29,32,35,38}, {43,44,45,48,51,54,57} }, part = "mutant_carlic_hand" },
	{ sect = "karlito",		bones = { {22,23,24,25,26,27,28,29,30,31,32,33,34,35}, {38,39,40,41,42,43,44,45,46,47,48,49,50,51} }, part = "mutant_carlic_hand" },
	
	{ sect = "kikimora",	bones = { {12} }, part = "mutant_spleen_rat" },
	{ sect = "molerat",		bones = { {12} }, part = "mutant_spleen_rat" },
	{ sect = "rat",			bones = { {10} }, part = "mutant_spleen_rat" },
	{ sect = "volkodav",	bones = { {12} }, part = "mutant_spleen_rat" },
	
	{ sect = "zanoza",		bones = { {2,3,4,5}, {7,8,9,10}, {18,19,20}, {23,24,25} }, part = "mutant_zanoza_leg" },
	
	{ sect = "spider",		bones = { {51} }, part = "mutant_spider_gland" },
	
	{ sect = "new_hell",	bones = { {3}, {7}, {36}, {50} }, part = "mutant_raptor_kogot" },
	
	{ sect = "bibli",		bones = { {19,20,21,22,23,24,25,26,27,28}, {31,32,33,34,35,36,37,38,39,40} }, part = "part_digitis_biblio" },
	
	{ sect = "polter",		bones = { {4}, {4} }, part = "mutant_poltergeist_glas" },
	
	{ sect = "cat",			bones = { {28,29} }, part= "mutant_tail_cat" },
	
	{ sect = "rotan",		bones = { {0} }, part = "mutant_rotan_heart" }
}

local del_corpse = {
	ohota_polter1 = true,
	ohota_polter3 = true,
	ohota_polter_flame = true,
	m_poltergeist_normal_flame = true,
	m_poltergeist_strong_flame = true
}

local unique_names = {
	["marsh_controller"]	= "red_mozg",
	["rad_red_burer1"]		= "mutant_burer_red_hand",
	["rad_red_krovosos1"]	= "mutant_krovosos_red_jaw",
	["mil_red_burer1"]		= "mutant_burer_red_hand",
	["mil_red_krovosos1"]	= "mutant_krovosos_red_jaw",
	["agr_red_burer1"]		= "mutant_burer_red_hand",
	["agr_red_krovosos1"]	= "mutant_krovosos_red_jaw",
	["val_red_burer1"]		= "mutant_burer_red_hand",
	["val_red_krovosos1"]	= "mutant_krovosos_red_jaw"
}
	
	
local tbl_hit = {}

local rnd_hit_prob = 0.03

local is_debug = false

function on_hit(obj, bone_index, amount)
--	if amount <= 0 then return false end

	local sect = obj:section()
	if del_corpse[sect] then return false end

	local id = obj:id()
	local th = tbl_hit[id]
	if th == nil then
		for i, t in ipairs(monsters) do
			if string.find(sect,t.sect) then
				th = {}
				th.hits = {}
			--	th.part = t.part
				th.part = sys_ini:r_string(sect, "Spawn_Inventory_Item_Section")
				if t.part_rnd and t.rnd > math.random() then
					unique_names[obj:name()] = t.part_rnd
				end
				th.bones = t.bones
				for i = 1, #th.bones do
					th.hits[i] = 0
				end
				tbl_hit[id] = th
				break
			end
		end
		if th == nil then
			tbl_hit[id] = false 
			return false
		end
	elseif th == false then
		return false
	end

	local checked = false
	for i, v in ipairs(th.bones) do
		for ii, vv in ipairs (v) do
			if vv == bone_index then
				th.hits[i] = th.hits[i] + amount
				if is_debug then
					log("# [%s] hit on part of [%s:%d] , bone_index = %d, amount = %s, total: %s",
						script_name(), sect, id, bone_index, amount, th.hits[i])
				end
				checked = true
				break
			end
		end
		if checked then break end
	end

	if checked == false
		and amount > 0
		and math.random() < rnd_hit_prob
	then
		local i = math.random(#th.hits)
		th.hits[i] = th.hits[i] + amount/7
		if is_debug then
			log("# [%s]  random hit on part of [%s:%d] , bone_index = %d, amount = %s, total: %s",
				script_name(), sect, id, bone_index, amount, th.hits[i])
		end
	end

	return checked
end

function on_death(obj)
	local id = obj:id()
	if AI:object(id) == nil then return end

	if del_corpse[obj:section()] then		-- удаляем тушку
		AI:release( AI:object(id), true )
		return
	end

	if tbl_hit[id] == nil then		-- убили с одного попадания, сымитируем хит
		on_hit(obj, math.random(0,51), math.random())
	end

	local th = tbl_hit[id]
	if not th then return end

	local part = obj:object(th.part)
	local spawn_part = th.part
	local spawn_unique = false

	local obj_name = obj:name()
	if unique_names[obj_name] then
		spawn_part = unique_names[obj_name]
		spawn_unique = true
		if is_debug then
			log("# [%s]: spawn unique monster part '%s' -> '%s'", script_name(), spawn_part, obj_name)
		end
		--Actor:give_info_portion(obj_name.."_dead")	-- эти инфо нигде, кроме спавна красных запчастей, не нужны - отключим
	end

--	if game_options.RareMonsterParts or spawn_unique then
		if part or spawn_unique then
			local cond = 0
			for i, j in pairs(th.hits) do
				cond = cond + j
			end
			cond = math.clamp(1-cond, 0.01, 1)
			if spawn_unique then
				this.remove_item(part)
				this.spawn_part_in_inv(obj, spawn_part, cond)
			else
				local se_obj = AI:object(part:id())
				netpk:modify(se_obj, {condition = cond}, netpk.fState)
				part:set_condition(cond)
			end
		end
	-- else		-- убираем движковую, спавним свои запчасти
		-- local parts_cond = {}
		-- for i, j in pairs(th.hits) do
			-- if j < 1 then	-- if total quantity of hit more than 1 part will not be created
				-- table.insert(parts_cond, 1 - j)
			-- end
		-- end
		-- this.remove_item(part)
		-- for i, cond in ipairs(parts_cond) do
			-- this.spawn_part_in_inv(obj, spawn_part, cond)
		-- end
	-- end

	tbl_hit[id] = nil
end

function remove_item(item)
	if item==nil then return end
	local sobj = AI:object(item:id())
	if sobj then AI:release(sobj, true) end
end

local function fix_spawn_item_in_inv(tbl, id, item)
    tbl.npc:transfer_item(item, tbl.npc)
	item:set_condition(tbl.cond)
end

function spawn_part_in_inv(npc, part, condition)
	local item = AI:create(part, 
		npc:position(),
		npc:level_vertex_id(),  
		npc:game_vertex_id(),
		npc:id())

	netpk:modify(item, {condition = condition}, netpk.fState)
	level.client_spawn_manager():add(item.id, -1, fix_spawn_item_in_inv, {npc = npc, cond = condition})
end

