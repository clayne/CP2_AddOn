-- -*- mode: lua; encoding: windows-1251 -*-
local hud_name = game_options.CurrentHUD
local def_hud_name = "pda_script"
local af_panel = game_options.ArtPanel

local t_clock = {}
local t_rad = {}

local p_width = 0
local saved_width = -1
local new_width, cs_rad, cs_rad_back
local hud = nil

function update_rad_scale( f )
	cs_rad_back = hud:GetCustomStatic( "hud_rad_back" )
	cs_rad = hud:GetCustomStatic( "hud_rad_level" )

	if not f then
		if cs_rad_back then
			hud:RemoveCustomStatic( "hud_rad_back" )
			cs_rad_back = nil
		end
		if cs_rad then
			hud:RemoveCustomStatic( "hud_rad_level" )
			cs_rad = nil
		end
		return
	end

	if cs_rad_back == nil then
		cs_rad_back = hud:AddCustomStatic( "hud_rad_back", true )
		local w = cs_rad_back:wnd()
		w:Init( unpack(t_rad.back) )
		w:Show(true)
	end
	if cs_rad == nil then
		cs_rad = hud:AddCustomStatic( "hud_rad_level", true )
		local w = cs_rad:wnd()
		w:Init( unpack(t_rad.scale) )
		w:Show(true)
		w:SetWidth( 0 )
		p_width = t_rad.scale[3]
	end

	new_width = p_width * math.min(arc_radiation.RAD_DOSE / arc_radiation.DOSE_DEADLY, 1)
	if saved_width ~= new_width then
		cs_rad:wnd():SetWidth( new_width )
		saved_width = new_width
	end
end

function show_time( f )
    local cs = hud:GetCustomStatic( "hud_show_time" )
	if f then
		if cs == nil then
			cs = hud:AddCustomStatic( "hud_show_time", true )
			local w = cs:wnd()
			if is_16_9_mode() and t_clock.pos_16 then
				w:Init( unpack(t_clock.pos_16) )
			else
				w:Init( unpack(t_clock.pos) )
			end
			w:SetTextColor( unpack( t_clock.color ) )
		end
		cs:wnd():SetText( string.format( "%02d:%02d", level.get_time_hours(), level.get_time_minutes() ) )
	else
		if cs then
			hud:RemoveCustomStatic( "hud_show_time" )
		end
    end
end

function update( delta )
	amk.oau_watchdog = 91999
	amk.oau_reason="ui_hud_control.update"
	local bShow = not scopeUsed

	if t_clock.enabled then
		show_time( bShow )
	end

	if t_rad.enabled then
		bShow = bShow and arc_inventory.IsRadDetected()
		update_rad_scale( bShow )
	end
end

function reload()
	if t_rad.enabled then
		update_rad_scale( false )
	end
	if t_clock.enabled then
		show_time( false )
	end
end

function table2number( t )
	for i = 1, #t do
		t[i] = tonumber( t[i] )
	end
	return t
end

function init_hud()
	check_need_update_files()
	hud = get_hud()
end

function init()
	local ini = ini_file( "misc\\ui_huds.ltx" )
	hud_name = game_options.CurrentHUD
	if not ini:section_exist( hud_name ) then
		abort( "[%s]: current hud [%s] has no settings in 'ui_huds.ltx'", script_name(), hud_name )
		return
	end

	local v = table2number( ini:r_list( hud_name, "dosimeter_pos" ) )
	arc_ui_dosimeter.set_dosimeter_pos( unpack(v) )

	local i = ini:r_u32( hud_name, "add_indicators" )

	t_clock = {}
	t_clock.enabled = bit_and( i, 1 ) ~= 0
	if t_clock.enabled then
		t_clock.pos = table2number( ini:r_list( hud_name, "clock_pos" ) )
		if ini:line_exist( hud_name, "clock_pos_16" ) then
			t_clock.pos_16 = table2number( ini:r_list( hud_name, "clock_pos_16" ) )
		end
		t_clock.color = table2number( ini:r_list( hud_name, "clock_color" ) )
	end

	t_rad = {}
	t_rad.enabled = bit_and( i, 2 ) ~= 0
	if t_rad.enabled then
		t_rad.back = table2number( ini:r_list( hud_name, "rad_back_pos" ) )
		t_rad.scale = table2number( ini:r_list( hud_name, "rad_pos" ) )
	end

	if ini:line_exist( hud_name, "scroll_interval" ) then
		ui_scroll_indicators.set_vert_interval( ini:r_float( hud_name, "scroll_interval" ) )
	end
end

function check_need_update_files()
	local fs = getFS()
	local ex = fs:exist("$game_config$", "ui\\maingame.xml")
	local need_update = false
	if ex.modif == 0 then
		if hud_name ~= def_hud_name then
			need_update = true
		end
	else
		local path = fs:update_path("$fs_root$", "gamedata.dbh_fix")
		local modif = lfs.attributes(path, "modification")
		if ex.modif < modif then
			need_update = true
		end
	end

	if need_update then
		hud_name = "nil"
		on_change_hud()
		start_small_timer(2000, this.show_quit_msg)
	end
end

function show_quit_msg()
	local func = function()
		get_console():execute("quit")
	end
	ShowMessageBox( "yes_no_alarm", "st_force_restart_game", func )
end

function on_change_hud()
	local result = false

	local new_hud_name = game_options.CurrentHUD
	if hud_name ~= new_hud_name then
		local ini = ini_file( "misc\\ui_huds.ltx" )
		local fs = getFS()
		local f1, f2
		local res, id, val
		for i = 0, ini:line_count("files")-1 do
			res, id, val = ini:r_line("files", i, "", "")
			f1 = fs:update_path( "$game_huds$", new_hud_name.."\\"..id )
			f2 = fs:update_path( "$game_data$", id )
			fs:file_copy( f1, f2 )
		end
		hud_name = new_hud_name
		result = true
	end

	local need_panel = game_options.ArtPanel
	if (need_panel ~= af_panel) or result then
		local fs = getFS()
		local path = hud_name.."\\config\\ui\\artefact_panel"..iif(need_panel, "_on", "_off" )
		if fs:exist( "$game_huds$", path..".xml" ) ~= nil then
			local f1 = fs:update_path( "$game_huds$", path..".xml" )
			local f2 = fs:update_path( "$game_data$", "config\\ui\\artefact_panel.xml" )
			fs:file_copy( f1, f2 )

			if fs:exist( "$game_huds$", path.."_16.xml" ) then
				f1 = fs:update_path( "$game_huds$", path.."_16.xml" )
			end
			f2 = fs:update_path( "$game_data$", "config\\ui\\artefact_panel_16.xml" )
			fs:file_copy( f1, f2 )

			result = true
		end

		af_panel = need_panel
	end

	return result
end

function get_all_huds()
	local ini = ini_file( "misc\\ui_huds.ltx" )
	local ret = {}
	local res, id, val
	for i = 0, ini:line_count( "huds" ) - 1 do
		res, id, val = ini:r_line( "huds", i, "", "" )
		table.insert( ret, trim(id) )
	end
	return ret
end

function attach()
	xr_s.subscribe( "net_spawn",    this.init     )
	xr_s.subscribe( "first_update", this.init_hud )
	xr_s.subscribe( "update",       this.update   )
end

