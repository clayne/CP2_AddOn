-- -*- mode: lua; encoding: windows-1251 -*-
--/amk_rel_1/
--[[------------------------------------------------------------------------------------------------------------------
автор: Диденко Руслан (Stohe)

порядок вызова методов биндера:
reload
reinit
load
net_spawn
--------------------------------------------------------------------------------------------------------------------]]
local table_remove = table.remove
local particles={}
----------------------------------------------------------------------------------------------------------------------
class "motivator_binder" (object_binder)

function motivator_binder:__init (obj) super(obj)
	self.loaded = false
	self.last_update = 0
	self.prev_ammo = -1

	self.first_update = false
	self.particles = {}
	self.rot_time = 65535

	self.opened_doors = {} --Хранит таблицу дверей, открытых данным персонажем (чтобы потом закрыть)
end

function motivator_binder:extrapolate_callback(cur_pt)
	if self.object == nil then return false end
	if self.st.active_section then
		xr_logic.issue_event(self.object, self.st[self.st.active_scheme], "extrapolate_callback")
		self.st.move_mgr:extrapolate_callback(self.object)
	end

	if patrol(self.object:patrol()):flags(cur_pt):get() == 0 then
		return true
	end
	return false
end

function motivator_binder:reinit()
	if self.object == nil then return end

	object_binder.reinit(self)

--	КОЛЛБЕКИ ЗДЕСЬ СТАВИТЬ НЕЛЬЗЯ! Здесь еще неизвестна активная схема.
--	Ставьте коллбеки в методе update в отмеченном комментарием месте.

----------------------------------------------------------------------------------------------
--	Общие скрипты
----------------------------------------------------------------------------------------------
	db.storage[self.object:id()] = {  followers = {} }
	self.st = db.storage[self.object:id()]

--'	Создание менеджера контроля положений тела
	self.st.state_mgr = state_mgr.bind_manager(self.object)

	self.st.move_mgr = move_mgr.move_mgr(self.object)
	self.st.move_mgr:initialize()
end
----------------------------------------------------------------------------------------------------------------------
function motivator_binder:net_spawn(sobject)
	if not object_binder.net_spawn(self, sobject) then
		return false
	end

	self.rot = self.rot_time <= amk.game_hours()

	local zomb = amk.load_table("zombies")
	for k, v in pairs( table.copy({},zomb) ) do
		if k == self.object:id() then
			local master = AI:object(v.mr)
			if master == nil or master:alive() == false then
				amk_mod.dezombify(k, v)
				zomb[k] = nil
			end
			break
		end
	end
	amk.save_table("zombies", zomb)

	db.add_obj(self.object)

--	Все CALLBACK-и ставить здесь:
	self.object:set_patrol_extrapolate_callback(motivator_binder.extrapolate_callback, self)
	self.object:set_callback(callback.hit, motivator_binder.hit_callback, self)
	self.object:set_callback(callback.death, motivator_binder.death_callback, self)
	self.object:set_callback(callback.use_object, motivator_binder.use_callback, self)

--'	Загрузка историй для лагеря.
	if self.loaded == false then
		local char_ini = self.object:spawn_ini() or ini_file("scripts\\dummy.ltx")
		xr_info.loadInfo(self.object, char_ini)
	end

	local manager = self.object:motivation_action_manager()
	manager:remove_evaluator  (stalker_ids.property_anomaly)
	manager:add_evaluator   (stalker_ids.property_anomaly, property_evaluator_const(false))

--'	загрузка озвучки
	xr_sound.load_sound(self.object)

	if self.object:alive() then
		xr_gulag.setup_gulag_and_logic_on_spawn( self.object, self.st, sobject, modules.stype_stalker, self.loaded )
	end

--	added by xStream for AMK miniSDK
	amk.on_npc_spawn(self.object)

	amk.on_net_spawn(self.object)
--	end of addition

	local particle_param = utils.cfg_get_string(system_ini(), self.object:section(), "bones_particles", null, false, false, nil)

	if particle_param and system_ini():section_exist(particle_param) then
		local tmp=amk.parse_ini_section_to_array(system_ini(),particle_param)

		for k,v in pairs(tmp) do
			local t = amk.parse_ini_section_to_array(system_ini(), v)
			t.obj = self.object
			if not t.stop_on_death or self.object:alive() then
				play_particle(self.object, t)
			end
		end
	end

--	сохранение отношений в Волне
	if level.name() == "zaton" then
		self.npc_goodwill = self.object:goodwill(Actor)
		if 0 <= self.npc_goodwill and self.npc_goodwill <= 1000 then
			self.npc_goodwill = 1000
		end
		self.com_goodwill = relation_registry.community_goodwill(self.object:character_community(), Actor:id())
	end

	return true
end

function motivator_binder:net_destroy()
	rx_ai.npc_switch_offline(self.object)

	if #self.particles > 0 then
		for kk,vv in pairs(self.particles) do
			if not vv:is_finished() then
				vv:stop()
				self.particles[kk]=nil
			end
		end
	end

	-- added by xStream for AMK miniSDK
	amk.on_npc_go_offline(self.object)
	-- end of addition

	if self.object == nil then return end

	local id=self.object:id()

	local st = db.storage[id]
	if st.active_scheme then
		xr_logic.issue_event(self.object, st[st.active_scheme], "net_destroy", self.object)
	end

	db.del_obj(self.object)

	self:clear_callbacks()
	self.object:set_callback(callback.use_object, nil)

	-- труп исчез из-под носа гг. видимо, воскрес
	if self.rot_sound then
		self.rot_sound = nil
		db.rotting = db.rotting-1
	end

	-- АМК. Очистка рестрикторов
	object_binder.net_destroy(self)

	local sobj=AI:object(id)
	if sobj then
		netpk:modify( sobj, { dynamic_in_restrictions = {} }, netpk.fState )
	end
end

function motivator_binder:clear_callbacks()
	if self.object == nil then return end
	self.object:set_patrol_extrapolate_callback(nil)
	self.object:set_callback(callback.hit, nil)
	self.object:set_callback(callback.death, nil)
end

function motivator_binder:hit_callback(obj, amount, local_direction, who, bone_index)
	if self.object == nil then
	--	abort("Nil self.object in motivator_binder")
		return
	end

	if who then
		local gulag = xr_gulag.get_npc_gulag( self.object )
		if who:section()=="stationary_pkm" then	-- стрелять из турели кроме актора некому: делаем его виновником
			who = Actor
			if self.object:relation(Actor) ~= game_object.enemy then
				self.object:set_relation(game_object.enemy, Actor)
				if gulag then
					xr_gulag.setGulagEnemy(gulag.name , Actor)
				--	log("motivator_binder:hit_callback, set gulag [%s] enemy for actor", gulag.name)
				end
			end
		end
		if gulag then
			for obj_id, o in pairs( gulag.Object ) do
				if o ~= true and level.object_by_id( obj_id ) ~= nil then
					o:enable_memory_object(who, true)
				end
			end
		else
			self.object:enable_memory_object(who, true)	-- это вообще работает? что-то толку не особо...
		end
	end

	if who.id and who:id()==0 then kostya_dialog.on_wpn_hit() end
--	Akill begin
	akill.on_npc_hit(self, obj, amount, local_direction, who, bone_index)
--	Akill end
	-- FIXME: коллбеки неплохо было бы регистрировать в общем storage, а не посхемно...
	-- просто всегда ставить их при включении схемы и снимать при отключении.

	if self.st.active_section then
		xr_logic.issue_event(self.object, self.st[self.st.active_scheme], "hit_callback", obj, amount, local_direction, who, bone_index)
	end
	if self.st.combat_ignore then
		xr_logic.issue_event(self.object, self.st.combat_ignore, "hit_callback", obj, amount, local_direction, who, bone_index)
	end
	if self.st.combat then
		xr_logic.issue_event(self.object, self.st.combat, "hit_callback", obj, amount, local_direction, who, bone_index)
	end
	if self.st.hit then
		xr_logic.issue_event(self.object, self.st.hit, "hit_callback", obj, amount, local_direction, who, bone_index)
	end
	if amount > 0 then
	--	printf("HIT_CALLBACK: %s amount=%s bone=%s", obj:name(), amount, tostring(bone_index))
		sr_territory.issue_event(self.object, "hit_callback", obj, amount, local_direction, who, bone_index)
		xr_wounded.hit_callback(self.object:id())
	end

	if blowout_scheme then
		blowout_scheme.hit_callback(obj)
	end

	rx_ai.npc_hit(obj,amount,local_direction,who,bone_index,self.object)

--	added by xStream for AMK miniSDK
	amk.on_npc_hit(obj, amount, local_direction, who, bone_index)
--	end of addition
end

function motivator_binder:death_callback(victim, who)
	if self.object == nil then return end
	xrs_grenade.death_callback(self.object)
	rx_ai.npc_death(self.object,who)

	if who:section()=="stationary_pkm" then	-- стрелять из турели кроме актора некому: делаем его виновником
		who = Actor
		if self.object:relation(Actor)~=game_object.enemy then
			local gulag = xr_gulag.get_npc_gulag(self.object)
			if gulag then
				xr_gulag.setGulagEnemy(gulag.name , Actor)
			end
		end
	end

	if who:id() == Actor:id() then
		kostya_dialog.on_wpn_hit()
		xr_statistic.addKillCount(self.object)
		if bind_soul_cube then
			bind_soul_cube.add_soul()
		end
	end

	if self.st.death then
		xr_logic.issue_event(self.object, self.st.death, "death_callback", victim, who)
	end
	if self.st.active_section then
		xr_logic.issue_event(self.object, self.st[self.st.active_scheme], "death_callback", victim, who)
	end
	sr_territory.issue_event(self.object, "death_callback", victim, who)

	sr_light.check_light(self.object)

	smart_terrain.on_death( self.object:id() )

--	added by xStream for AMK miniSDK
	amk.on_death(victim, who)
--	end of addition
	kostya_dialog.stealth_fail_task(victim, who)

	death_manager.create_release_items(self.object)

	self:clear_callbacks()

--'	Наносим небольшой импульс вперед.
	local h = hit()
	h.draftsman = self.object
	h.type = hit.fire_wound
	h.direction = Actor:position():sub(self.object:position())
	h:bone("pelvis")
	h.power = 1
	h.impulse = 10
	self.object:hit(h)

	if #self.particles > 0 then
		for kk,vv in pairs(self.particles) do
			vv:on_death()
		end
	end

	if(actor_stats.remove_from_ranking~=nil)then
		local community = self.object:character_community()
		if community == "zombied" or
			community == "monolith" or
			community == "arena_enemy"
		then
			return
		end
		actor_stats.remove_from_ranking(self.object:id())
	end

	amk_names_lists.remove_name(self.object)
end

function motivator_binder:use_callback(obj, who)
	if self.object == nil then return end

	if self.object:alive() then
		xr_use.notify_on_use(obj, who)
		if self.st.active_section then
			xr_logic.issue_event(self.object, self.st[self.st.active_scheme], "use_callback", obj, who)
		end
	else
		treasure_manager:get_treasure_manager():use(self.object)
		if self.object:name() == "rostok_dead_stalker_0000" then
			Actor:give_info_portion("acv_vandal")
		end
	end

	xr_s.on_event("npc_use", obj, who)

	if string.find(self.object:section(),"zombie") ~= nil then
		sak.zombie_checkup()
	end

	fly.returner_clear_pos()
	
--	added by xStream for AMK miniSDK
	amk.on_use(obj, who)
--	end of addition
end

function motivator_binder:update(delta)
    if amk.oau_watchdog~=0 then
        if Actor and not device():is_paused() then
            local snd_obj = xr_sound.get_safe_sound_object("detectors\\da-2_beep1")
            snd_obj:play_no_feedback(Actor, sound_object.s2d, 0, vector(), 2.5)
        end
        abort("Watchdog "..amk.oau_watchdog..".Reason "..amk.oau_reason)
    end
    if self.object == nil then return end
    local self_object_id = self.object:id()
--    db.storage[self_object_id].us = 100		
    object_binder.update(self, delta)
--    db.storage[self_object_id].us = 99
    if particles[self_object_id] and #particles[self_object_id] > 0 then
        for kk,vv in pairs(particles[self_object_id]) do
            self.particles[#self.particles+1] = amk_particle.amk_particle(vv)
            table_remove(particles[self_object_id],kk)
        end
    end

    if #self.particles > 0 then
        for kk,vv in pairs(self.particles) do
            if vv then
                if vv:is_finished() then
                    self.particles[kk]=nil
                else
                    vv:update(delta)
                end
            end
        end
    end

    if self.first_update == false then
        if self.object:alive() == false then
			death_manager.create_release_items(self.object)
		else
			trade_manager.first_update(self.object)
		--	this.check_art_weapon(self.object)
			start_small_timer( 2000, this.check_art_weapon, self.object:id() )
        end
        self.first_update = true
    end
--[[
	if _G["kill_killer_123"] and self.object:character_community() == "killer" then
		if self.object:alive() then
			self.object:kill(self.object)
		end
	end
]]
    if time_global() - self.last_update > 1000 then
        if amk.get_npc_relation(self.object,Actor)=="enemy" and self.object:alive() and self.object.health>0.01 then
            if self.object:see(Actor) then
                amk.enemy_see_actor(self.object,"npc")
            end
            if Actor:see(self.object) then
                amk.actor_see_enemy(self.object,"npc")
            end
        end
		sr_light.check_light(self.object)

		self.last_update = time_global()
    end

    local wpn = utils.wpn_info_get(self.object)
    if wpn["ammo"]~=nil then
        local enemy = self.object:best_enemy()
        if enemy and enemy:id()==Actor:id() and self.object:see(Actor) and self.prev_ammo>wpn["ammo"] then
            amk.npc_shot_actor(self.object)
        end
    end

    self.prev_ammo = wpn["ammo"] or 0

	--' Апдейт менеджера состояний тела
	if self.st.state_mgr then
		if self.object:alive() then
			self.st.state_mgr:update()
		else
			self.st.state_mgr = nil
		end
	end

	if self.object:alive() then
		--' Апдейт саундменеджера
		xr_sound.update(self.object)

		if self.object:is_talk_enabled() then
			self.object:set_tip_text("character_use")
		else
			self.object:set_tip_text("")
		end
		
		local opened_doors = ph_door.try_to_open_door(self.object)
		table.copy(self.opened_doors, opened_doors)
		-- Закрываем двери
		local closed_doors = ph_door.try_to_close_door(self.object, self.opened_doors)
		for id,v in pairs(closed_doors) do
			self.opened_doors[id] = nil
		end
	else
		self.object:set_tip_text_default()
		-- гниение
		if self.rot then
			self:rotting()
		end
	end

--	db.storage[self_object_id].us = 98
	xrs_grenade.npc_update(self)
--	db.storage[self_object_id].us = 982
	xrs_armor.npc_update(self)
--	db.storage[self_object_id].us = 983
	rx_ai.npc_update(self.object,self.st)
--	db.storage[self_object_id].us = 0
end

function motivator_binder:reload(section)
--	memusage.collect_info(self.object, "reload_start")
	object_binder.reload(self, section)
--	printf("motivator_binder:reload(): self.object:name()='%s'", self.object:name())
--	self.object:set_pda_callback(pda_callback)
--	memusage.collect_info(self.object, "reload_end")
end

function motivator_binder:net_save_relevant()
--	printf("motivator_binder:net_save_relevant(): self.object:name()='%s'", self.object:name())
	return true
end

function motivator_binder:save(packet)
--	printf("motivator_binder:save(): self.object:name()='%s'", self.object:name())
	object_binder.save(self, packet)

	xr_logic.save_obj(self.object, packet)
	dialog_manager.save(self.object, packet)

	if self.rot_time == 65535 and not self.object:alive() then
	--	помер, либо гг нашел труп - выставляем время гниения
		self.rot_time = amk.game_hours()+24
	end
	packet:w_u16(self.rot_time)

	packet:w_u8( table.size(self.opened_doors) )
	for k,v in pairs(self.opened_doors) do
		packet:w_u16(k)
	end
end

function motivator_binder:load(reader)
	self.loaded = true

--	printf("motivator_binder:load(): self.object:name()='%s'", self.object:name())
	object_binder.load(self, reader)
--	printf("motivator_binder:object_binder.load(): self.object:name()='%s'", self.object:name())

	if reader:r_eof() then
		-- abort("Это сохранение повреждено - удалите его! motivator_binder:load "..self.object:name())
		remove_zavis.remove_obj(self.object)
		if not self.object then
			return
		end
	end

	xr_logic.load_obj(self.object, reader)
	dialog_manager.load(self.object, reader)
  
	self.rot_time = reader:r_u16()

	local i = reader:r_u8()
	if i>0 then
		for k = 1,i do
			self.opened_doors[reader:r_u16()] = true
		end
	end
end

function motivator_binder:rotting()
	self.pos = self.object:position()
	
	if self.pos:distance_to(Actor:position()) < 3 then
		if not self.rot_sound then
			self.rot_sound = sound_object([[anomaly\rot_flies]])
			db.rotting = db.rotting+1
		end
		
		if self.rot_sound:playing() then 
			self.rot_sound:set_position(self.pos)
		else
			-- мухи не летают в дождь, ночью и во время Выброса
			if level.rain_factor() < 0.05 and xr_conditions.is_day() and not amk.has_variable("blowout") then
				self.rot_sound:play_at_pos(self.object, self.pos)
			end
		end
	else
		if self.rot_sound then
			self.rot_sound = nil
			db.rotting = db.rotting-1
		end
	end
end

function init(npc)
	if AI then
		npc:bind_object(this.motivator_binder(npc))
	end
end

-- Эвалюаторы, которые имеют высший приоритет, и, соответственно, перебивают остальные скрипты собой
function addCommonPrecondition(action)
--	action:add_precondition (world_property(xr_evaluators_id.reaction,false))
	action:add_precondition (world_property(xr_evaluators_id.stohe_meet_base + 1,false))
	action:add_precondition (world_property(xr_evaluators_id.sidor_wounded_base + 0,  false))
	action:add_precondition (world_property(xr_evaluators_id.chugai_heli_hunter_base, false))
	action:add_precondition (world_property(xr_evaluators_id.abuse_base, false))
	action:add_precondition (world_property(blowout_scheme.evid_outside, false))
	action:add_precondition (world_property(blowout_scheme.evid_blowout, false))
	action:add_precondition (world_property(blowout_scheme.evid_preblowout, false))
	action:add_precondition (world_property(blowout_scheme.evid_anomaly, false))
	action:add_precondition (world_property(xrs_grenade.evid_crazy_grenadier, false))
	action:add_precondition (world_property(xrs_grenade.evid_aaa_grenade, false))
	if xr_turret_hunter then
		action:add_precondition (world_property(xr_turret_hunter.evid_turret_hunter, false))
	end
	action:add_precondition (world_property(watcher_act.evid_see_stuff, false))
	rx_ai.addCommonPrecondition(action)
end

function play_particle(obj,params)
    if obj then
        local id = obj:id()
        if not particles[id] then
                particles[id]={}
        end
        particles[id][#particles[id]+1] = params
    end
end

function check_art_weapon( npc_id )
	local npc = level.object_by_id( npc_id )
	if not npc then return end

	local item_in_slot = npc:item_in_slot( inventory_slots.PISTOL )
	if item_in_slot and item_in_slot:is_artefact() then
		if npc:active_item() and ( npc:active_item():id() == item_in_slot:id() ) then
			local item_in_slot_sec = item_in_slot:section()
			npc:drop_item( item_in_slot )

			local s_obj = alife():object( item_in_slot:id() )
			if s_obj then
				AI:release( s_obj, true )
				AI:create(
					item_in_slot_sec,
					npc:position(),
					npc:level_vertex_id(),
					npc:game_vertex_id(),
					npc:id()
				)
			end

			local bw = npc:best_weapon()
			local be = npc:best_enemy()
			if bw and bw:is_weapon() then
				if be then
					npc:set_item( object.fire1, bw )
				else
					npc:set_item( object.idle, bw )
				end
			end
		end
	end
end
