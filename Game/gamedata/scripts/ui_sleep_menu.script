-- -*- mode: lua; encoding: windows-1251 -*-
--/amk_rel_1/
-- инициализация

class "UISleepWnd" ( CUIScriptWnd )

function UISleepWnd:__init( hours )
	super()
	-- log("[UISleepWnd:__init]: %s", hours)

	self.can_sleep_time = hours

	self:InitControls()
	self:Initialize()

	BlockUIDescr( true )
end

function UISleepWnd:__finalize() end

function UISleepWnd:InitControls()
	-- здесь определяем координаты левого верхнего угла и ширину-высоту
	self:Init( 0, 0, 1024, 768 )

	self.wide = is_16_9_mode()
	
	-- файл-описатель наших элементов
	local xml = CScriptXmlInit()
	xml:ParseFile( "ui_sleep_menu.xml" )

	-- видео на заднем плане
	self.back = xml:InitStatic("background", self)

	self.sleep_static = xml:InitStatic("sleep_static", self.back)
	self.sleep_static2 = xml:InitStatic("sleep_static", self.back)
	self.static_cover = xml:InitStatic("static_cover", self.back)
	self.st_marker = xml:InitStatic("st_marker", self.static_cover)

	self.sleep_st_tbl = {}
	for i = 1, 25 do
		local st = xml:InitStatic("sleep_st_"..i, self.back)
		st:InitTexture("ui_inGame2_scale_line")
		st:SetTextureOffset(-2, 0)
		self.sleep_st_tbl[i] = st
	end
	self.shift_x = self.sleep_st_tbl[2]:GetWndPos().x - self.sleep_st_tbl[1]:GetWndPos().x

	self.time_track = xml:InitTrackBar("time_track", self.back)
	self:Register(self.time_track, "time_track")

	self.btn_sleep = xml:Init3tButton("btn_sleep", self.back)
	self:Register(self.btn_sleep, "btn_sleep")
	self:AddCallbackEx("btn_sleep", ui_events.BUTTON_CLICKED, self.OnButtonSleep, self)

	self.btn_cancel = xml:Init3tButton("btn_cancel", self.back)
	self:Register(self.btn_cancel, "btn_cancel")
	self:AddCallbackEx("btn_cancel", ui_events.BUTTON_CLICKED, self.OnButtonCancel, self)
end

function UISleepWnd:Update()
	CUIScriptWnd.Update(self)
	local v = self.time_track:GetFValue()
	if self.last_v == v then return end
	self.last_v = v
	local x = math.clamp(571*v, 5, 565)
	if self.wide then
		x = x*0.8
	end
	self.st_marker:SetWndPos(x, 0)
end

function UISleepWnd:Initialize()
	local cur_hours = level.get_time_hours()
	local delta_x = self.shift_x * (60-level.get_time_minutes())/60
	local st
	for i = 1, 24 do
		st = self.sleep_st_tbl[i]
		local hours = cur_hours + i
		if(hours>=24) then
			hours = hours - 24
		end
		st:SetText(hours.."ч")
		st:SetTextX(2)
		local pos = st:GetWndPos()
		st:SetWndPos(pos.x + delta_x, pos.y)
		if i-1 > self.can_sleep_time then
			st:SetTextColor(180, 160, 80, 80)
		else
			st:SetTextColor(255, 80, 160, 80)
		end
	end

	st = self.sleep_st_tbl[25]
	if delta_x > self.shift_x/3 then
		local pos = self.sleep_st_tbl[1]:GetWndPos()
		st:SetWndPos(pos.x - self.shift_x, pos.y)
		st:SetText(cur_hours.."ч")
		st:SetTextX(2)
		st:SetTextColor(180, 160, 80, 80)
	else
		local pos = st:GetWndPos()
		st:SetWndPos(pos.x + delta_x, pos.y)
	end

	local delta = math.floor(591/24*(cur_hours-1)) - delta_x
	self.sleep_static:SetOriginalRect(delta,413,591-delta,118)
	local width = 591-delta
	if self.wide then
		width = width*0.8
	end
	self.sleep_static:SetWndSize(vector2():set(width, 118))

	self.sleep_static2:SetOriginalRect(0,413,delta,118)
	width = delta
	if self.wide then
		width = width*0.8
	end
	self.sleep_static2:SetWndSize(vector2():set(width, 118))

	local pos = self.sleep_static2:GetWndPos()
	pos.x = self.sleep_static:GetWndPos().x+self.sleep_static:GetWidth()
	self.sleep_static2:SetWndPos(pos.x, pos.y)

	self.last_v = self.time_track:GetFValue()
end

function UISleepWnd:OnKeyboard( dik, keyboard_action )
	CUIScriptWnd.OnKeyboard( self,dik,keyboard_action )
	if keyboard_action == ui_events.WINDOW_KEY_PRESSED then
		if dik == DIK_keys.DIK_ESCAPE then
			self:OnButtonCancel()
		elseif dik == DIK_keys.DIK_RETURN then
			self:OnButtonSleep()
		end
	end
	return true
end

function UISleepWnd:OnButtonSleep()
	local sleep_time = self.time_track:GetFValue() * 24
	sleep_time = math.clamp(sleep_time, 1/6, self.can_sleep_time)
	
	-- log("~ [UISleepWnd:OnButtonSleep]: sleep_time = %s", sleep_time)
	self:OnButtonCancel()
	sleep_manager.main( sleep_time )
	local w = level.main_input_receiver()
	if w then level.start_stop_menu( w, true ) end
end

function UISleepWnd:OnButtonCancel()
	for i = #self.sleep_st_tbl, 1, -1 do
		self.sleep_st_tbl[i] = nil
	end
	self:ClearCallbacks()
	self:GetHolder():start_stop_menu( self, true )
	BlockUIDescr( false )
end

