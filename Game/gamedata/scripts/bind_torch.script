-- -*- mode: lua; encoding: windows-1251 -*-
local get_seconds = amk.game_seconds

local devices = {}

local bad_charge_level = 0.03

-- battery charge level = {settings}
local torch_settings = {
	[1] = {
		range = 30,
		color = {1.0, 1.0, 1.0, 0.2},
		omni_range = 0.3,
		omni_color = {0.60, 0.60, 0.10, 0},
		color_animator = "empty",
		glow_radius = 1.5,
		spot_angle = 90
	},
	[0.2] = {
		range = 25,
		color = {0.9, 0.9, 0.9, 0.2},
		omni_range = 0.27,
		omni_color = {0.55, 0.60, 0.10, 0},
		color_animator = "empty",
		glow_radius = 1.4,
		spot_angle = 84
	},
	[0.12] = {
		range = 20,
		color = {0.8, 0.8, 0.8, 0.2},
		omni_range = 0.25,
		omni_color = {0.50, 0.55, 0.10, 0},
		color_animator = "empty",
		glow_radius = 1.3,
		spot_angle = 78
	},
	[0.08] = {
		range = 17,
		color = {0.5, 0.5, 0.5, 0.1},
		omni_range = 0.21,
		omni_color = {0.30, 0.30, 0.05, 0},
		color_animator = "empty",
		glow_radius = 1.0,
		spot_angle = 70
	},
	[0.05] = {
		range = 15,
		color = {0.5, 0.5, 0.5, 0.1},
		omni_range = 0.2,
		omni_color = {0.30, 0.30, 0.05, 0},
		color_animator = "koster",
		glow_radius = 0.8,
		spot_angle = 65
	},
	[0] = {
		range = 0,
		color = {0, 0, 0, 0},
		omni_range = 0,
		omni_color = {0, 0, 0, 0},
		color_animator = "empty",
		glow_radius = 0,
		spot_angle = 0
	}
}
local torch_cond = {}
for k in pairs(torch_settings) do
	table.insert(torch_cond, k)
end
table.sort(torch_cond, function(i1, i2) return i1<i2 end)

local upd_step = 5			-- update interval in seconds
upd_step = upd_step * level.get_time_factor()


class "torch_binder" (object_binder)

function torch_binder:__init(obj)
	super (obj)
	self.time_left = 0
	self.next_cond = 0
	self.mode = false
	self.last_time = 0
	devices[obj:id()] = self
end

function torch_binder:net_spawn(data)
	if not object_binder.net_spawn(self, data) then
		return false
	end

	self.section = self.object:section()
	if self.section == "device_torch" then
		self.object:set_callback(callback.on_switch_torch, self.on_switch_torch, self)
		self.mode = self.object:is_torch_enabled()
	else
		self.is_nv = true
	end

	self.full_charge_time = sys_ini:r_u32(self.section, "working_time") *60

	self.se_torch = AI:object(self.object:id())
	self.time_left = self.full_charge_time - self.se_torch.worked_time

	if self:get_charge_level() > 0 then
		self.accum_sect = sys_ini:r_string( self.section, "energy_source" )
		self.object:set_weight( self.object:get_weight() + sys_ini:r_float(self.accum_sect, "inv_weight") )
	end

	self.need_init = true

	return true
end

function torch_binder:init_torch()
	local cond = self:get_charge_level()
	if self.is_nv then
		if cond == 0 then
			self.next_cond = -1
		end
	else
		for i, v in ipairs(torch_cond) do
			if cond <= v then
				self.next_cond = torch_cond[i-1] or -1
				if v < 1 then self:set_settings(v) end
				break
			end
		end
	end

	self.last_time = get_seconds()
end

function torch_binder:update(delta)
	object_binder.update(self, delta)

	if self.need_init then
		self:init_torch()
		self.need_init = nil
		return
	end

	if not self.mode then return end

	if not Actor:is_in_slot(self.object) then return end

	local tm = get_seconds()
	local _shift = tm - self.last_time
	if _shift < upd_step then return end

	self.last_time = tm

	if self.next_cond < 0 then return end

	self.time_left = math.max(self.time_left - _shift, 0)
	self.se_torch.worked_time = self.full_charge_time - self.time_left

	local cond = self.time_left/self.full_charge_time
	if self.is_nv then
		if cond == 0 then
			self:switch_nv(false)
			self.next_cond = -1
		end
	elseif cond <= self.next_cond then
		for i, v in ipairs(torch_cond) do
			if cond <= v then
				self.next_cond = torch_cond[i-1] or -1
				if v < 1 then self:set_settings(v) end
				break
			end
		end
	end
end

function torch_binder:net_destroy()
	if not self.is_nv then
		self.object:set_callback(callback.on_switch_torch, nil)
	end

	devices[self.object:id()] = nil

	object_binder.net_destroy(self)
end

function torch_binder:on_switch_torch(mode)
	self.mode = (mode == 1)
	if self.mode then self.last_time = get_seconds() end
end

function torch_binder:switch_nv(mode, nosound)
	if not self.is_nv then return end

	if mode == nil then
		mode = not self.mode
	end

	if mode == self.mode then return end

	if self.next_cond == -1 then
		self.mode = false
		return
	end

	self.mode = mode
	if mode then self.last_time = get_seconds() end


	if self.mode then
		if not nosound then
			local snd = xr_sound.get_safe_sound_object([[weapons\nv_start]])
			snd:play_no_feedback(Actor, sound_object.s2d, 0, vector(), 1.0)
		end
		local effector = sys_ini:r_string(self.section, "ppe")
		level.add_pp_effector(effector..".ppe", 1034, true)
	else
		if not nosound then
			local snd = xr_sound.get_safe_sound_object([[weapons\nv_off]])
			snd:play_no_feedback(Actor, sound_object.s2d, 0, vector(), 1.0)
		end
		level.remove_pp_effector(1034)
	end
end

function torch_binder:get_charge_level()
	return self.time_left/self.full_charge_time
end

function torch_binder:get_current_accumm()
	return self.accum_sect
end

function torch_binder:charge(new_charge)
	if has_alife_info("no_pnv") then
		ui_inv_add.show_inv_msg("Невозможно заменить батарею: устройство неисправно", "red")
		return false
	elseif new_charge <= bad_charge_level then
		ui_inv_add.show_inv_msg("Этот аккумулятор непригоден, используйте другой", "red")
		return false
	-- elseif math.abs(self:get_charge_level() - new_charge) < 0.02 then
		-- return false
	end

	local old_charge = self:get_charge_level()
	if old_charge > 0 then
		local accum = AI:create(self.accum_sect, vector():set(0,0,0), 0, 0, 0)
		netpk:modify(accum, {condition = old_charge}, netpk.fState)
		level.client_spawn_manager():add(accum.id, -1,
			function(condition, id, obj)
				obj:set_condition(condition)
			end,
		old_charge)
		self.object:set_weight( self.object:get_weight() - sys_ini:r_float(self.accum_sect, "inv_weight") )
	end

	self.time_left = self.full_charge_time * new_charge
	self.se_torch.worked_time = self.full_charge_time - self.time_left
	self.last_time = get_seconds()

	if self.is_nv then
		self.next_cond = 0
	else
		for i, v in ipairs(torch_cond) do
			if new_charge <= v then
				self.next_cond = torch_cond[i-1] or -1
				self:set_settings(v)
				break
			end
		end
	end

	return true
end

function torch_binder:discharge()
	self.next_cond = -1
	self.time_left = 0
	self.se_torch.worked_time = self.full_charge_time
	self:set_settings(0)
end

function torch_binder:set_settings(condition)
	local t = torch_settings[condition]
	if not t then
		abort("torch_binder: condition [%s] not found in 'torch_settings'", tostring(condition))
		return
	end

	local torch = self.object
	torch:set_torch_range(t.range)
	torch:set_torch_color( fcolor():set(unpack(t.color)) )
	torch:set_torch_omni_range(t.omni_range)
	torch:set_torch_omni_color( fcolor():set(unpack(t.omni_color)) )
	torch:set_torch_glow_radius(t.glow_radius)
	torch:set_torch_spot_angle(t.spot_angle)
	torch:set_torch_color_animator(t.color_animator)
end
------------------------------------------------------------------------------
function init(obj)
    local new_binder = torch_binder(obj)
    obj:bind_object(new_binder)
end
-------------------------------------------------------------------------------
function switch_pnv()
	if level.main_input_receiver() then return end

	local nv = Actor:item_in_slot( inventory_slots.TORCH )
	if nv then
		local binder = devices[ nv:id() ]
		if binder and binder.is_nv then
			if has_alife_info("no_pnv") then
				binder:switch_nv( false )
				return
			end
			binder:switch_nv()
		end
	end
end


function load_pnv()
	local id = xr_logic.pstor_retrieve(Actor, "nv_on", nil, true)
	if id then
		id = tonumber(id)
		if id == nil then return end
		local obj = AI:object(id)
		if obj == nil or has_alife_info("no_pnv") then return end
		xr_s.subscribe("first_update", function(obj_id)
			local binder = devices[ obj_id ]
			if binder and binder.is_nv then
				if has_alife_info("no_pnv") then
					return
				end
				binder:switch_nv(true, true)
			end
		end,
		{userobj = id} )
	end
	amk.del_variable("nv_on")
end
function save_pnv()
	local nv = Actor:item_in_slot( inventory_slots.TORCH )
	if nv then
		local binder = devices[ nv:id() ]
		if binder and binder.is_nv and binder.mode and (binder:get_charge_level() > 0) then
			xr_logic.pstor_store( Actor, "nv_on", nv:id() )
			return
		end
	end
	amk.del_variable("nv_on")
end

function no_pnv()
	this.switch_pnv()
	this.broke_torch()
end

function broke_torch()
	for k, v in pairs(devices) do
		if v.section == "device_torch"
			and v.object:parent() and v.object:parent():id() == 0
		then
			v:discharge()
			break
		end
	end
end

function charge(acumm, torch)
	local binder = devices[torch:id()]
	if not binder then return end

	if binder:charge( acumm:condition() ) then
		del_obj_by_id( acumm:id() )
		zvuki.use_snd( acumm:section() )
	end
end

-----------------------------------------------------------------------------------------------------------
function on_item_from_slot(item)
	if current_torch_id ~= item:id() then return end
	current_torch_id = 0

	local binder = item:binded_object()
	if binder then
		if ShiftPressed() then
			local cond = binder:get_charge_level()
			if cond > 0 then
				local accum = AI:create(binder.accum_sect, vector():set(0,0,0), 0, 0, 0)
				netpk:modify(accum, {condition = cond}, netpk.fState)
				level.client_spawn_manager():add(accum.id, -1,
					function(condition, id, obj)
						obj:set_condition(condition)
					end,
				cond)
				binder:discharge()
			end
		elseif binder.is_nv then
			binder:switch_nv( false )
		end
	end
end
function on_item_to_slot(item)
	if not item:is_torch() then return end
	current_torch_id = item:id()
end

function attach()
	xr_s.subscribe("item_to_ruck", this.on_item_from_slot)
	xr_s.subscribe("item_drop", this.on_item_from_slot)
	xr_s.subscribe("item_to_slot", this.on_item_to_slot)
	xr_s.subscribe("net_spawn", this.load_pnv)
	xr_s.subscribe("pre_save", this.save_pnv)
end

