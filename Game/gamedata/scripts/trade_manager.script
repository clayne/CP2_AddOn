-- -*- mode: lua; encoding: windows-1251 -*-
local pick_from_condlist = xr_logic.pick_section_from_condlist
local parse_condlist = xr_logic.parse_condlist

-- game hours
local DEF_RESUPPLY_TIME = 50
local DEF_RESUPPLY_RND = 20

local trade_manager = {}

local def_ini_file = "misc\\trade_generic.ltx"
local def_ini = ini_file(def_ini_file)
local def_item_condition = {}
def_item_condition.weapon = def_ini:r_float("trader", "item_condition_weapon")
def_item_condition.outfit = def_ini:r_float("trader", "item_condition_outfit")
def_item_condition.monster_part = def_ini:r_float("trader", "item_condition_monster_part")

local traders = {
	['amk_vitek_voron']        = { info = "trade_voron_enough",    cnt = 5  }, -- Витёк Ворон
	['mil_freedom_member0018'] = { info = "trade_maks_enough",     cnt = 4  }, -- Макс
	['escape_trader']          = { info = "trade_sidor_enough",    cnt = 3  }, -- Сидорович
	['bar_barman']             = { info = "trade_barman_enough",   cnt = 5  }, -- Бармен
	['bar_dolg_petrenko']      = { info = "trade_petrenko_enough", cnt = 4  }, -- Петренко
	['mil_freedom_member0021'] = { info = "trade_skraga_enough",   cnt = 3  }, -- Скряга
	['yantar_ecolog_general']  = { info = "trade_sakharov_enough", cnt = 5  }, -- Сахаров
	['Sak']                    = { info = "trade_sak_enough",      cnt = 5  }, -- Сяк
	['prip_dok_arh']           = { info = "trade_doktor_enough",   cnt = 4  }, -- Доктор в Припяти в ДК
	['doktor']                 = { info = "trade_doktor_enough",   cnt = 4  }, -- Доктор в Припяти в схроне
	['dcity_dok_bolot']        = { info = "trade_doktor_enough",   cnt = 4  }, -- Доктор в МГ в плену у "Последнего Дня"
	['dcity_dok_nevidim']      = { info = "trade_doktor_enough",   cnt = 4  }, -- Доктор в МГ невидимый, убегает
	['dcity2_dok2_bolot2_vid'] = { info = "trade_doktor_enough",   cnt = 4  }, -- Доктор в МГ спасённый из плена
	['sak_military_stalker']   = { info = "trade_sherstyk_enough", cnt = 3  }, -- Шерстюк
	['val_bandit_trader']      = { info = "trade_jlob_enough",     cnt = 3  }, -- Жила
	['esc_soldier_commander']  = { info = "trade_kuznezov_enough", cnt = 4  }, -- Кузнецов
	['marsh_dan']              = { info = "trade_dan_enough",      cnt = 5  }  -- Дэн
}

function trade_init(npc, cfg)
	local t = trade_manager[npc:id()]
--	printf("TRADE INIT[%s]", npc:name())
	local str
	local trade_ini
	if t == nil then	-- if first run
		t = {}
		trade_manager[npc:id()] = t

		if cfg ~= def_ini_file then
			t.config = ini_file(cfg)
			trade_ini = t.config
		else
			trade_ini = def_ini
		end

		-- коэфициенты покупки
		str = trade_ini:r_string_ex("trader", "buy_condition", nil)
		if str == nil then
			abort("Incorrect trader settings. Can't find buy_condition. [%s]->[%s]", npc:name(), cfg)
		end
		t.buy_condition = parse_condlist(npc, "trade_manager", "buy_condition", str)

		-- коэфициенты продажи
		str = trade_ini:r_string_ex("trader", "sell_condition", nil)
		if str == nil then
			abort("Incorrect trader settings. Can't find sell_condition. [%s]->[%s]", npc:name(), cfg)
		end
		t.sell_condition = parse_condlist(npc, "trade_manager", "sell_condition", str)

		-- список закупки
		if t.config then
			str = trade_ini:r_string_ex("trader", "buy_supplies", nil)
			if str ~= nil then
				t.is_trader = true
				t.buy_supplies = str
			end
			-- состояние покупаемого
			t.item_condition = {}
			t.item_condition.weapon = trade_ini:r_float_ex("trader", "item_condition_weapon", def_item_condition.weapon)
			t.item_condition.outfit = trade_ini:r_float_ex("trader", "item_condition_outfit", def_item_condition.outfit)
			t.item_condition.monster_part = trade_ini:r_float_ex("trader", "item_condition_monster_part", def_item_condition.monster_part)

			t.resupply_time = trade_ini:r_float_ex("trader", "resupply_time", DEF_RESUPPLY_TIME)
			t.resupply_rnd = trade_ini:r_float_ex("trader", "resupply_rnd", DEF_RESUPPLY_RND)
		end
	else
		trade_ini = t.config or def_ini
	end

	-- устанавливаем параметры торговли...
	str = pick_from_condlist(Actor, npc, t.buy_condition)
	if str then
		npc:buy_condition(trade_ini, str)
	end

	str = pick_from_condlist(Actor, npc, t.sell_condition)
	if str then
		npc:sell_condition(trade_ini, str)
	end
end

function first_update(npc)
	local t = trade_manager[npc:id()]
	if t == nil then return end

	local lim = traders[npc:name()]
	if t.is_trader or lim then
		local se_obj = AI:object(npc:id())
		-- log("trade_manager: npc["..npc:name().."] inited, resupply_time = "..se_obj.resupply_time)
		local next_resupply_time = se_obj.resupply_time
		if next_resupply_time <= game_time_hours then
			if t.buy_supplies then
				local buy_supplies = parse_condlist(npc, "trade_manager", "buy_supplies", t.buy_supplies)
				local sect = pick_from_condlist(Actor, npc, buy_supplies)
				if sect then
					npc:buy_supplies(t.config, sect)
				end
			end

			local resupply_time = t.resupply_time or DEF_RESUPPLY_TIME
			local resupply_rnd = t.resupply_rnd or DEF_RESUPPLY_RND
			local time_shift = next_resupply_time - game_time_hours
			while time_shift <= 0 do
				time_shift = time_shift + resupply_time + math.random(-resupply_rnd, resupply_rnd)
			end
			se_obj.resupply_time = game_time_hours + time_shift

			-- log("[trade_manager.first_update] resupply npc: %s, time_shift = %s", npc:name(), time_shift)

			if npc:is_trader() then
				local npc_id = npc:id()
				remove_timer_by_parameter("rspl", npc_id)
				start_game_timer("rspl", 0, time_shift, 0, npc_id)
			end

			-- Обновляем бартер
			if lim then
				for i = 1, lim.cnt do
					if Actor:has_info(lim.info..i) then
						Actor:disable_info_portion(lim.info..i)
					end
				end
			end
		end
	end
end

-------------------------------------------------------------------------------
local remove_items = {}
local need_remove = false

function start_trade()
	local npc = level.get_second_talker(0)
	local t = trade_manager[npc:id()]
	-- Барахло удаляем только у торговцев с ассортиментом
	if t ~= nil and t.is_trader then
		need_remove = true
		remove_items = {}
	else
		need_remove = false
	end
end

function on_trade(item, sell_bye)
	if need_remove == false then return end
	if sell_bye == true then
		if not protected_items.actor_items_keep(item:section()) then
			remove_items[item:id()] = true
		end
	else
		remove_items[item:id()] = nil
	end
end

function stop_trade()
	if need_remove == false then return end
	local obj
	for id in pairs(remove_items) do
		obj = AI:object(id)
		if obj and trade_manager[obj.parent_id] then
			AI:release(obj, true)
		end
	end
	remove_items = {}
end

--------------------------------------------------------------------------
function get_item_condition(npc)
	local t = trade_manager[npc:id()]
	if t and t.item_condition then
		return t.item_condition
	end
	return def_item_condition
end

--------------------------------------------------------------------------
function attach()
	xr_s.subscribe("trade_open", this.start_trade)
	xr_s.subscribe("trade_close", this.stop_trade)
end
