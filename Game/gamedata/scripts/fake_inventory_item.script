-- -*- mode: lua; encoding: windows-1251 -*-
local saved_fields = {
	["__section"]    = { name = "s",  def = function(s) return nil end },
	["__condition"]  = { name = "c",  def = function(s) return 1 end },
	["__cost"]       = { name = "k",  def = function(s) return sys_ini:r_u32(s, "cost") end },
	["weight"]       = { name = "w",  def = function(s) return sys_ini:r_float(s, "inv_weight") end },
	["custom_data"]  = { name = "cd", def = function(s) return "" end  },
	["charge_level"] = { name = "cl", def = function(s) return nil end },
	["ammo_left"]    = { name = "al", def = function(s) return sys_ini:r_u32_ex(s, "box_size", nil) end },
	["ammo_elapsed"] = { name = "ae", def = function(s) return sys_ini:r_u32_ex(s, "ammo_mag_size", nil) end },
	["ammo_type"]    = { name = "at", def = function(s) return 0 end },
	["addon_flags"]  = { name = "af", def = function(s) return 0 end   },
	["ammo_ids"]     = { name = "ai", def = function(s) return nil end },
	["worked_time"]  = { name = "wt", def = function(s) return 0 end   },
	["current_src"]  = { name = "cs", def = function(s) return 0 end   },
	["art_loss"]     = { name = "ar", def = function(s) return 0 end   }
}
	
local fake_items = {}
function get_item(id)
	return fake_items[id]
		or log("! [fake_inventory_item.get_item] item with id[%s] not found!", id)
end

local iid = 65535
local function gen_item_id()
	iid = iid + 1
	return iid
end

class "fake_item"

function fake_item:__init(obj)
	local t = type(obj)
	if t == "table" then
		self:set_table(obj)
	elseif t == "userdata" then
		self:set_obj(obj)
	else
		abort("%s: unknown sourse type [%s]", script_name(), t)
	end
	
	self.__clsid = sys_ini:r_clsid(self.__section, "class")
	self.__id = gen_item_id()
	self.is_fake = true

	fake_items[self.__id] = self
end

function fake_item:__finalize()
end

function fake_item:set_table(tbl)
	local sect = tbl.s
	ASSERT(sect, "[fake_item:set_table] Section is not saved!")
	for field, t in pairs(saved_fields) do
		self[field] = tbl[t.name] or t.def(sect)
	end
end

function fake_item:get_table()
	local ret = {}
	local v
	for field, t in pairs(saved_fields) do
		v = self[field]
		if v ~= nil and t.def(self.__section) ~= v then
			ret[t.name] = v
		end
	end
	return ret
end

function fake_item:set_obj(obj)
	self.__section = obj:section()
	self.__condition = obj:condition()
	self.weight = obj:get_weight()
	self.__cost = obj:cost()
	if isMagazinedWeapon(obj) then
		self.ammo_elapsed = obj:get_ammo_in_magazine()
	end
	self.charge_level = obj:get_charge_level()

	local data = netpk:get(AI:object(obj:id()))
	self.custom_data = data.custom_data
	self.worked_time = data.worked_time
	self.current_src = data.current_src
	self.art_loss = data.art_loss
	self.ammo_left = data.ammo_left
	self.ammo_type = data.ammo_type
	self.addon_flags = data.addon_flags
	self.ammo_ids = data.upd.ammo_ids
end

function fake_item:write_server_object(se_obj)
	local t = {}
	t.custom_data = self.custom_data
	t.condition = self:condition()
	t.worked_time = self.worked_time
	t.current_src = self.current_src
	t.charge = self.charge_level
	if (self.charge_level or 0) > 0 and (self.current_src or 0) == 0 then
		self.current_src = 1
	end
	if self.art_loss and self.art_loss ~= 0 then
		t.is_transformed = true
		t.art_loss = self.art_loss
	end
	t.ammo_elapsed = self.ammo_elapsed
	t.ammo_type = self.ammo_type
	t.ammo_left = self.ammo_left
	t.addon_flags = self.addon_flags
	t.upd = {}
	t.upd.ammo_ids = self.ammo_ids

	netpk:modify(se_obj, t)
end

function fake_item:section()
	return self.__section
end

function fake_item:condition()
	return self.__condition
end

function fake_item:id()
	return self.__id
end

function fake_item:name()
	return self.__section..tostring(self.__id)
end

function fake_item:clsid()
	return self.__clsid
end

function fake_item:cost()
	return self.__cost
end

function fake_item:get_weight()
	return self.weight
end

function fake_item:is_artefact()
	return isArtefact(nil, self.__clsid)
end

function fake_item:is_outfit()
	return isOutfit(nil, self.__clsid)
end

function fake_item:is_knife()
	return isKnife(nil, self.__clsid)
end

function fake_item:is_ammo()
	return isAmmo(nil, self.__clsid)
end

function fake_item:is_scope()
	return isScope(nil, self.__clsid)
end

function fake_item:is_grenade()
	return isGrenade(nil, self.__clsid)
end

function fake_item:is_weapon()
	return isWeapon(self) and (not isGrenade(nil, self.__clsid))
end

function fake_item:get_container_arts()
	local cd = netpk:parse_custom_data(self.custom_data)
	local ret = {}

	if cd and cd.arts then
		local sect, cond, loss
		for n, str in pairs(cd.arts) do
			sect, cond, loss = unpack( string.explode(str, ":", true) )
			ret[tonumber(n)] = {
				s = sect,
				c = tonumber(cond) or 1,
				ar = tonumber(loss) or 0
			}
		end
	else
		local count = sys_ini:r_u32( self:section(), "container_slots" )
		for i = 1, count do
			ret[i] = { s = "_", c = 0, ar = 0 }
		end
	end

	return ret
end

local offset2iniline = {}
for k, v in pairs(artefact_offsets) do
	for kk, vv in pairs(v) do
		offset2iniline[vv] = {line = kk, type = k}
	end
end
function fake_item:get_inventory_item_float(offset)
	if self:is_artefact() then
		local t = offset2iniline[offset]
		if t then
			local res = 0
			if t.type == "conditions" then
				res = sys_ini:r_float(self.__section, t.line)
			else
				local s = sys_ini:r_string(self.__section, "hit_absorbation_sect")
				res = sys_ini:r_float(s, t.line)
			end
			if self.art_loss and self.art_loss ~= 0 then
				if t.type == "conditions" then
					res = res * self.art_loss
				else
					res = (res - 1)*self.art_loss + 1
				end
			end
			return res
		end
	end
	return 0
end

function fake_item:get_power_loss()
	return sys_ini:r_float_ex(self.__section, "power_loss", 1)
end

function fake_item:get_additional_inventory_weight()
	return sys_ini:r_float_ex(self.__section, "additional_inventory_weight", 0) * self.__condition
end

function fake_item:get_ammo_in_magazine()
	return self.ammo_elapsed
end

function fake_item:get_addon_flags()
	return self.addon_flags
end

function fake_item:get_ammo_type()
	return self.ammo_type
end

function fake_item:get_ammo_left()
	return self.ammo_left
end

function fake_item:get_charge_level()
	return self.charge_level
end

function fake_item:binded_object()
	return nil
end

function fake_item:destroy()
	fake_items[self.__id] = nil
end

