-- -*- mode: lua; encoding: windows-1251 -*-
-- bool InventoryUtilities::GreaterRoomInRuck(PIItem item1, PIItem item2)
local function sort_items(i1, i2)
	local s1 = i1:section()
	local s2 = i2:section()
	local w1 = sys_ini:r_u32(s1, "inv_grid_width")
	local w2 = sys_ini:r_u32(s2, "inv_grid_width")

	if w1 == w2 then
		local h1 = sys_ini:r_u32(s1, "inv_grid_height")
		local h2 = sys_ini:r_u32(s2, "inv_grid_height")
		if h1 == h2 then
			if s1 == s2 then
				return i1:id() > i2:id()
			end
			return s1 > s2
		end
		return h1 > h2
	end

	return w1 > w2
end

local db_click_timeout = 300

local ActiveBoxId = nil
---------------------------------------------------------------------------------------------------------

class "UICarBodyNew" (CUIScriptWnd)

function UICarBodyNew:__init(obj)
	super()

	self.quit_dik = bind_to_dik( key_bindings.kQUIT )
	get_console():execute( "unbind quit" )

	self.box = obj
	ActiveBoxId = obj:id()

	self.our_items = {}
	self.others_items = {}
	self.items_to_convert = {}

	self.others_weight = 0

	self.move_item = false

	self:InitControls()
	self:FillItems()

	xr_s.subscribe("item_take", self.OnItemTake, {self = self})
	xr_s.subscribe("item_drop", self.ShowWeight, {self = self})

	self.DescrWnd = ui_inv_descr.CUIDescriptionWnd(self, true)

	self.wnd = self

	Actor:give_info_portion("ui_car_body_new")
	bind_actor.hide_weapon("inv")
end

function UICarBodyNew:__finalize()
end

function UICarBodyNew:InitControls()
	self:Init(0, 0, 1024, 768)

	local xml = CScriptXmlInit()
	xml:ParseFile("ui_carbody_new.xml")

	xml:InitStatic("top_background", self)
	xml:InitStatic("bottom_background", self)

	local st = xml:InitStatic("actor_character", self)

	xml:InitStatic("actor_character:icon_static", st)

	local st2 = xml:InitStatic("actor_character:name_static", st)
	st2:SetText( Actor:character_name() )

	xml:InitStatic("actor_character:rank_caption", st)
	st2 = xml:InitStatic("actor_character:rank_static", st)
	st2:SetText( game.translate_string( ranks.get_obj_rank_name(Actor) ) )

	xml:InitStatic("actor_character:community_caption", st)
	st2 = xml:InitStatic("actor_character:community_static", st)
	st2:SetText( game.translate_string(Actor:character_community()) )

	self.actor_ruck = xml:InitStatic("our_bag_static", self)
	local bag = xml:InitStatic("dragdrop_list_our", self.actor_ruck)
	self:Register(bag, "ruck")
	self:AddCallbackEx("ruck", ui_events.STATIC_FOCUS_RECEIVED, self.OnBagFocus, "our_bag")
	self:AddCallbackEx("ruck", ui_events.STATIC_FOCUS_LOST, self.OnBagFocusLost, "our_bag")
	self.our_bag = ui_dragdrop_list.UIDragDropList( bag:GetWidth(), bag:GetHeight(), bag:GetText() )
	bag:AttachChild(self.our_bag)
	self.our_bag:Show(true)


	self.box_ruck = xml:InitStatic("others_bag_static", self)
	bag = xml:InitStatic("dragdrop_list_other", self.box_ruck)
	self:Register(bag, "box")
	self:AddCallbackEx("box", ui_events.STATIC_FOCUS_RECEIVED, self.OnBagFocus, "others_bag")
	self:AddCallbackEx("box", ui_events.STATIC_FOCUS_LOST, self.OnBagFocusLost, "others_bag")
	self.others_bag = ui_dragdrop_list.UIDragDropList( bag:GetWidth(), bag:GetHeight(), bag:GetText() )
	bag:AttachChild(self.others_bag)
	self.others_bag:Show(true)


	local ctrl = xml:Init3tButton("take_all_btn", self)
	self:Register(ctrl, "button_take_all")
	self:AddCallbackEx("button_take_all", ui_events.BUTTON_CLICKED, self.OnButton_take_all_clicked)

	ctrl = xml:Init3tButton("move_btn", self)
	self:Register(ctrl, "button_move")
	self:AddCallbackEx("button_move", ui_events.BUTTON_CLICKED, self.OnButton_move_clicked)

	self:ShowWeight()

	self.drag_item = ui_drag_item.UIDragItem()
	self:AttachChild(self.drag_item)
	self.drag_item:Show(false)
end

function UICarBodyNew:Update()
	CUIScriptWnd.Update(self)

	if self.first_click and self.first_click < time_global() then
		self.first_click = nil
	end

	if self.move_item then
		if self.last_cur_pos then
			local pos = self:GetCursorPos()
			if pos.x ~= self.last_cur_pos.x or pos.y ~= self.last_cur_pos.y then
				self.drag_item:Show(true)
				self.last_cur_pos = nil
			end
		else
			self.drag_item:SetWndPos( self:GetCursorPos():add( self.drag_item.shift ):get() )
		end
	end
end

function UICarBodyNew:OnItemTake(item)
	self:ShowWeight()

	local t = self.items_to_convert[item:id()]
	if t == nil then return end

	if t.condition<1 then
		item:set_condition(t.condition)
	end
	if t.ammo then
		item:set_ammo_elapsed(t.ammo)
	end

	table.insert(self.our_items, item)
	local itm, first = self.our_bag:AddItem(item)
	if first then
		local nm = itm.name.."_r"
		self:Register(itm, nm)
		self:AddCallbackEx(nm, ui_events.STATIC_FOCUS_RECEIVED, self.OnCellItemFocus, "our_bag", itm.name)
		self:AddCallbackEx(nm, ui_events.STATIC_FOCUS_LOST, self.OnCellItemFocusLost, "our_bag", itm.name)
	end

	self.items_to_convert[item:id()] = nil
end

function UICarBodyNew:ShowWeight()
	local inv_weight = Actor:get_inventory_weight()
	local max_weight = Actor:get_actor_max_weight()
	if actor_outfit then
		max_weight = max_weight + actor_outfit:get_additional_inventory_weight2()
	end

	local max_weight_text = string.format("%.1f", max_weight)
	if #max_weight_text < 5 then
		max_weight_text = string.rep(" ", 5 - #max_weight_text)..max_weight_text
	end
	local text = (inv_weight<max_weight and "" or "%c[255,255,0,0]")..
		string.format("%.1f", inv_weight)..
		" %c[default]/"..max_weight_text

	self.actor_ruck:SetText(text)
end

function UICarBodyNew:OnButton_take_all_clicked()
	for i, v in ipairs(self.others_items) do
		self:OnTakeItemFromBox( v:section() )
		self:ConvertFakeItem(v)
		self.others_bag:RemoveItem(v)
	end
	self.others_items = {}
	self.others_weight = 0
	self:ShowOthersWeight()
end

function UICarBodyNew:OnButton_move_clicked()
	if self.last_move_section and self.last_from_where then
		local bag = self[self.last_from_where]
		local list_names = bag:GetItemsBySection(self.last_move_section)
		if #list_names == 0 then return end

		for i, nm in ipairs(list_names) do
			while bag:GetItem(nm) do
				self:TransferItem(self.last_from_where, nm)
			end
		end
		self.last_move_section = nil
		self.last_from_where = nil
	end
end

function UICarBodyNew:FillItems()
	self.our_items = invbox_new.get_actor_items()
	table.sort(self.our_items, sort_items)
	for i, v in ipairs(self.our_items) do
		local itm, first = self.our_bag:AddItem(v)
		if first then
			local nm = itm.name.."_r"
			self:Register(itm, nm)
			self:AddCallbackEx(nm, ui_events.STATIC_FOCUS_RECEIVED, self.OnCellItemFocus, "our_bag", itm.name)
			self:AddCallbackEx(nm, ui_events.STATIC_FOCUS_LOST, self.OnCellItemFocusLost, "our_bag", itm.name)
		end
	end

	self.others_items = invbox_new.load_box_items(self.box)
	table.sort(self.others_items, sort_items)
	for i, v in ipairs(self.others_items) do
		local itm, first = self.others_bag:AddItem(v)
		if first then
			local nm = itm.name.."_b"
			self:Register(itm, nm)
			self:AddCallbackEx(nm, ui_events.STATIC_FOCUS_RECEIVED, self.OnCellItemFocus, "others_bag", itm.name)
			self:AddCallbackEx(nm, ui_events.STATIC_FOCUS_LOST, self.OnCellItemFocusLost, "others_bag", itm.name)
		end
		self.others_weight = self.others_weight + v:get_weight()
	end

	self:ShowOthersWeight()
end

function UICarBodyNew:ShowOthersWeight()
	local weight_text = string.format("%.1f", self.others_weight)
	if #weight_text < 5 then
		weight_text = string.rep(" ", 5 - #weight_text)..weight_text
	end
	self.box_ruck:SetText(weight_text)
end

function UICarBodyNew:TransferItem(from_where, item_name)
	local bag = self[from_where]
	local itm = bag and bag:GetItem(item_name)
	if not itm then return end

	local item = itm:GetTopItem()

	self.last_move_section = itm.section
	self.last_from_where = from_where

	if item.is_fake then
		local item_id = item:id()
		for i, v in ipairs(self.others_items) do
			if v:id() == item_id then
				table.remove(self.others_items, i)
				break
			end
		end

		self:OnTakeItemFromBox( item:section() )
		self:ConvertFakeItem(item)

		self.others_weight = self.others_weight - item:get_weight()
		self.others_bag:RemoveItem( item )
	else
		local obj = fake_inventory_item.fake_item(item)
		table.insert(self.others_items, obj)

		local item_id = item:id()
		for i, v in ipairs(self.our_items) do
			if v:id() == item_id then
				table.remove(self.our_items, i)
				break
			end
		end

		self:OnDropItemToBox( item:section() )

		local new_itm, first = self.others_bag:AddItem(obj)
		if first then
			local nm = new_itm.name.."_b"
			self:Register(new_itm, nm)
			self:AddCallbackEx(nm, ui_events.STATIC_FOCUS_RECEIVED, self.OnCellItemFocus, "others_bag", new_itm.name)
			self:AddCallbackEx(nm, ui_events.STATIC_FOCUS_LOST, self.OnCellItemFocusLost, "others_bag", new_itm.name)
		end
		self.others_weight = self.others_weight + obj:get_weight()

		self.our_bag:RemoveItem( item )

		shiftCheckDropItem()
		xr_statistic.set_id(item:id(), nil)
		del_obj_by_id( item:id() )
	end

	self:ShowOthersWeight()
end

function UICarBodyNew:ConvertFakeItem(item)
	local sobj
	local sect = item:section()
	if item:is_ammo() then
		sobj = AI:create_ammo(sect, vector():set(0,0,0), 0, 0, 0, item.ammo_left)
	elseif (item.addon_flags and item.addon_flags ~= 0)
		or (item.ammo_type and item.ammo_type ~= 0)
	then
		local spawn_pos = Actor:position():add(vector():set(2, 2, 2))
		sobj = AI:create(sect, spawn_pos, Actor:level_vertex_id(), Actor:game_vertex_id())
		level.client_spawn_manager():add(sobj.id, -1, function(id, obj)
			Actor:transfer_item(obj, Actor)
		end)
	else
		sobj = AI:create(sect, vector():set(0,0,0), 0, 0, 0)
	end
	sobj = AI:object(sobj.id)

	item:write_server_object(sobj)

	self.items_to_convert[sobj.id] = {
		condition	= item:condition(),
		ammo		= item:get_ammo_in_magazine()
	}

	if isArtefact(sobj) and bind_det_arts.is_detected_art(sobj:section_name()) then
		xr_statistic.set_id(sobj.id, true)
	end

--	item:destroy()
end

function UICarBodyNew:OnSpawnItem(obj, condition, ammo)
	if condition<1 then
		obj:set_condition(condition)
	end
	if ammo then
		obj:set_ammo_elapsed(ammo)
	end
	table.insert(self.our_items, obj)
	local itm, first = self.our_bag:AddItem(obj)
	if first then
		local nm = itm.name.."_r"
		self:Register(itm, nm)
		self:AddCallbackEx(nm, ui_events.STATIC_FOCUS_RECEIVED, self.OnCellItemFocus, "our_bag", itm.name)
		self:AddCallbackEx(nm, ui_events.STATIC_FOCUS_LOST, self.OnCellItemFocusLost, "our_bag", itm.name)
	end
end

function UICarBodyNew:OnTakeItemFromBox(section)
	if section == "zamok" then
		zamok.remove(self.box)
	end
end
function UICarBodyNew:OnDropItemToBox(section)
	if section == "zamok" then
		zamok.add_in_fake_box(self.box)
	end
end

function UICarBodyNew:OnCellItemFocus(from_where, item_name)
	self.item_in_focus = item_name

	local bag = self[from_where]
	local itm = bag:GetItem(item_name)
	if itm then
		xr_s.on_event("cell_item_focus", itm:GetTopItem())
	end
end
function UICarBodyNew:OnCellItemFocusLost(from_where, item_name)
	if self.item_in_focus == item_name then
		self.item_in_focus = nil
	end

	local bag = self[from_where]
	local itm = bag:GetItem(item_name)
	if itm then
		xr_s.on_event("cell_item_focus_lost", itm:GetTopItem())
	end
end

function UICarBodyNew:OnBagFocus(bag)
	self.bag_in_focus = bag
end
function UICarBodyNew:OnBagFocusLost(bag)
	if self.bag_in_focus == bag then
		self.bag_in_focus = nil
	end
end

function UICarBodyNew:Quit()
	local key = hotkeys.dik2key( self.quit_dik )
	if not key:find("MOUSE") then key = "k"..key end
	get_console():execute( "bind quit "..string.lower( key ) )

	self.our_bag:Destroy()
	self.others_bag:Destroy()
	self.our_bag = nil
	self.others_bag = nil
	self.actor_ruck = nil
	self.drag_item.shift = nil
	self.drag_item = nil
	self.DescrWnd:Remove()
	self.DescrWnd = nil
	self.last_cur_pos = nil

	invbox_new.save_box_items(self.box, self.others_items)
	self.box = nil
	ActiveBoxId = nil

	xr_s.unsubscribe("item_take", self.OnItemTake)
	xr_s.unsubscribe("item_drop", self.ShowWeight)

	self:ClearCallbacks()
	self:GetHolder():start_stop_menu(self, true)
	self.wnd = nil

	Actor:give_info_portion("ui_car_body_new_hide")
	bind_actor.restore_weapon("inv")
end

function UICarBodyNew:OnKeyboard(dik, keyboard_action)
	CUIScriptWnd.OnKeyboard(self, dik, keyboard_action)

	if keyboard_action == ui_events.WINDOW_KEY_PRESSED then
		local bind = dik_to_bind(dik)
		if bind == key_bindings.kUSE or dik == self.quit_dik then
			self:Quit()
			return  true
		end
	end

	if dik ~= DIK_keys.DIK_LMOUSE then
		return true
	end

	if keyboard_action == ui_events.WINDOW_KEY_PRESSED then
		if self.first_click == nil then
			if self.item_in_focus and self.bag_in_focus then
				self.selected_item = self.item_in_focus
				self.item_owner = self.bag_in_focus

				local bag = self[self.item_owner]
				local itm = bag:GetItem(self.selected_item)
				if itm then
					self.drag_item:InitItem( itm:GetTopItem() )
					local x = itm:GetAbsolutePosX()
					local y = itm:GetAbsolutePosY()
					self.last_cur_pos = self:GetCursorPos()
					self.drag_item.shift = vector2():set(
						x - self.last_cur_pos.x,
						y - self.last_cur_pos.y
					)
					self.drag_item:Init( x, y, itm:GetWidth(), itm:GetHeight() )

					self.move_item = true
				end
			end
			self.first_click = time_global() + db_click_timeout
		else
			if self.first_click > time_global() then
				if self.item_in_focus then
					self:TransferItem(self.bag_in_focus, self.item_in_focus)
					if ShiftPressed() then
						self:OnButton_move_clicked()
					end
				end
				self.first_click = time_global() + db_click_timeout
			else
				self.first_click = nil
			end
		end
	elseif keyboard_action == ui_events.WINDOW_KEY_RELEASED then
		if self.move_item then
			self.last_cur_pos = nil
			self.move_item = false
			if self.drag_item:IsShown() then
				self.drag_item:Show(false)
			end
		end

		if self.selected_item
			and self.bag_in_focus ~= nil
			and self.item_owner ~= self.bag_in_focus
		then
			self:TransferItem(self.item_owner, self.selected_item)
			if ShiftPressed() then
				self:OnButton_move_clicked()
			end
		end
		self.selected_item = nil
		self.item_owner = nil
	end

	return true
end

--------------------------------------------------------------
function get_active_box()
	return ActiveBoxId
end


