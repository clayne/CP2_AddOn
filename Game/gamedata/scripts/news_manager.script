-- -*- mode: lua; encoding: windows-1251 -*-
local pda_news = xr_sound.get_safe_sound_object([[device\pda\pda_news]])
local pda_tips = xr_sound.get_safe_sound_object([[device\pda\pda_tip]])
local pda_task = xr_sound.get_safe_sound_object([[device\pda\pda_objective]])
local pda_article = xr_sound.get_safe_sound_object([[device\pda\new_info]])

-- При добавлении новых квестовиков добавлять для них иконки в ui_iconstotal и прописывать сюда полное имя, как оно идет в смс. Или прописывать sender в вызов send_tip. Сортировать по алфавиту.
local tips_icons = {
	aaz 		= {249,1128,"ааз:"},
	adrenalin 	= {0,1880,"адреналин:"},
	akill		= {332,1128,"акилл:"},
	akim 		= {166,1081,"аким:"},
	alexandrych = {166,1739,"александрыч:"},
	alfa2012	= {498,1316,"альфа 2012:"},
	alp			= {332,1175,"альпинист:"},
	anna		= {0,1269,"анна:"},
	andersen	= {498,1363,"андерсен:"},
	ara 		= {415,423,"ара:"},
	arena    	= {332,141,"арни:"},
	arhara 		= {83,1081,"архара:"},
	ariadna 	= {166,1692,"ариадна:"},
	barman   	= {332,235,"бармен:"},
	baty 		= {249,1316,"батя:"},
	bes 		= {332,1645,"бес:"},
	bibliofrend = {0,1175,"прайм:"},
	bibliofrend_black = {0,1222,"прайм:"},
	bland 		= {166,1598,"блэнд:"},
	blondy 		= {166,1833,"блондинка:"},
	bocman 		= {83,1598,"боцман:"},
	borman 		= {498,1175,"борман:"},
	boroda 		= {0,1598,"борода:"},
	borov 		= {332,564,"боров:"},
	brodaga 	= {0,1504,"бродяга:"},
	bubulyka 	= {0,1316,"сталкер бубулюка:"},
	buusty		= {83,1410,"басти:"},
	chernomor 	= {166,1316,"черномор:"},
	coll	 	= {664,423,"коллекционер:"},
	dan 		= {166,987,"дэн:"},
	dasha 		= {166,1880,"даша:"},
	death    	= {0,752,"погиб сталкер:"},
	default  	= {0,658}, -- по умолчанию
	dezertir	= {332,0,"дезертир:"},
	diak 		= {498,1457,"дьяк:"},
	dimak 		= {249,1081,"димак:"},
	dmitriev 	= {498,0,"профессор дмитриев:"},
	docent 		= {415,1739,"доцент:"},
	doctor 		= {415,846,"доктор:"},
	dolgovazyi	= {415,1786,"долговязый:"},
	doctor_black = {83,1551,"чёрный доктор:"},
	dolg     	= {498,141,"долг:"},
	dolg1     	= {498,141,"\"долг\":"},
	dolg2     	= {498,141,"квад:"},
	dragunof	= {249,1833,"драгунов:"},
	duda 		= {166,1551,"дуда:"},
	ecolog   	= {498,0},
	elsa 		= {0,1739,"эльза:"},
	err 		= {913,799}, -- error
	fanat		= {332,1551,"фанат:"},
	father_pantera = {83,1833,"отец пантеры:"},
	fenix 		= {498,1645,"феникс:"},
	fenrir 		= {0,1034,"фенрир:"},
	filatov		= {498,1692,"капитан филатов:"},
	freedom  	= {498,94,"свобода:"},
	freedom1  	= {498,94,"\"свобода\":"},
	freeman  	= {498,1034,"фримен:"},
	fric 		= {83,1504,"фриц:"},
	gavr		= {332,1739,"гавр:"},
	gen_info 	= {498,47},		--{0,658}, -- общая инфа
	gila		= {332,1786,"жила:"},
	ginekolog 	= {0,1927,"гинеколог:"},
	ginekolog2 	= {0,1927,"шура гинеколог:"},
	gologramma 	= {498,1269,"голограмма:"},
	grach		= {332,1081,"грач:"},
	haliava		= {332,1269,"халява:"},
	himera 		= {83,1927,"химера:"},
	himik 		= {249,1222,"химик:"},
	holod 		= {83,1974,"холод:"},
	iskra 		= {166,1128,"искра:"},
	ivancov		= {332,329,"иванцов:"},
	ivancov1	= {332,329,"капитан иванцов:"},
	kalinin		= {498,1410,"калинин:"},
	kalmyk		= {249,1927,"калмык:"},
	kartograf  	= {913,235,"картограф:"},
	kep		  	= {415,1974,"кэп:"},
	kidalo		= {249,1833,"санёк разбойник:"},
	killer   	= {913,940,"наёмники:"},
	klenov 		= {83,1316,"клёнов:"},
	klenov1		= {83,1316,"профессор клёнов:"},
	klyk 		= {83,1034,"клык:"},
	kolmogor 	= {83,1269,"колмогор:"},
	korsar		= {332,1081,"корсар:"},
	korshun		= {498,1739,"коршун:"},
	kostya		= {332,1598,"костя:"},
	kostylnuga 	= {83,1175,"сержант костыльнога:"},
	kotobegemot = {0,987,"котобегемот:"},
	kot			= {498,1081,"кот:"},
	krest		= {498,1504,"крест:"},
	krisyk		= {332,1692,"крысюк:"},
	kruglov		= {332,1363,"проф%. круглов:"},
	kruglov1	= {332,1363,"профессор круглов:"},
	kruglov2	= {332,1363,"круглов:"},
	kruger		= {249,1692,"крюгер:"},
	kulinar		= {332,1645,"кулинар:"},
	kulinar2	= {332,1645,"артём кулинар:"},
	krot     	= {332,47,"крот:"},
	kuzmat 		= {166,1927,"кузькина мать:"},
	kuznecov 	= {332,752,"кузнецов:"},
	kuznecov2 	= {332,752,"майор кузнецов:"},
	lesnik 		= {166,1269,"лесник:"},
	lis 		= {498,1222,"лис:"},
	lisiy 		= {415,141,"лысый:"},
	lentay		= {249,1645,"лентяй:"},
	lobsang 	= {0,1410,"лобсанг:"},
	loh 		= {332,611,"сергей лохматый:"},
	lovkach 	= {664,517,"ловкач:"},
	luber		= {332,1316,"макс любер:"},
	lucash 		= {415,235,"лукаш:"},
	ludmila		= {0,1692,"людмила:"},
	maks		= {332,1410,"макс:"},
	maksimilian = {166,1175,"максимилиан:"},
	maria 		= {0,1551,"мария:"},
	masha 		= {166,1833,"маша:"},
	meceniy 	= {913,846,"меченый:"},
	mercaushy 	= {249,1175,"мерцающий:"},
	molniy 		= {249,1034,"молния:"},
	monolith 	= {913, 893,"монолит:"},
	morozko 	= {249,1410,"морозко:"},
	muha 		= {83,1739,"муха:"},
	nano 		= {913,752}, -- nano_suit
	nazar 		= {249,987,"назар:"},
	noi 		= {498,1598,"ной:"},
	norman 		= {166,1457,"норман:"},
    nodata   	= {249,940,"источник неизвестен:"},
    nodata1   	= {249,940,"%[источник неизвестен%]"},
	o_soznanie 	= {415,893,"о%-сознание:"},
	obmorok 	= {166,1504,"обморок:"},
	op2	 		= {332,987,"команда создателей оп%-2:"},
	osvedomitel	= {498,987,"осведомитель:"},
	otshelnik 	= {0,1833,"отшельник:"},
	oz 			= {913,611,"профессор озерский:"},
	pantera 	= {83,1128,"пантера:"},
	parfumer 	= {166,1410,"парфюмер:"},
	peregar 	= {498,1551,"перегар:"},
	petrenko 	= {332,376,"петренко:"},
	petrenko1 	= {332,376,"полковник петренко:"},
	petrov 		= {166,1457,"сталкер петров:"},
	petrovich 	= {249,1269,"петрович:"},
	petruha 	= {332,799,"петруха:"},
	pftp		= {913,752,"пфтп"},
	piligrim 	= {0,1974,"пилигрим:"},
	plichko		= {332,282,"пличко:"},
	potap		= {249,1880,"потап:"},
	povar		= {249,1739,"повар:"},
	prapor		= {332,1880,"прапор:"},
	prigorshnya = {166,1786,"пригоршня:"},
	prizrak  	= {415,705,"призрак:"},
	proper70 	= {0,1457,"пропер семидесятый:"},
	provodnik	= {332,1504,"проводник:"},
	pula		= {332,1457,"пуля:"},
	pulemet		= {332,1081,"санька пулемётчик:"},
	questman_death = {664,470}, -- смерть квестовика/гг
	radist 		= {166,1222,"радист:"},
	resident_evil = {0,1128,"обитель зла:"},
	remind		= {913,423,"напоминания:"},
	romale		= {166,1974,"рома ромале:"},
	saharov  	= {332,470,"сахаров:"},
	sak			= {415,987,"сяк:"},
	sapsan 		= {83,1692,"сапсан:"},
	sedoy 		= {83,1363,"седой:"},
	semenov		= {83,1363,"семёнов:"},
	semeckiy	= {332,1974,"юрий семецкий:"},
	shadow_monolit = {83,1880,"тень монолита:"},
	shadowman	= {249,1974,"шедоумен:"},
	shahter 	= {166,1034,"шахтёр:"},
	shnira		= {332,1692,"шныра:"},
	shurup		= {332,1222,"шуруп:"},
	shax		= {249,1457,"шахматист:"}, 
	sherstuk	= {249,1551,"шерстюк:"},
	sherstuk1	= {249,1551,"прапорщик шерстюк:"},
	shi3 		= {249,1363,"ши3:"},
	sid 		= {249,611,"сидорович:"},
	skraga		= {249,1598,"скряга:"},
	sledopyt	= {332,1034,"следопыт:"}, 
	snegir 		= {0,1645,"славик снегирь:"},
	solvador 	= {83,1645,"сольвадор:"},
	stalker  	= {0,658},
	starik		= {415,1927,"старик:"},
	starogil	= {664,658,"старый жил:"},
	str 		= {913,705,"стрелок:"},
	suslov 		= {0,1363,"суслов:"},
	sviblov 	= {166,1645,"свиблов:"},
	svyaz	 	= {747,94,"оператор связи:"},
    tolik		= {249,1504,"толик:"},
	trade	 	= {0,0}, -- деньги
	trader   	= {332,893,"сидорович:"}, -- сидорович
	uniq  	 	= {498,47,"общий канал:"},
	uniq1  	 	= {498,47,"локальная сеть:"},
	unknown 	= {913,799,"неизвестный сталкер:"},
	vesker 		= {0,1786,"вескер:"},
	viking 		= {415,94,"викинг:"},
	vitamin 	= {83,1786,"витамин:"},
	vol 		= {913,517,"волазар:"}, -- волазар первый
	vol_new 	= {913,564,"волазар:"},
	volkov	 	= {249,1645,"профессор волков:"},
	voronin 	= {332,423,"воронин:"},
	voronin1 	= {332,423,"генерал воронин:"},
	voron 		= {498,1128,"ворон:"},
	voron1 		= {498,1128,"витёк ворон:"},
	vasiliy		= {415,1034,"василий:"},
	vasya9		= {498,376,"вася девятый:"},
    weaprep 	= {0,517}, -- апгрейд оружия
	wolf	 	= {332,940,"волк:"},
	wolffrend 	= {0,1081,"вожак:"},
	yakut		= {332,1927,"якут:"},
	yurik		= {249,1786,"юрик:"},
	zahar	 	= {415,1880,"захар:"},
	zashita 	= {664,141,"система защиты:"},
	zemlyak 	= {83,1457,"земляк:"},
	ziklop 		= {83,987,"циклоп:"},
	zlobny 		= {166,1363,"злобный:"}
}

-- Получение иконки отправителя
function get_sender_icon(text, sender)
	if sender == nil or not tips_icons[sender] then
		-- пробуем найти иконку по заголовку СМС
		sender = "default"
		text = string.lower(text)
		-- Получаем заголовок
		local f1 = string.find(text, "]", 1, true)
		if f1 then
			local f2 = string.find(text, "\\n%c[", f1, true)
			if f2 then
				local caption = string.sub(text, f1+1, f2-1)..":"
				if #caption > 2 then
					text = caption
				end
			end
			for k,v in pairs(tips_icons) do
				if (v[3] and string.find(text, "^"..v[3])) then
					sender = k
					break
				end
			end
		end
	end

	return tips_icons[sender][1], tips_icons[sender][2], sender
end

function send_tip(news_id, timeout, sender, showtime, sender_id, func, _shift)
	if news_id == nil or type(news_id) ~= "string" then
		log("! [news_manager.send_tip]: news_id is not string!")
		news_manager.send_tip("%[gray2]АХТУНГ!!!\\n%[red][news_manager.send_tip]: news_id is not string! See log for details.")
		table.print({news_id, timeout, sender, showtime, sender_id, func, _shift})
		return false
	end

	if timeout == nil then
		timeout = 0
	elseif timeout > 0 then
		start_real_timer("sendtip", timeout, {news_id, 0, sender, showtime, sender_id, func, _shift})
		return true
	end
--[[
	if sender_id ~= nil then
	--	printf("try to send tips for [%s]", tostring(sender_id))
		local npc = AI:story_object(sender_id)
		if npc then
			if npc.online then
				--в онлайне проверяем на раненность
				if xr_wounded.is_heavy_wounded_by_id(npc.id) then
					log("[PDA]Cannot send tips [%s], sender is heavy wounded", tostring(news_id))
					return false
				end
			end
			-- в других случаях только на смерть
			if npc.alive and not npc:alive() then
				log("[PDA]Cannot send tips [%s], sender is dead", tostring(news_id))
				return false
			end
		end
	end
]]
	--' Играем дефолтный звук
	pda_tips:play_no_feedback(Actor, sound_object.s2d, timeout, vector(), 1.0)

	--' играем озвучку
	local ozvuchka = news_data_voices.get_sound(news_id)
	if ozvuchka then
		xr_sound.stop_prev_sms_sound()
		local snd_obj = xr_sound.get_safe_sound_object(ozvuchka)
		if snd_obj then
			snd_obj:play(Actor, timeout+1, sound_object.s2d)
			--' Необходимо поставить время показа по длине сцены
			showtime = snd_obj:length() + 1500
		end
	end
	
	if showtime == nil then showtime = 5000 end

	if func then
		start_real_timer("run", timeout + showtime/1000 + (_shift or 1), func)
	end

	local news_text = game.translate_string(news_id)
	if (string.find(news_text, "\\n%c[", 1, true)) == nil then
		-- Попробуем получить имя отправителя для заголовка
		local sender_name = nil
		if sender_id then	-- по story_id
			local npc = AI:story_object(sender_id)
			if npc then
				local data = netpk:get(npc, netpk.fState)
				sender_name = data.character_name
			end
		elseif sender and tips_icons[sender] then	-- по названию иконки
			sender_name = tips_icons[sender][3]
			if sender_name then
				sender_name = string.upper(sender_name:sub(1,1))..sender_name:sub(2)
			end
		end
		news_text = "%c[gray2]"..(sender_name or game.translate_string("st_tip")).."\\n".."%c[default]"..news_text
	end

	-- Определяем, ГГ как отправитель по игре уже Cтрелок, или еще Меченый
	if string.find(news_text, "%$") then
		news_text = format_text_pairs(news_text, {
			actor = Actor:character_name(),
			user = user_name()
		} )
	end

	local x,y,s = get_sender_icon(news_text, sender)
	Actor:give_game_news(news_text.."\\n ", "ui\\ui_iconsTotal", Frect():set(x,y,83,47), timeout*1000, showtime)
	-- if Actor:is_talking() then	
		-- Actor:give_talk_message(news_text, "ui\\ui_iconsTotal", Frect():set(x,y,83,47), "iconed_answer_item")
	-- end	
	return true
end

function send_tip_nosound(actor, news_id, timeout, sender)
	if news_id == nil then return end

	timeout = 0

	--' Играем дефолтный звук
	pda_tips:play(Actor, timeout, sound_object.s2d)

	local news_sound = news_data_voices.get_sound(news_id)
	if news_sound then
		return xr_sound.get_safe_sound_object(news_sound)
	end

	return nil
end

local action_descr_by_type = {
	new = "general_new_task",
	update = "general_update_task",
	complete = "general_complete_task",
	fail = "general_fail_task"
}

local cycle_task = {
	"eliminate_lager",
	"defend_lager",
	"kill_stalker",
	"artefact",
	"monster_part",
	"find_item"
}

function send_task(actor, type, task, objective)
	-- u3_utils.printf("send_task function started with type: "..type..".")
	if Actor == nil then return false end
	
	local task_title = task:get_title()
	local task_time = string.find(task_title, "\\n", 1, true)
	if task_time then
		task_title = string.sub(task_title, 1, task_time-1)
	end
	local skip_autosave = false -- пропуск циклических заданий
	local news_text, task_texture, task_rect
	local objective_index = objective:get_idx() + 1
	
	--' Играем дефолтный звук
	pda_task:play(Actor, 0, sound_object.s2d)

	-- цвет сообщения
	local text_color = "%c[gray2]"
	if type == "fail" then
		text_color = "%c[red]"
	end
	
	-- циклическое ли задание?
	local cycle_task_type = nil
	for i,task_type in ipairs(cycle_task) do
		if task_title == game.translate_string(task_type) then
			cycle_task_type = i
			break
		end
	end
	
	if cycle_task_type then
		skip_autosave = true
		
		--' Циклическое задание - берем координаты из текстуры таска
		task_texture, task_rect = get_texture_info("ui_iconsTotal_"..cycle_task[cycle_task_type], "ui_iconsTotal_stalker10")
		
		news_text = text_color..game.translate_string(action_descr_by_type[type]).."\\n"..
		"%c[green_blue]"..game.translate_string(task_title)..": %c[green_blue_light2]"..game.translate_string(task:get_objective(1):get_description())
	else
		--' Берем координаты единой текстуры
		task_texture, task_rect = get_texture_info("ui_iconsTotal_stalker10", "ui_iconsTotal_stalker10")
		
		news_text = text_color..game.translate_string(action_descr_by_type[type]).."\\n"..
		"%c[green_blue]"..game.translate_string(task_title)
		
		if type ~= "complete" and type ~= "fail" then
			-- workaround for incomplete objective list
			if task:get_objectives_cnt() == objective_index then
				objective_index = objective_index - 1
			end
			
			if type == "new" then
				local obj_desc = task:get_objective(objective_index):get_description()
				if obj_desc ~= nil then
					news_text = news_text..": %c[green_blue_light2]"..game.translate_string(obj_desc)
				end
			elseif type == "update" then
				local obj_desc1 = task:get_objective(objective_index-1):get_description()
				local obj_desc2 = task:get_objective(objective_index):get_description()
				if obj_desc1 ~= nil then
					news_text = news_text.."\\n".."%c[green_blue_light2]Завершено: "..game.translate_string(obj_desc1)
				end
				if obj_desc2 ~= nil then
					news_text = news_text.."\\n".."%c[green_blue_light2]Следующее: "..game.translate_string(obj_desc2)
				end
			end
		end
		
		-- считаем задания
		if type == "update" then
			xr_statistic.add_subtask()
		elseif type == "complete" then
			xr_statistic.add_subtask()
			xr_statistic.add_task()
		end
	end

	if Actor:is_talking() then	
		Actor:give_talk_message(news_text, task_texture, task_rect, "iconed_answer_item")
	end	
	--выдаем в любом случае чтобы попало в дневник
	Actor:give_game_news(news_text, task_texture, task_rect, 0, 10000)
	
	if type == "new" or
		type == "update"
	then
		--' Выдать новое подзадание
		if task:get_objectives_cnt() == objective_index then
			return
		end
		news_text = game.translate_string(task:get_objective(objective_index):get_description())
	else
		news_text = text_color..game.translate_string(action_descr_by_type[type])..
		"\\n".."%c[green_blue]"..game.translate_string(task_title)
	end

	-- автосохранение только при получении и сдаче задания. циклические задания игнорируются.
	if not skip_autosave then
		local news_text_save = game.translate_string(task_title)
		if type == "complete" then
			news_text_save = news_text_save.." - завершено"
		end
		
		-- удаляем предыдущий таймер на сохранение при сдаче/получении нескольких квестов в одном диалоге 
		-- сохраняем только самый последний автосейв по завершении диалога
		if type == "new" or type == "complete" then
			remove_timer("autosave")
			start_real_timer("autosave", 3, news_text_save)
		end
	end

	local hud = get_hud()
	hud:AddCustomStatic("main_task", true)
	hud:GetCustomStatic("main_task"):wnd():SetTextST(news_text)
	hud:GetCustomStatic("main_task").m_endTime = time_global()/1000 + 7
end

local article_types = {
	[0] = "general_new_encyclopedy",
	[1] = "general_new_diary",
	[2] = "st_new_task_article",
	[3] = "st_found_new_info"
}
function send_encyclopedy(article_type, group, name)
	if group == "archievements" then
		return
	end

	pda_article:play(Actor, 0, sound_object.s2d)

	if article_type == 2 then group = string.match(group, "^[^/]+") end

	local task_texture, task_rect = get_texture_info("ui_iconsTotal_locations", "ui_iconsTotal_locations")
	local news_text = "%c[gray2]"..game.translate_string(article_types[article_type]).."\\n"..
		"%c[yellow]"..game.translate_string(group)
	if article_type~=2 then 
		news_text = news_text..":%c[yellow_light] "..game.translate_string(name)
	end
	if Actor:is_talking() then
		Actor:give_talk_message(news_text, task_texture, task_rect, "iconed_answer_item")
	end	
	Actor:give_game_news(news_text, task_texture, task_rect, 0, 7000)
end

function send_treasure(name, level_name)
	pda_news:play(Actor, 0, sound_object.s2d)
	local task_texture, task_rect = get_texture_info("ui_iconsTotal_abstract5")
	
	local news_text = "%c[gray2]"..game.translate_string("st_found_new_treasure").."\\n".."%c[red_sms]"..game.translate_string(level_name)..": %c[gray3]"..game.translate_string(name)
	if Actor:is_talking() then	
		Actor:give_talk_message(news_text, task_texture, task_rect,"iconed_answer_item")
	end	
	Actor:give_game_news(news_text, task_texture, task_rect, 0, 7000)
end

function get_inv_name(section)
	return sys_ini:r_string_wq(section,"inv_name")
end

function relocate_item(type, item, num)
	if Actor == nil then return false end
	if num==nil then num = 1 end
	local cnt = num>1 and "%c[gray2] x"..tostring(num) or ""
	--' Играем дефолтный звук
	if type == "in" then
		local task_texture, task_rect = get_texture_info("ui_iconsTotal_found_thing")
		local news_text = "%c[green]"..game.translate_string("general_in_item").."\\n".."%c[default]"..game.translate_string(get_inv_name(item))..cnt
		if Actor:is_talking() then
			Actor:give_talk_message(news_text, task_texture, task_rect,"iconed_answer_item")
		end
		Actor:give_game_news(news_text, task_texture, task_rect, 0, 5000)	
	elseif type == "out" then
		local task_texture, task_rect = get_texture_info("ui_iconsTotal_lost_thing")
		local news_text = "%c[red]"..game.translate_string("general_out_item").."\\n".."%c[default]"..game.translate_string(get_inv_name(item))..cnt
		if Actor:is_talking() then
			Actor:give_talk_message(news_text, task_texture, task_rect,"iconed_answer_item")
		end
		Actor:give_game_news(news_text, task_texture, task_rect, 0, 5000)
	end
end

function relocate_money(actor, type, amount)
	if Actor == nil then return false end

	--' Играем дефолтный звук
	if type == "in" then
		local task_texture, task_rect = get_texture_info("ui_iconsTotal_found_money")
		local news_text = "%c[green]"..game.translate_string("general_in_money").."\\n".."%c[default]"..game.translate_string(tostring(amount))
		
		if Actor:is_talking() then
			Actor:give_talk_message(news_text, task_texture, task_rect, "iconed_answer_item")
		end
		Actor:give_game_news(news_text, task_texture, task_rect, 0, 5000)
	elseif type == "out" then
		local task_texture, task_rect = get_texture_info("ui_iconsTotal_lost_money")
		local news_text = "%c[red]"..game.translate_string("general_out_money").."\\n".."%c[default]"..game.translate_string(tostring(amount))
		
		if Actor:is_talking() then
			Actor:give_talk_message(news_text, task_texture, task_rect, "iconed_answer_item")
		end
		Actor:give_game_news(news_text, task_texture, task_rect, 0, 5000)
	end
end
