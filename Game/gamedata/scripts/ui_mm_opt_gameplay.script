-- -*- mode: lua; encoding: windows-1251 -*-
class "opt_gameplay" (CUIWindow)

function opt_gameplay:__init() super()
end

function opt_gameplay:__finalize()

end

function opt_gameplay:InitControls(x, y, xml, handler)
	self:Init(x,y, 738, 416)
	self:SetAutoDelete(true)
	
	self.bk = xml:InitFrame("frame", self)
	self.scroll_v = xml:InitScrollView("tab_gameplay:scroll_v", self)

	local _st = xml:InitStatic("tab_gameplay:templ_item", self.scroll_v)							-- Скриптовая консоль
	handler.n_console = xml:InitCheck("tab_gameplay:check_console", _st)

	_st = xml:InitStatic("tab_gameplay:templ_item", self.scroll_v)									-- Чит-меню
	handler.n_spawner = xml:InitCheck("tab_gameplay:check_spawner", _st)

	_st = xml:InitStatic("tab_gameplay:templ_item", self.scroll_v)									-- Удалить глючные объекты
	xml:InitStatic("tab_gameplay:cap_del", _st)
	xml:InitStatic("tab_gameplay:texture_del", _st)
	handler.del = xml:InitEditBox("tab_gameplay:edit_del", _st)

	_st = xml:InitStatic("tab_gameplay:templ_item", self.scroll_v)									-- Купить квестовый предмет
	xml:InitStatic("tab_gameplay:cap_buy", _st)
	xml:InitStatic("tab_gameplay:texture_buy", _st)
	handler.buy = xml:InitEditBox("tab_gameplay:edit_buy", _st)

	_st = xml:InitStatic("tab_gameplay:templ_item", self.scroll_v)									-- Возвращатель/ускоритель работает независимо ни от каких условий
	handler.runner_frvr = xml:InitCheck("tab_gameplay:check_runner_frvr", _st)

	_st = xml:InitStatic("tab_gameplay:templ_item", self.scroll_v)									-- Автообыск трупов
	handler.autograb_body = xml:InitCheck("tab_gameplay:check_autograb", _st)

	_st = xml:InitStatic("tab_gameplay:templ_item", self.scroll_v)									-- Надпись о попадании объекта в фокус фотоапппарата
	handler.fotofocus = xml:InitCheck("tab_gameplay:check_fotofocus", _st)

	_st = xml:InitStatic("tab_gameplay:templ_item", self.scroll_v)									-- Автоматическое фотографирование всего, что видит ГГ
	handler.autofoto = xml:InitCheck("tab_gameplay:check_autofoto", _st)

	_st = xml:InitStatic("tab_gameplay:templ_item", self.scroll_v)									-- Облегчения
	xml:InitLabel("tab_gameplay:cap_cheat", _st)

	_st = xml:InitStatic("tab_gameplay:templ_item", self.scroll_v)									-- Тайники
	_st:SetHeight( 70 )
	handler.amk_treasures = xml:InitTab("tab_gameplay:radio_amk_treasure", _st)

--	_st = xml:InitStatic("tab_gameplay:templ_item", self.scroll_v)									-- Рандомная награда за ЦЗ
--	handler.rnd_reward = xml:InitCheck("tab_gameplay:check_rnd_reward", _st)

	_st = xml:InitStatic("tab_gameplay:templ_item", self.scroll_v)									-- Реальные деньги с НПС
	handler.real_money = xml:InitCheck("tab_gameplay:check_real_money", _st)

	_st = xml:InitStatic("tab_gameplay:templ_item", self.scroll_v)									-- Радио "Чернобыльский Апрель"
	handler.new_radio = xml:InitCheck("tab_gameplay:check_new_radio", _st)
	-- Если файлы не закинули - отключаем опцию
	if getFS():exist("$game_sounds$", "radio\\music_1.ogg")==nil then
		handler.new_radio:SetCheck(false)
		handler.new_radio:Enable(false)
	end

	_st = xml:InitStatic("tab_gameplay:templ_item", self.scroll_v)									-- СМС от Уборщика
	handler.garbagecollector_sms = xml:InitCheck("tab_gameplay:check_gc_sms", _st)

	_st = xml:InitStatic("tab_gameplay:templ_item", self.scroll_v)									-- Неатмосферные СМС
	handler.new_sms = xml:InitCheck("tab_gameplay:check_sms", _st)

	_st = xml:InitStatic("tab_gameplay:templ_item", self.scroll_v)									-- Расширенные анимации
	handler.animations = xml:InitCheck("tab_gameplay:check_animations", _st)

	_st = xml:InitStatic("tab_gameplay:templ_item", self.scroll_v)									-- Показывать 100 советов по выживанию в Зоне
	handler.pause_sl = xml:InitCheck("tab_gameplay:check_pause_sl", _st)

	_st = xml:InitStatic("tab_gameplay:templ_item", self.scroll_v)									-- Зов Сидоровича
	handler.sidor_call = xml:InitCheck("tab_gameplay:check_sidor_call", _st)

	_st = xml:InitStatic("tab_gameplay:templ_item", self.scroll_v)									-- Пауза после загрузки
	handler.pause_on_load = xml:InitCheck("tab_gameplay:check_autopause", _st)
	handler:Register(handler.pause_on_load, "pause_on_load")

	_st = xml:InitStatic("tab_gameplay:templ_item", self.scroll_v)									-- "Умные" тайники
	handler.smart_treasures = xml:InitCheck("tab_gameplay:check_smart_treasures", _st)

	_st = xml:InitStatic("tab_gameplay:templ_item", self.scroll_v)									-- Прочее
	xml:InitLabel("tab_gameplay:cap_other", _st)

	_st = xml:InitStatic("tab_gameplay:templ_item", self.scroll_v)									-- Максимальное время фазы выброса (игровые минуты)
	xml:InitStatic("tab_gameplay:cap_blow_phase_max", _st)
	handler.blow_phase_max = handler:InitSpinNum( _st, 380, 5, 45, { min=5, max=15 } )

	_st = xml:InitStatic("tab_gameplay:templ_item", self.scroll_v)									-- Рандом времени фазы выброса (игровые минуты)
	xml:InitStatic("tab_gameplay:cap_blow_phase_shift", _st)
	handler.blow_phase_shift = handler:InitSpinNum( _st, 380, 5, 45, { min=0, max=5 } )

	_st = xml:InitStatic("tab_gameplay:templ_item", self.scroll_v)									-- Базовое время фазы выброса (игровые минуты)
	xml:InitStatic("tab_gameplay:cap_blow_phase", _st)
	handler.blow_phase = handler:InitSpinNum( _st, 380, 5, 45, { min=5, max=15 } )

	_st = xml:InitStatic("tab_gameplay:templ_item", self.scroll_v)									-- Рандом времени между выбросами (игровые минуты)
	xml:InitStatic("tab_gameplay:cap_blow_time_shift", _st)
	handler.blow_time_shift = handler:InitSpinNum( _st, 380, 5, 45, { min=0 } )

	_st = xml:InitStatic("tab_gameplay:templ_item", self.scroll_v)									-- Базовое время до следуещего выброса в игровых минутах
	xml:InitStatic("tab_gameplay:cap_blow_time", _st)
	handler.blow_time_basis = handler:InitSpinNum( _st, 380, 5, 45, { min=60 } )

	_st = xml:InitStatic("tab_gameplay:templ_item", self.scroll_v)									-- Превращение мёртвых сталкеров в зомби после выброса
	handler.zombie_team = xml:InitCheck("tab_gameplay:check_zombie_team", _st)

	_st = xml:InitStatic("tab_gameplay:templ_item", self.scroll_v)									-- Включение/отключение выброса в игре
	handler.blow_enable = xml:InitCheck("tab_gameplay:check_blowout", _st)
	handler:Register(handler.blow_enable, "blow_enable")

	_st = xml:InitStatic("tab_gameplay:templ_item", self.scroll_v)									-- Выброс
	xml:InitLabel("tab_gameplay:cap_blowout", _st)

	_st = xml:InitStatic("tab_gameplay:templ_item", self.scroll_v)
	_st:SetHeight( 90 )
	handler.dynamic_bioradar = xml:InitTab("tab_gameplay:radio_bioradar", _st)

	_st = xml:InitStatic("tab_gameplay:templ_item", self.scroll_v)									-- Биорадар
	xml:InitLabel("tab_gameplay:cap_bioradar", _st)

	_st = xml:InitStatic("tab_gameplay:templ_item", self.scroll_v)									-- Реальное время на худе при нажатии kSCORES
	handler.hud_time = xml:InitCheck("tab_gameplay:check_hud_time", _st)

	_st = xml:InitStatic("tab_gameplay:templ_item", self.scroll_v)									-- Количество предметов в ячейках быстрого доступа на худе
	xml:InitStatic("tab_gameplay:cap_hud_slots", _st)
	handler.hud_slots = handler:InitSpinStr( _st, 160, 5, 275, ui_hud_slots.get_settings() )

	_st = xml:InitStatic("tab_gameplay:templ_item", self.scroll_v)									-- Эффект прицеливания
	handler.hud_zoom = xml:InitCheck("tab_gameplay:check_hud_zoom", _st)

	_st = xml:InitStatic("tab_gameplay:templ_item", self.scroll_v)									-- Эффект запотевания
	handler.hud_blurs = xml:InitCheck("tab_gameplay:check_hud_blurs", _st)

	_st = xml:InitStatic("tab_gameplay:templ_item", self.scroll_v)									-- Динамический худ
	handler.amk_hud = xml:InitCheck("tab_gameplay:check_amk_hud", _st)
	handler:Register(handler.amk_hud, "amk_hud")

	_st = xml:InitStatic("tab_gameplay:templ_item", self.scroll_v)									-- Эффект критического ранения
	handler.gg_kick = xml:InitCheck("tab_gameplay:check_gg_kick", _st)

	_st = xml:InitStatic("tab_gameplay:templ_item", self.scroll_v)									-- Эффект плохого самочувствия
	handler.hud_bleed = xml:InitCheck("tab_gameplay:check_hud_bleed", _st)

	_st = xml:InitStatic("tab_gameplay:templ_item", self.scroll_v)									-- Эффект ранения
	handler.hud_blood = xml:InitCheck("tab_gameplay:check_hud_blood", _st)

	_st = xml:InitStatic("tab_gameplay:templ_item", self.scroll_v)									-- Показывать оружие
	handler.hud_rad = xml:InitCheck("tab_gameplay:check_hud_rad", _st)

	_st = xml:InitStatic("tab_gameplay:templ_item", self.scroll_v)									-- Показывать оружие
	xml:InitCheck("tab_gameplay:check_show_weapon", _st)

	_st = xml:InitStatic("tab_gameplay:templ_item", self.scroll_v)									-- Динамический прицел
	xml:InitCheck("tab_gameplay:check_dyn_crosshair", _st)

	_st = xml:InitStatic("tab_gameplay:templ_item", self.scroll_v)									-- Показывать прицел
	xml:InitCheck("tab_gameplay:check_crosshair", _st)

	_st = xml:InitStatic("tab_gameplay:templ_item", self.scroll_v)									-- Тип курсора
	xml:InitStatic("tab_gameplay:cap_cursor_type", _st)
	handler.cursor_type = handler:InitSpinStr( _st, 155, 5, 250, cursor.get_options() )
	handler.btn_preview_cursor = xml:Init3tButton( "tab_gameplay:btn_preview", _st )
	handler:Register(handler.btn_preview_cursor, "btn_show_cursor")

	_st = xml:InitStatic("tab_gameplay:templ_item", self.scroll_v)									-- Тип худа
	xml:InitStatic("tab_gameplay:cap_hud_type", _st)
	handler.hud_type = handler:InitSpinStr( _st, 155, 5, 250, ui_hud.get_all_huds() )
	handler.btn_preview_hud = xml:Init3tButton( "tab_gameplay:btn_preview", _st )
	handler:Register(handler.btn_preview_hud, "btn_show_hud")

	_st = xml:InitStatic("tab_gameplay:templ_item", self.scroll_v)									-- Настройки HUD и эффектов
	xml:InitLabel("tab_gameplay:cap_hud", _st)

	_st = xml:InitStatic("tab_gameplay:templ_item", self.scroll_v)									-- Предметы в слотах и на поясе нельзя продать
	handler.untrade_belt_slots = xml:InitCheck("tab_gameplay:check_untrade_belt_Slots", _st)

	_st = xml:InitStatic("tab_gameplay:templ_item", self.scroll_v)									-- Ограничение на продажу слишком изношенных предметов
	handler.trade_cond = xml:InitCheck("tab_gameplay:check_trade_cond", _st)

	_st = xml:InitStatic("tab_gameplay:templ_item", self.scroll_v)									-- Торговля
	xml:InitLabel("tab_gameplay:cap_trade", _st)

	_st = xml:InitStatic("tab_gameplay:templ_item", self.scroll_v)									-- Лимит на ремонт
	handler.rep_limit = xml:InitCheck("tab_gameplay:check_rep_limit", _st)

	_st = xml:InitStatic("tab_gameplay:templ_item", self.scroll_v)									-- Пулемётные турели
	handler.turrets = xml:InitCheck("tab_gameplay:check_turrets", _st)

	_st = xml:InitStatic("tab_gameplay:templ_item", self.scroll_v)									-- Редкие части монстров
	handler.rare_parts = xml:InitCheck("tab_gameplay:check_rare_parts", _st)

	_st = xml:InitStatic("tab_gameplay:templ_item", self.scroll_v)									-- Не все тайники закрываются на замок
	handler.zamok_lock = xml:InitCheck("tab_gameplay:check_zamok_lock", _st)

	_st = xml:InitStatic("tab_gameplay:templ_item", self.scroll_v)									-- GUI для ввода кода для замков на тайники
	handler.zamok_ui = xml:InitCheck("tab_gameplay:check_zamok_ui", _st)

	_st = xml:InitStatic("tab_gameplay:templ_item", self.scroll_v)									-- Невидимые тайники
	handler.transparent_treasure = xml:InitCheck("tab_gameplay:check_transparent_treasure",	_st)

	_st = xml:InitStatic("tab_gameplay:templ_item", self.scroll_v)									-- Частый респавн
	handler.fast_respawn = xml:InitCheck("tab_gameplay:check_fast_respawn", _st)

	_st = xml:InitStatic("tab_gameplay:templ_item", self.scroll_v)									-- Час ужаса
	handler.horrortime = xml:InitCheck("tab_gameplay:check_horrortime", _st)

	_st = xml:InitStatic("tab_gameplay:templ_item", self.scroll_v)									-- Усложнения
	xml:InitLabel("tab_gameplay:cap_hardcore", _st)

	_st = xml:InitStatic("tab_gameplay:templ_item", self.scroll_v)									-- Сколько файлов оставлять при удалении лишних сохранений
	xml:InitStatic("tab_gameplay:cap_saves_count", _st)
	handler.saves_count = handler:InitSpinNum( _st, 380, 5, 45, { min=0, max=50 } )

	_st = xml:InitStatic("tab_gameplay:templ_item", self.scroll_v)									-- Копирование сохранений в резерв
	handler.save_rename = xml:InitCheck("tab_gameplay:check_save_rename", _st)

	_st = xml:InitStatic("tab_gameplay:templ_item", self.scroll_v)									-- Автосохранение
	handler.autosave_enable = xml:InitCheck("tab_gameplay:check_autosave", _st)

	_st = xml:InitStatic("tab_gameplay:templ_item", self.scroll_v)									-- Сохранение
	xml:InitLabel("tab_gameplay:cap_save", _st)

	_st = xml:InitStatic("tab_gameplay:templ_item", self.scroll_v)									-- Тайм-фактор
	xml:InitStatic("tab_gameplay:cap_time_factor", _st)
	handler.time_factor = handler:InitSpinNum( _st, 380, 5, 45, { min=1, max=10 } )
	if not level.present() then
		handler.time_factor:Enable( false )
	end

	_st = xml:InitStatic("tab_gameplay:templ_item", self.scroll_v)									-- Скорость ГГ
	xml:InitStatic("tab_gameplay:cap_actor_accel", _st)
	handler.actor_accel = handler:InitSpinNum( _st, 380, 5, 45, { min=7, max=17 } )

	_st = xml:InitStatic("tab_gameplay:templ_item", self.scroll_v)									-- Дистанция до цели
	handler.check_dist = xml:InitCheck("tab_gameplay:check_dist", _st)

	_st = xml:InitStatic("tab_gameplay:templ_item", self.scroll_v)									-- Распознавание НПС
	handler.check_tips = xml:InitCheck("tab_gameplay:check_tips", _st)

	_st = xml:InitStatic("tab_gameplay:templ_item", self.scroll_v)									-- Автосмена уровня сложности
	handler.autochange_difficulty = xml:InitCheck("tab_gameplay:check_autochange_difficulty", _st)

	_st = xml:InitStatic("tab_gameplay:templ_item", self.scroll_v)									-- Уровень сложности
	xml:InitStatic("tab_gameplay:cap_difficulty", _st)
	handler.list_difficulty = xml:InitComboBox("tab_gameplay:list_difficulty", _st)
	handler:Register(handler.list_difficulty, "list_difficulty")

	_st = xml:InitStatic("tab_gameplay:templ_item", self.scroll_v)									-- Имя игрока
	xml:InitStatic("tab_gameplay:cap_user_name", _st)
	handler.userName = handler:InitEditBoxEx(_st, 180, 4, 250, "pda")

	handler.btn_gameplay_default = xml:Init3tButton( "tab_gameplay:btn_set_default", self )			-- Вернуть по умолчанию
	handler:Register( handler.btn_gameplay_default, "btn_gameplay_default" )
end
