-- -*- mode: lua; encoding: windows-1251 -*-

local min_zoom = nil	-- минимальный масштаб
local max_zoom = 5		-- максимальный масштаб
local zoom_shift = 0.36	-- изменение масштаба за один клик
local zoom_shift_w = 0.1 -- изменение масштаба колесиком мыши
local spot_size = 15       -- размер меток на аномалиях

local scale_show = 1.6      -- минимальный масштаб, при котором видно аномалии

local iniCache = {}

class "UIPdaTeleport" (CUIScriptWnd)

function UIPdaTeleport:__init(in_zone, item) super()
	self.level_maps = {}
	self.anoms = {}
	self.ini = game_ini()
	self.scale = 1

	self.in_zone = in_zone
	self.object = item

	self.map_in_focus = {}

	xr_s.subscribe( "mouse_wheel", self.OnMouseWheel, {self = self} )

	self:Init(0,0,1024,768)

	local xml = CScriptXmlInit()
	xml:ParseFile("ui_spatial_scaner.xml")
	
	xml:InitStatic("background", self)
	
	self.map_back = xml:InitStatic("map_static", self)
	self.map_back:ClipperOn()
	
	-- рисуем карту
	self:DrawMap()
	
	-- рамка-ПДА
	xml:InitStatic("pda", self)
	self.map_name = xml:InitStatic("map_name", self)

	-- Зум
	self:Register(xml:InitButton("btn_center", self), "zoom_center")
	self:AddCallbackEx("zoom_center", ui_events.BUTTON_DOWN, self.ZoomCenter)
	self:Register(xml:InitButton("btn_zoom_plus",self), "zoom_plus")
	self:AddCallbackEx("zoom_plus", ui_events.BUTTON_DOWN, self.ZoomAdd)
	self:Register(xml:InitButton("btn_zoom_minus",self), "zoom_minus")
	self:AddCallbackEx("zoom_minus", ui_events.BUTTON_DOWN, self.ZoomSub)
	self:Register(xml:InitButton("btn_zoom_default",self), "zoom_default")
	self:AddCallbackEx("zoom_default", ui_events.BUTTON_DOWN, self.ZoomDefault)
	-- Кнопка выхода
	self:Register(xml:Init3tButton("btn_quit",self), "btn_quit")
	self:AddCallbackEx("btn_quit", ui_events.BUTTON_CLICKED, self.on_quit)

	-- Уровень заряда
	local back = xml:InitStatic( "charge", self )
	local st = xml:InitStatic( "charge:scale", back )
	local cond = self.object:condition()
	st:SetWidth( st:GetWidth() * cond )
	st:SetColor( GetARGB( 255, 255, 50, 50 ) )
	back:SetText( string.format( "%d%%", cond*100 ) )
	
	self.message_box = CUIMessageBoxEx()
	self:Register(self.message_box, "message_box")

	bind_actor.hide_weapon("scan")
end

function UIPdaTeleport:__finalize()
end

function UIPdaTeleport:DrawMap()
	local texture, rect
	-- Глобальная карта
	rect = self:GetFrect("global_map", "bound_rect")
	texture = self.ini:r_string("global_map", "texture")
	
	if min_zoom == nil then	-- if first time
		min_zoom = self.map_back:GetWidth()/rect:width()
	end
	local p = amk.load_table( "SS", { nil, 0, 0 } )
	self.scale = p[1] or min_zoom
	local posX = p[2]
	local posy = p[3]
	rect:mul(self.scale)
	rect:add(posX, posy)

	self.global_map = CUIStatic()
	local gMap = self.global_map
	gMap:SetAutoDelete(true)
	gMap:SetWndRect(rect)
	gMap:InitTexture(texture)
	gMap:SetStretchTexture(true)
	self.map_back:AttachChild(gMap)

	local bonds = self.map_back:GetWndSize():sub( gMap:GetWndSize() )
	self.map_bounds = Frect():set(0, 0, bonds.x, bonds.y)

	
	-- Читаем из ini имена уровней
	local res, map, v
	for i = 0, self.ini:line_count("level_maps_single")-1 do
		res, map, v = self.ini:r_line("level_maps_single",i,"","")
		self.level_maps[string.lower(map)] = true
	end
	-- Рисуем карты  уровней и места положения аномалий
	local actor_pos = Actor:position()
	local level_name = level.name()
	local show_anom = self.scale>=scale_show
	local w = spot_size/2
	for k in pairs(self.level_maps) do
		local level_map = self:DrawLevelMap(k)
		gMap:AttachChild(level_map)
		self.level_maps[k] = level_map
		self:Register(level_map, "st_"..k)
		self:AddCallbackEx("st_"..k, ui_events.STATIC_FOCUS_RECEIVED, self.onMapFocus, k )
		self:AddCallbackEx("st_"..k, ui_events.STATIC_FOCUS_LOST, self.onMapFocusLost, k )
		local zones = spatial_subway.levels[k]
		if zones then
			rect = self:GetFrect(k, "bound_rect")
			self.zoom = level_map:GetWidth()/rect:width()
			for id, t in pairs(zones) do
				local pos = self:ConvertPosToPixel(t.pos, rect)
				local btn_name = "btn_"..k..id
				local btn = CUIButton()
				btn:SetAutoDelete(true)
				btn:Init("ui\\ui_pda_tele", pos.x-w, pos.y-w, spot_size, spot_size)
				btn:SetOriginalRect(997,834,19,19)
				btn:SetStretchTexture(true)
				level_map:AttachChild(btn)
				if level_name==k and actor_pos:distance_to(t.pos)<2.5 then
					btn:SetColor(GetARGB(255,20,255,20))
				elseif self.in_zone then
					self:Register(btn, btn_name)
					self:AddCallbackEx(btn_name, ui_events.BUTTON_CLICKED, self.onAnomalyClicked, k, id )
				end
				btn:Show(show_anom)
				self.anoms[btn_name] = btn
			end
		end
	end
	-- метка актера
	map = self.level_maps[ level_name ]
	if map == nil then return end
	rect = self:GetFrect( level_name, "bound_rect" )
	self.zoom = map:GetWidth() / rect:width()
	local pos = self:ConvertPosToPixel( Actor:position(), rect )
	local a = CUIStatic()
	a:SetAutoDelete(true)
	a:Init( "ui_icons_mapPDA_persBig_e", pos.x-w, pos.y-w, spot_size, spot_size )
	a:SetStretchTexture( true )
	map:AttachChild( a )
	self.actor_spot = a
end

function UIPdaTeleport:ZoomCenter()
	if self.scale < scale_show then
		self.scale = scale_show
		self:ResizeMap(false, false)
	end

	local map = self.level_maps[ level.name() ]
	local map_pos = map:GetWndPos():add( self.actor_spot:GetWndPos() )
	map_pos:sub( self.map_back:GetWndSize():div(2) )
	map_pos.x = -map_pos.x
	map_pos.y = -map_pos.y
	map_pos:clamp( self.map_bounds )
	self.global_map:SetWndPos( map_pos:get() )
end

function UIPdaTeleport:ZoomAdd()
	if self.scale<max_zoom then
		self.scale = math.min(self.scale+zoom_shift, max_zoom)
		self:ResizeMap(false, false)
	end
end
function UIPdaTeleport:ZoomSub()
	if self.scale>min_zoom then
		self.scale = math.max(self.scale-zoom_shift, min_zoom)
		self:ResizeMap(false, false)
	end
end
function UIPdaTeleport:ZoomDefault()
	if self.scale~=min_zoom then
		self.scale = min_zoom
		self:ResizeMap(false, false)
	end
end

function UIPdaTeleport:onMapFocus( map )
	table.insert(self.map_in_focus, map)
	self.map_name:SetTextST(map)
end
function UIPdaTeleport:onMapFocusLost( map )
	local f = false
	for i, v in ipairs( self.map_in_focus ) do
		if v == map then
			table.remove( self.map_in_focus, i )
			f = true
			break
		end
	end
	if f then
		if #self.map_in_focus == 0 then
			self.map_name:SetTextST( "global_map" )
		else
			self.map_name:SetTextST( self.map_in_focus[ 1 ] )
		end
	else
		self.map_name:SetTextST( "global_map" )
	end
end

function UIPdaTeleport:onAnomalyClicked( lvl, id )
	if self.started then return end
	self.started = true

	local t = spatial_subway.levels[ lvl ][ id ]
		or abort( "%s: zone %s not found on level %s", script_name(), id, lvl )

	local dist, max_dist = naxac.get_map_dist( level.name(), Actor:position(), lvl, t.pos )
	local need_charge = dist / max_dist
	local cond_scaner = self.object:condition()
	if need_charge <= cond_scaner then
		local new_cond = cond_scaner - need_charge
		self.object:set_condition( new_cond )
		netpk:modify( AI:object( self.object:id() ), { condition = new_cond }, netpk.fState )

		level.disable_input()
		bind_subway.block_sms( true )
		level.add_pp_effector ("teleport.ppe", 2006, false)
		local snd_obj = sound_object("anomaly\\teleport_work_1")
		snd_obj:play_no_feedback(Actor, sound_object.s2d, 0, vector(), 1.0)
		start_small_timer(400, spatial_subway.go_to, lvl, id)
		start_small_timer(700, bind_subway.block_sms, false )

		self:on_quit()
	else
		self.message_box:Init("select_map")
		self.message_box:SetText("subway_scaner_low_charge_move")
		self:GetHolder():start_stop_menu(self.message_box, true)
	end
end

function UIPdaTeleport:ResizeMap(bCheckCursor, bZoomIn)
	local rect = self:GetFrect("global_map", "bound_rect")
	
	local wnd = self.global_map
	local wnd_size_old = wnd:GetWndSize()
	local wnd_pos = wnd:GetWndPos()
	wnd:SetWndRect(rect:mul(self.scale))
	local wnd_size = wnd:GetWndSize()

	local mb_size = self.map_back:GetWndSize()
	self.map_bounds.x2 = mb_size.x - wnd_size.x
	self.map_bounds.y2 = mb_size.y - wnd_size.y
	mb_size:div(2)

	local cur_pos = bCheckCursor
		and self:GetCursorPos():sub( self.map_back:GetWndPos() )
		or mb_size

	wnd_pos:sub( cur_pos )
	if bCheckCursor then
		if bZoomIn then
			cur_pos = cur_pos:add( mb_size:sub(cur_pos):div(8) )
		else
			cur_pos:sub(mb_size)
			cur_pos:div(1.1)
			cur_pos:add(mb_size)
		end
	end
	wnd_size:div( wnd_size_old:get() )
	wnd_pos:mul( wnd_size:get() ):add( cur_pos )
	
	wnd_pos:clamp( self.map_bounds )
	
	wnd:SetWndPos( wnd_pos:get() )
	
	local show_anom = self.scale>=scale_show
	local pos
	local w = spot_size/2
	for lvl,st in pairs(self.level_maps) do
		rect = self:GetFrect(lvl, "global_rect")
		st:SetWndRect(rect:mul(self.scale))
		local zones = spatial_subway.levels[lvl]
		if zones then
			rect = self:GetFrect(lvl, "bound_rect")
			self.zoom = st:GetWidth()/rect:width()
			for id, t in pairs(zones) do
				local b = self.anoms["btn_"..lvl..id]
				if show_anom then
					pos = self:ConvertPosToPixel(t.pos, rect)
					b:SetWndPos(pos.x-w, pos.y-w)
					b:Show(true)
				else
					b:Show(false)
				end
			end
		end
	end

	wnd = self.level_maps[ level.name() ]
	if wnd == nil then return end
	rect = self:GetFrect( level.name(), "bound_rect" )
	self.zoom = wnd:GetWidth() / rect:width()
	pos = self:ConvertPosToPixel( Actor:position(), rect )
	self.actor_spot:SetWndPos( pos.x-w, pos.y-w )
end

function UIPdaTeleport:DrawLevelMap(level)
	if self.ini:section_exist(level) then
		local tex, rect
		if self.ini:line_exist(level, "texture") then
			tex = self.ini:r_string(level, "texture")
			rect = self:GetFrect(level, "global_rect")
		else
			tex = "ui\\ui_nomap2"
			rect = Frect():set(-10,-10,0,0)
		end
		local st = CUIStatic()
		st:SetAutoDelete(true)
		st:SetWndRect(rect:mul(self.scale))
		st:InitTexture(tex)
		st:SetStretchTexture(true)
		return st
	end
	abort("Section [%s] not exist in game_maps_single.ltx", tostring(level))
end

function UIPdaTeleport:ConvertPosToPixel(vec, rect)
	local res = {}
	res.x = (vec.x - rect.x1) *self.zoom
	res.y = (rect:height() - (vec.z - rect.y1)) *self.zoom
	return res
end

function UIPdaTeleport:GetFrect(section, line)
	if iniCache[section] and iniCache[section][line] then
		return Frect():set( unpack(iniCache[section][line]) )
	end

	if iniCache[section]==nil then iniCache[section] = {} end
	local t = {}
	iniCache[section][line] = t
	if self.ini:section_exist(section) and self.ini:line_exist(section, line) then
		for n in string.gmatch(self.ini:r_string(section, line), "[%d%-%.]+") do
			t[#t+1] = tonumber(n)
		end
	else
		t = { -10, -10, 0, 0 }
	end
	return Frect():set( unpack(t) )
end

function UIPdaTeleport:Update()
	CUIScriptWnd.Update(self)

	if self.move_map then
		local cur_pos = self:GetCursorPos()
		local new_pos = self.global_map:GetWndPos():sub( 
			self.last_cur_pos:sub( cur_pos ) 
		)
		new_pos:clamp( self.map_bounds )
		self.global_map:SetWndPos( new_pos:get() )
		self.last_cur_pos = cur_pos
	end
end

function UIPdaTeleport:OnMouseWheel( mode )
	local f = nil
	if ( not mode ) and self.scale < max_zoom then
		self.scale = math.min( self.scale + zoom_shift_w, max_zoom )
		f = true
	elseif mode and self.scale > min_zoom then
		self.scale = math.max( self.scale - zoom_shift_w, min_zoom )
		f = false
	end
	if f~=nil then
		self:ResizeMap(true, f)
	end
end

function UIPdaTeleport:OnKeyboard(dik, keyboard_action)
	CUIScriptWnd.OnKeyboard(self, dik, keyboard_action)

	if keyboard_action == ui_events.WINDOW_KEY_PRESSED then
		if dik == DIK_keys.DIK_LMOUSE then
			self.move_map = true
			self.last_cur_pos = self:GetCursorPos()
		elseif dik == DIK_keys.DIK_ESCAPE then
			self:on_quit()
		end
	elseif keyboard_action == ui_events.WINDOW_KEY_RELEASED then
		if dik == DIK_keys.DIK_LMOUSE then
			self.move_map = false
		end
	end

	return true
end

function UIPdaTeleport:on_quit()
	-- сохраняем масштаб и положение карты
	local map_pos = self.global_map:GetWndPos()
	amk.save_table( "SS", { self.scale, map_pos.x, map_pos.y } )

	xr_s.unsubscribe( "mouse_wheel", self.OnMouseWheel )
	bind_actor.restore_weapon("scan")

	self.object = nil
	self.ini = nil
	self:ClearCallbacks()
	self:GetHolder():start_stop_menu(self, true)
end

