-- -*- mode: lua; encoding: windows-1251 -*-
-- Настройки управления
local move_shift = 5	-- кол-во пикселей, на которое перемещается карта за апдейт
local move_delta = 3    -- сколько пикселей прибавляем/отнимаем от move_shift при нажатии Shift/Ctrl
local min_zoom = nil	-- минимальный масштаб
local max_zoom = 5		-- максимальный масштаб
local zoom_shift = 0.4	-- изменение масштаба за один клик
local zoom_shift_w = zoom_shift/4  -- изменение масштаба колесиком мыши
local spot_size = 15       -- размер меток на аномалиях

local map_st = {}           -- текущее положение карты
local scale = 1             -- текущий масштаб
local scale_show = 1.5      -- минимальный масштаб, при котором видно аномалии

local iniCache = {}

class "UIPdaTeleport" (CUIScriptWnd)

function UIPdaTeleport:__init(in_zone, item) super()
	self.level_maps = {}
	self.anoms = {}
	self.ini = game_ini()

	self.in_zone = in_zone
	self.object = item
	
	self.move = { [1] = false, [2] = false, [3] = false, [4] = false }
	self.map_in_focus = {}

	xr_s.subscribe( "mouse_wheel", self.OnMouseWheel, {self = self} )

	self:Init(0,0,1024,768)

	local xml = CScriptXmlInit()
	xml:ParseFile("ui_spatial_scaner.xml")
	
	xml:InitStatic("background", self)
	
	self.map_back = xml:InitStatic("map_static", self)
	
	-- рисуем карту
	self:DrawMap()
	
	-- рамка-ПДА
	xml:InitStatic("pda", self)
	self.map_name = xml:InitStatic("map_name", self)

	-- Кнопки навигации
	xml:InitStatic("st_center", self)
	self:Register(xml:InitButton("btn_left",self), "btn_left")
	self:AddCallbackEx("btn_left", ui_events.BUTTON_DOWN, self.onButtonMoveClicked, 1 )
	self:Register(xml:InitButton("btn_right",self), "btn_right")
	self:AddCallbackEx("btn_right", ui_events.BUTTON_DOWN, self.onButtonMoveClicked, 2 )
	self:Register(xml:InitButton("btn_up",self), "btn_up")
	self:AddCallbackEx("btn_up", ui_events.BUTTON_DOWN, self.onButtonMoveClicked, 3 )
	self:Register(xml:InitButton("btn_down",self), "btn_down")
	self:AddCallbackEx("btn_down", ui_events.BUTTON_DOWN, self.onButtonMoveClicked, 4 )
	-- Зум
	self:Register(xml:InitButton("btn_zoom_plus",self), "zoom_plus")
	self:AddCallbackEx("zoom_plus", ui_events.BUTTON_DOWN, self.ZoomAdd)
	self:Register(xml:InitButton("btn_zoom_minus",self), "zoom_minus")
	self:AddCallbackEx("zoom_minus", ui_events.BUTTON_DOWN, self.ZoomSub)
	self:Register(xml:InitButton("btn_zoom_default",self), "zoom_default")
	self:AddCallbackEx("zoom_default", ui_events.BUTTON_DOWN, self.ZoomDefault)
	-- Кнопка выхода
	self:Register(xml:Init3tButton("btn_quit",self), "btn_quit")
	self:AddCallbackEx("btn_quit", ui_events.BUTTON_CLICKED, self.on_quit)

	-- Уровень заряда
	local back = xml:InitStatic( "charge", self )
	local st = xml:InitStatic( "charge:scale", back )
	local cond = self.object:condition()
	st:SetWidth( st:GetWidth() * cond )
	st:SetColor( GetARGB( 255, 255, 50, 50 ) )
	back:SetText( string.format( "%d%%", cond*100 ) )
	
	self.message_box = CUIMessageBoxEx()
	self:Register(self.message_box, "message_box")

	bind_actor.hide_weapon("scan")
end

function UIPdaTeleport:__finalize()
end

function UIPdaTeleport:DrawMap()
	local texture, rect
	-- Глобальная карта
	rect = self:GetFrect("global_map", "bound_rect")
	texture = self.ini:r_string("global_map", "texture")
	
	self.global_map = CUIStatic()
	local gMap = self.global_map
	gMap:SetAutoDelete(true)
	gMap:SetWndRect(rect:mul(scale))
	gMap:InitTexture(texture)
	gMap:SetStretchTexture(true)
	self.map_back:AttachChild(gMap)
	
	if min_zoom == nil then	-- if first time
		min_zoom = self.map_back:GetWidth()/gMap:GetWidth()
		local p = amk.load_table( "SS", { nil, 0, 0 } )
		scale = p[1]
		map_st.x = p[2]
		map_st.y = p[3]
		if scale == nil then scale = min_zoom end
		gMap:SetWndRect( rect:mul(scale) )
	end

	map_st.mxr = self.map_back:GetWidth() - gMap:GetWidth()
	map_st.mxd = self.map_back:GetHeight() - gMap:GetHeight()

	gMap:SetWndPos(map_st.x, map_st.y)
	
	-- Читаем из ini имена уровней
	local res, map, v
	for i = 0, self.ini:line_count("level_maps_single")-1 do
		res, map, v = self.ini:r_line("level_maps_single",i,"","")
		self.level_maps[string.lower(map)] = true
	end
	-- Рисуем карты  уровней и места положения аномалий
	local actor_pos = Actor:position()
	local level_name = level.name()
	local show_anom = scale>scale_show
	local w = spot_size/2
	for k in pairs(self.level_maps) do
		local level_map = self:DrawLevelMap(k)
		gMap:AttachChild(level_map)
		self.level_maps[k] = level_map
		self:Register(level_map, "st_"..k)
		self:AddCallbackEx("st_"..k, ui_events.STATIC_FOCUS_RECEIVED, self.onMapFocus, k )
		self:AddCallbackEx("st_"..k, ui_events.STATIC_FOCUS_LOST, self.onMapFocusLost, k )
		local zones = spatial_subway.levels[k]
		if zones then
			rect = self:GetFrect(k, "bound_rect")
			self.zoom = level_map:GetWidth()/rect:width()
			for id, t in pairs(zones) do
				local pos = self:ConvertPosToPixel(t.pos, rect)
				local btn_name = "btn_"..k..id
				local btn = CUIButton()
				btn:SetAutoDelete(true)
				btn:Init("ui\\ui_pda_tele", pos.x-w, pos.y-w, spot_size, spot_size)
				btn:SetOriginalRect(997,834,19,19)
				btn:SetStretchTexture(true)
				level_map:AttachChild(btn)
				if level_name==k and actor_pos:distance_to(t.pos)<2.5 then
					btn:SetColor(GetARGB(255,20,255,20))
				elseif self.in_zone then
					self:Register(btn, btn_name)
					self:AddCallbackEx(btn_name, ui_events.BUTTON_CLICKED, self.onAnomalyClicked, k, id )
				end
				btn:Show(show_anom)
				self.anoms[btn_name] = btn
			end
		end
	end
	-- метка актера
	map = self.level_maps[ level_name ]
	if map == nil then return end
	rect = self:GetFrect( level_name, "bound_rect" )
	self.zoom = map:GetWidth() / rect:width()
	local pos = self:ConvertPosToPixel( Actor:position(), rect )
	local a = CUIStatic()
	a:SetAutoDelete(true)
	a:Init( "ui_icons_mapPDA_persBig_e", pos.x-w, pos.y-w, spot_size, spot_size )
	a:SetStretchTexture( true )
	map:AttachChild( a )
	self.actor_spot = a
end

function UIPdaTeleport:ZoomAdd()
	if scale<max_zoom then
		scale = math.min(scale+zoom_shift, max_zoom)
		self:ResizeMap(false)
	end
end
function UIPdaTeleport:ZoomSub()
	if scale>min_zoom then
		scale = math.max(scale-zoom_shift, min_zoom)
		self:ResizeMap(false)
	end
end
function UIPdaTeleport:ZoomDefault()
	if scale~=min_zoom then
		scale = min_zoom
		self:ResizeMap(false)
	end
end

function UIPdaTeleport:onButtonMoveClicked( index )
	self.move[index] = true
	self.need_update = true
end
function UIPdaTeleport:onMapFocus( map )
	table.insert(self.map_in_focus, map)
	self.map_name:SetTextST(map)
end
function UIPdaTeleport:onMapFocusLost( map )
	local f = false
	for i, v in ipairs( self.map_in_focus ) do
		if v == map then
			table.remove( self.map_in_focus, i )
			f = true
			break
		end
	end
	if f then
		if #self.map_in_focus == 0 then
			self.map_name:SetTextST( "global_map" )
		else
			self.map_name:SetTextST( self.map_in_focus[ 1 ] )
		end
	else
		self.map_name:SetTextST( "global_map" )
	end
end

function UIPdaTeleport:onAnomalyClicked( lvl, id )
	if self.started then return end
	self.started = true

	local t = spatial_subway.levels[ lvl ][ id ]
		or abort( "%s: zone %s not found on level %s", script_name(), id, lvl )

	local dist, max_dist = naxac.get_map_dist( level.name(), Actor:position(), lvl, t.pos )
	local need_charge = dist / max_dist
	local cond_scaner = self.object:condition()
	if need_charge <= cond_scaner then
		local new_cond = cond_scaner - need_charge
		self.object:set_condition( new_cond )
		netpk:modify( AI:object( self.object:id() ), { condition = new_cond }, netpk.fState )

		level.disable_input()
		bind_subway.block_sms( true )
		level.add_pp_effector ("teleport.ppe", 2006, false)
		local snd_obj = sound_object("anomaly\\teleport_work_1")
		snd_obj:play_no_feedback(Actor, sound_object.s2d, 0, vector(), 1.0)
		start_small_timer(400, spatial_subway.go_to, lvl, id)
		start_small_timer(700, bind_subway.block_sms, false )

		self:on_quit()
	else
		self.message_box:Init("select_map")
		self.message_box:SetText("subway_scaner_low_charge_move")
		self:GetHolder():start_stop_menu(self.message_box, true)
	end
end

function UIPdaTeleport:ResizeMap(bCheckZoomIn)
	local rect = self:GetFrect("global_map", "bound_rect")
	
	local wnd = self.global_map
	local wnd_size_old = wnd:GetWndSize()
	local wnd_pos = wnd:GetWndPos()
	wnd:SetWndRect(rect:mul(scale))
	local wnd_size = wnd:GetWndSize()

	local mb_size = self.map_back:GetWndSize()
	map_st.mxr = mb_size.x - wnd_size.x
	map_st.mxd = mb_size.y - wnd_size.y
	mb_size:div(2)

	local cur_pos = bCheckZoomIn
		and self:GetCursorPos():sub( self.map_back:GetWndPos() )
		or mb_size

	local cur_pos_wnd = wnd_pos:sub( cur_pos )
	if bCheckZoomIn then
		cur_pos = cur_pos:add( mb_size:sub(cur_pos):div(8) )
	end
	wnd_size:div( wnd_size_old:get() )
	local new_wnd_pos = cur_pos_wnd:mul( wnd_size:get() ):add( cur_pos )
	
	map_st.x = math.clamp(new_wnd_pos.x, map_st.mxr, 0)
	map_st.y = math.clamp(new_wnd_pos.y, map_st.mxd, 0)
	
	wnd:SetWndPos(map_st.x, map_st.y)
	
	local show_anom = scale>scale_show
	local pos
	local w = spot_size/2
	for lvl,st in pairs(self.level_maps) do
		rect = self:GetFrect(lvl, "global_rect")
		st:SetWndRect(rect:mul(scale))
		local zones = spatial_subway.levels[lvl]
		if zones then
			rect = self:GetFrect(lvl, "bound_rect")
			self.zoom = st:GetWidth()/rect:width()
			for id, t in pairs(zones) do
				pos = self:ConvertPosToPixel(t.pos, rect)
				local b = self.anoms["btn_"..lvl..id]
				b:SetWndPos(pos.x-w, pos.y-w)
				b:Show(show_anom)
			end
		end
	end

	wnd = self.level_maps[ level.name() ]
	if wnd == nil then return end
	rect = self:GetFrect( level.name(), "bound_rect" )
	self.zoom = wnd:GetWidth() / rect:width()
	pos = self:ConvertPosToPixel( Actor:position(), rect )
	self.actor_spot:SetWndPos( pos.x-w/2, pos.y-spot_size/2 )
end

function UIPdaTeleport:DrawLevelMap(level)
	if self.ini:section_exist(level) then
		local tex, rect
		if self.ini:line_exist(level, "texture") then
			tex = self.ini:r_string(level, "texture")
			rect = self:GetFrect(level, "global_rect")
		else
			tex = "ui\\ui_nomap2"
			rect = Frect():set(-10,-10,0,0)
		end
		local st = CUIStatic()
		st:SetAutoDelete(true)
		st:SetWndRect(rect:mul(scale))
		st:InitTexture(tex)
		st:SetStretchTexture(true)
		return st
	end
	abort("Section [%s] not exist in game_maps_single.ltx", tostring(level))
end

function UIPdaTeleport:ConvertPosToPixel(vec, rect)
	local res = {}
	res.x = (vec.x - rect.x1) *self.zoom
	res.y = (rect:height() - (vec.z - rect.y1)) *self.zoom
	return res
end

function UIPdaTeleport:GetFrect(section, line)
	if iniCache[section] and iniCache[section][line] then
		return Frect():set( unpack(iniCache[section][line]) )
	end

	if iniCache[section]==nil then iniCache[section] = {} end
	local t = {}
	iniCache[section][line] = t
	if self.ini:section_exist(section) and self.ini:line_exist(section, line) then
		for n in string.gmatch(self.ini:r_string(section, line), "[%d%-%.]+") do
			t[#t+1] = tonumber(n)
		end
	else
		t = { -10, -10, 0, 0 }
	end
	return Frect():set( unpack(t) )
end

local move2func = {
	[1] = function() map_st.x = math.min(map_st.x + move_shift, 0) end,
	[2] = function() map_st.x = math.max(map_st.x - move_shift, map_st.mxr) end,
	[3] = function() map_st.y =  math.min(map_st.y + move_shift, 0) end,
	[4] = function() map_st.y = math.max(map_st.y - move_shift, map_st.mxd) end
}
function UIPdaTeleport:Update()
	CUIScriptWnd.Update(self)

	if not self.need_update then return end

	for i, v in ipairs(self.move) do
		if v then move2func[i]() end
	end
	
	self.global_map:SetWndPos(map_st.x, map_st.y)
end

function UIPdaTeleport:OnMouseWheel( mode )
	local f = nil
	if ( not mode ) and scale < max_zoom then
		scale = math.min( scale + zoom_shift_w, max_zoom )
		f = true
	elseif mode and scale > min_zoom then
		scale = math.max( scale - zoom_shift_w, min_zoom )
		f = false
	end
	if f~=nil then
		self:ResizeMap(f)
	end
end

local dik2move = {
	[DIK_keys.DIK_LEFT] = 1,
	[DIK_keys.DIK_RIGHT] = 2,
	[DIK_keys.DIK_UP] = 3,
	[DIK_keys.DIK_DOWN] = 4,
	[DIK_keys.DIK_A] = 1,
	[DIK_keys.DIK_D] = 2,
	[DIK_keys.DIK_W] = 3,
	[DIK_keys.DIK_S] = 4,
	[DIK_keys.DIK_NUMPAD4] = 1,
	[DIK_keys.DIK_NUMPAD6] = 2,
	[DIK_keys.DIK_NUMPAD8] = 3,
	[DIK_keys.DIK_NUMPAD2] = 4
}
function UIPdaTeleport:OnKeyboard(dik, keyboard_action)
	CUIScriptWnd.OnKeyboard(self, dik, keyboard_action)

	if keyboard_action == ui_events.WINDOW_KEY_PRESSED then
		if dik == DIK_keys.DIK_ESCAPE then
			self:on_quit()
		elseif dik2move[dik] then
			self.move[ dik2move[dik] ] = true
			self.need_update = true
		elseif dik == DIK_keys.DIK_LSHIFT
			or dik == DIK_keys.DIK_RSHIFT
		then
			move_shift = move_shift - move_delta
		elseif dik == DIK_keys.DIK_LCONTROL
			or dik == DIK_keys.DIK_RCONTROL
		then
			move_shift = move_shift + move_delta
		elseif dik == DIK_keys.DIK_SUBTRACT then
			self:ZoomSub()
		elseif dik == DIK_keys.DIK_ADD then
			self:ZoomAdd()
		end

	elseif keyboard_action == ui_events.WINDOW_KEY_RELEASED then
		if dik == DIK_keys.DIK_LSHIFT
			or dik == DIK_keys.DIK_RSHIFT
		then
			move_shift = move_shift + move_delta
		elseif dik == DIK_keys.DIK_LCONTROL
			or dik == DIK_keys.DIK_RCONTROL 
		then
			move_shift = move_shift - move_delta
		elseif dik2move[dik] then
			self.move[ dik2move[dik] ] = false
			for i, v in ipairs(self.move) do
				if v then return true end
			end
			self.need_update = nil
		elseif dik == DIK_keys.DIK_LMOUSE and self.need_update then
			for i = 1, 4 do
				self.move[i] = false
			end
			self.need_update = nil
		end
	end

	return true
end

function UIPdaTeleport:on_quit()
	-- сохраняем масштаб и положение карты
	amk.save_table( "SS", { scale, map_st.x, map_st.y } )

	xr_s.unsubscribe( "mouse_wheel", self.OnMouseWheel )
	bind_actor.restore_weapon("scan")

	self.object = nil
	self.ini = nil
	self:ClearCallbacks()
	self:GetHolder():start_stop_menu(self, true)
end

