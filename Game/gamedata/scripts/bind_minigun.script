-- -*- mode: lua; encoding: windows-1251 -*-

local bad_charge_level = 0.05

class "minigun_binder" (object_binder)
function minigun_binder:__init(obj) super(obj)
	self.fire = false
end 

function minigun_binder:reinit()
	object_binder.reinit(self)

	self.id = self.object:id()
	self.se_wpn = AI:object(self.id)
	self.full_charge_time = sys_ini:r_float( self.object:section(), "working_time" ) * 60000
	self.worked_time = self.se_wpn.worked_time

	if self:get_charge_level() > 0 then
		self.accum_sect = sys_ini:r_string( self.object:section(), "energy_source" )
		self.object:set_weight( self.object:get_weight() + sys_ini:r_float(self.accum_sect, "inv_weight") )
	end
end

function minigun_binder:net_spawn(data)
	if not object_binder.net_spawn(self, data) then
		return false
	end

	return true
end

function minigun_binder:net_destroy()
	self.fire = false

	object_binder.net_destroy(self)
end

function minigun_binder:update(delta)
	object_binder.update(self, delta)

	if actor_active_item and actor_active_item:id() == self.id then
		if self.worked_time >= self.full_charge_time then
			Actor:activate_slot(-1)
			Actor:move_to_ruck(self.object)
			amk.send_tip("Для использования "..game.translate_string( get_inv_name(self.object:section()) ).." необходимо поменять аккумулятор!", nil, nil, 5, "nano")
			return
		end
		if not self.subscribed then
			self.subscribed = true
			xr_s.subscribe( "key_press", self.on_key_press, {self = self} )
			xr_s.subscribe( "key_release", self.on_key_release, {self = self} )
		end
	elseif self.subscribed then
		self.subscribed = nil
		self.fire = false
		xr_s.unsubscribe("key_press", self.on_key_press)
		xr_s.unsubscribe("key_release", self.on_key_release)
	end
	
	if self.fire then
		if self.object:get_ammo_in_magazine() == 0 then return end
		self.worked_time = self.worked_time + delta
		self.se_wpn.worked_time = self.worked_time
	end
end

function minigun_binder:get_current_accumm()
	return self.accum_sect
end

function minigun_binder:on_key_press(dik, bind)
	if bind ~= key_bindings.kWPN_FIRE then return end
	if level.main_input_receiver() == nil then
		self.fire = true
	end
end

function minigun_binder:on_key_release(dik, bind)
	if bind ~= key_bindings.kWPN_FIRE then return end
	self.fire = false
end

function minigun_binder:get_charge_level()
	return math.max( (self.full_charge_time - self.worked_time)/self.full_charge_time, 0 )
end

function minigun_binder:charge(new_charge)
	if new_charge <= bad_charge_level then
		ui_inv_add.show_inv_msg("st_bad_accum", "red")
		return false
	elseif math.abs(self:get_charge_level() - new_charge) < 0.02 then
		return false
	end

	local old_charge = self:get_charge_level()
	if old_charge > 0 then
		local accum = AI:create(self.accum_sect, vector():set(0,0,0), 0, 0, 0)
		netpk:modify(accum, {condition = old_charge}, netpk.fState)
		level.client_spawn_manager():add(accum.id, -1,
			function(condition, id, obj)
				obj:set_condition(condition)
			end,
		old_charge)
		self.object:set_weight( self.object:get_weight() - sys_ini:r_float(self.accum_sect, "inv_weight") )
	end

	self.worked_time = self.full_charge_time - self.full_charge_time * new_charge
	self.se_wpn.worked_time = self.worked_time
	return true
end
---------------------------------------------------------------------------------------------
function init(obj)
	obj:bind_object( minigun_binder(obj) )
end


