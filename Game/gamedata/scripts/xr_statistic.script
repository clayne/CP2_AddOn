-- -*- mode: lua; encoding: windows-1251 -*-
-- выкинуты все ранги, группировки и прочее, просто тупо считается количество всех убитых неписей/монстров

local communityByCommunity = {
	["monolith"] = "monolith",
	["military"] = "military",
	["killer"] = "killer",
	["ecolog"] = "ecolog",
	["dolg"] = "dolg",
	["freedom"] = "freedom",
	["bandit"] = "bandit",
	["zombied"] = "zombied",
	["trader"] = "trader",
	["arena_enemy"] = "arena_enemy",
	["sniper"] = "sniper",
	["green"] = "green",
	["nebo"] = "nebo",
	["lastday"] = "lastday",
	["vermaht"] = "vermaht"
}

-- при добавлении новых монстров добавлять в stable_statistic_caption.xml название монстра
local monster_types = {
	"dog_wolf",
	"wolf",
	"fracture_weak",
	"fracture_normal",
	"fracture_strong",
	"fracture_master",
	"fracture_karlik",
	"fracture",
	"carlic_weak",
	"carlic_strong",	
	"karlito",
	"carlic",
	"vypolzen_red",
	"vypolzen",
	"psy_dog",
	"pseudodog_weak",
	"pseudodog_normal",
	"pseudodog_strong",
	"pseudodog_big",
	"volkodav",
	"pseudodog",
	"rotan",
	"tushkano_normal",
	"tushkano_strong",
	"tushkano",
	"nosales",
	"bloodsucker_weak",
	"bloodsucker_normal",
	"bloodsucker_strong",
	"bloodsucker_mil",
	"bloodsucker_effector",
	"bloodsucker_hell",
	"zombie_hell15",
	"bloodsucker_child",
	"bloodsucker",
	"oboroten",
	"m_controller_normal_fat",
	"m_controller_normal",
	"m_controller_old_fat",
	"m_controller_old",	
	"controller_tubeman",
	"controller_senator",
	"controller_babka",
	"m_controller_act",
	"controller_flame",
	"controller",
	"psyonik",
	"gigant_weak",
	"gigant_normal",
	"gigant_strong",
	"gigant_red_strong",
	"gigant_big_strong",
	"gigant_virus_strong",
	"gigant_jumper_normal",
	"gigant_jumper_strong",
	"gigant_super_jumper",
	"gigant",
	"burer_weak",
	"burer_normal",
	"burer_strong",
	"burer_electro",
	"burer_build",
	"burer",
	"chimera_weak",
	"chimera_normal",
	"chimera_strong",
	"chimera_x_ray",
	"chimera_black",
	"fire_chimera",
	"new_electro_chimera",
	"electro_chimera",
	"bear",	
	"chimera",
	"tarakan_normal",
	"tarakan_strong",
	"tarakan",
	"m_poltergeist_normal_tele",
	"m_poltergeist_tele_outdoor",
	"m_poltergeist_normal_flame",
	"m_poltergeist_strong_flame",
	"poltergeist_build",
	"m_poltergeist_dd",
	"electro_polter",
	"polter_xray",
	"poltergeist",
	"bibliotekar_black",
	"bibliotekar",
	"deathclaw_weak",
	"deathclaw_normal",
	"deathclaw_strong",
	"deathclaw",
	"new_hell",
	"flesh_weak",
	"flesh_normal",
	"flesh_strong",
	"flesh_swamp",
	"flesh",
	"zanoza",
	"boar_weak",
	"boar_mini",
	"boar_normal",
	"boar_strong",
	"molerat",
	"boar_kachok",
	"kikimora",
	"boar",
	"spider",
	"snork_weak",
	"snork_normal",
	"snork_stronger",
	"snork_strong",	
	"snork_outdoor",
	"snork_indoor",
	"aes_snork",
	"snork_jumper",	
	"snork",
	"rat_weak",
	"rat_normal",
	"rat_strong",
	"rat",
	"cat_weak",
	"cat_normal",
	"cat_strong",
	"cat",
	"dog_weak",
	"dog_normal",
	"dog_strong",
	"dog_skeleton",
	"dog_green",
	"dog_sil_hill",
	"dog_zombie",
	"dog_habaruch",	
	"dog",
	"zombie_trup2",
	"zombie_trup",	
	"zombie_weak",
	"zombie_normal",
	"zombie_ghost",
	"zombie_blow",
	"zombie_beee",
	"zombie_plague_komar",
	"zombie_plague",
	"zombie_hell14",
	"zombie_hell13",
	"zombie_hell12",
	"zombie_hell11",
	"zombie_hell10",	
	"zombie_hell1",
	"zombie_hell2",
	"zombie_hell3",
	"zombie_hell4",
	"zombie_hell5",
	"zombie_hell6",
	"zombie_hell7",
	"zombie_hell8",
	"zombie_hell9",	
	"zombie_babka_weak",
	"zombie_babka_normal",
	"zombie_immortal",
	"zombie_babka_strong",
	"zombie_strong",	
	"zombie_hell",
	"zombie",
	"scelet",
	"ghoul",
	"vodjanoj",
}

local rank_by_val = {
	stalkerkills = 	{
		novice = 0, experienced = 1, veteran = 2, master = 3, legend = 4
	},
	monsterkills = {
		weak = 1, normal = 2, strong = 3
	}
}

function getNpcType(npc)
	if npc == nil then return nil end
	
	local section = npc:section()
	local cls = npc:clsid()
	if section == nil then return nil end

	if actor_active_item then
		local weapon_sect = actor_active_item:section()
		if weapon_sect == "wpn_kuvalda" then
			archievements.acv_count_2event("acv_kuv", 100,  "acv_kuv2", 300)
		elseif weapon_sect == "wpn_topor" then
			archievements.acv_count_2event("acv_top", 100, "acv_top2", 300)
		elseif weapon_sect == "wpn_crowbar" then
			archievements.acv_count_2event("acv_crow", 100, "acv_crow2", 300)
		elseif weapon_sect == "wpn_machete" then
			archievements.acv_count_2event("acv_mach", 100, "acv_mach2", 300)
		elseif weapon_sect == "wpn_kukri" then
			archievements.acv_count_2event("acv_kuk", 100, "acv_kuk2", 300)
		elseif (string.find(weapon_sect, "ognemet") or string.find(weapon_sect, "flame")) and IAmAMonster[cls] then	
		    archievements.acv_count_event("acv_pir", 100)
		end
	end

	if IAmAMonster[cls] then
		if cls == clsid.poltergeist_s then
			archievements.acv_count_event("acv_ftom", 50)   
		end
		
		if string.find(section, "gigant") then
			archievements.acv_count_event("acv_gob", 50)
		elseif string.find(section, "chimera") and Actor:active_slot() == inventory_slots.KNIFE then
			archievements.acv_count_event("acv_ukro", 50)
		elseif string.find(section, "rat") then
			archievements.acv_count_event("acv_krs", 100)
		elseif string.find(section, "bloodsucker") and Actor:active_slot() == inventory_slots.KNIFE then
			archievements.acv_count_event("acv_gum", 50)  
		elseif string.find(section, "vodjanoj") then
			archievements.acv_count_event("acv_bbk", 40) 
		elseif string.find(section, "deathclaw") and Actor:active_slot() == inventory_slots.KNIFE then
			archievements.acv_count_event("acv_tigr", 10)  
		elseif string.find(section, "controller") then
			archievements.acv_count_event("acv_mgvd", 50) 
		elseif string.find(section, "burer") then
			archievements.acv_count_event("acv_lxlt", 50) 
		elseif string.find(section, "snork") then
			archievements.acv_count_event("acv_tprg", 50) 
		elseif string.find(section, "flesh") then
			archievements.acv_count_event("acv_svin", 50) 
		elseif string.find(section, "boar") then
			archievements.acv_count_event("acv_barb", 50) 
		elseif string.find(section, "vypolzen") then
			archievements.acv_count_event("acv_xob", 50) 
		elseif string.find(section, "carlic") then
			archievements.acv_count_event("acv_guli", 50)
		end
	end
	
	local community
	if IAmAStalker[cls] then
		community = communityByCommunity[npc:character_community()]
		if not community then
			community = "neutral"
		end
		local rank = ranks.get_obj_rank_name(npc)
		
		archievements.acv_kill()
		if community == "killer" then
			archievements.acv_count_event("acv_anki", 100)
		elseif community == "bandit" then
			archievements.acv_count_event("acv_ment", 150)  
		elseif community == "monolith" then
			archievements.acv_count_event("acv_vrgm", 150) 
		elseif community == "vermaht" then
			archievements.acv_count_event("acv_prtz", 50)	  
		end
		
		return "stalkerkills", community.."_"..rank
		
	elseif cls == clsid.script_heli then
		archievements.acv_mons()
		return "techkills", "helicopter"
	
	elseif cls == clsid.car_s then
		if string.find(section, "vehicle_btr") then
			archievements.acv_mons()
			return "techkills", "vehicle_btr"
		end
	
	elseif cls == clsid.turret_mgun then
		archievements.acv_mons()
		return "techkills", "turret"
	
	else
		for _,k in ipairs(monster_types) do
			if string.find(section, k) then
				community = k
				break
			end
		end
		
		if not community then
			--abort("Statistic ERROR: cannot find monstr class for [%s]", npc:name())
			return nil, nil
		end

		if cls == clsid.zombie_s then
			archievements.acv_count_event("acv_zoms", 1000)
		end
		archievements.acv_mons()

		return "monsterkills", community
	end	
end

function addKillCount(npc)
	if has_alife_info("peshera_go") then return end	-- сон в Пещере не считаем

	local props, sect_name = getNpcType(npc)
	if not ( props and sect_name ) then return end

	-- Начисляем по рангу убитого
	local r = 0
	if sect_name=="vehicle_btr" or sect_name=="helicopter" then
		r = 4
	elseif sect_name=="turret" then
		r = 3
	elseif rank_by_val[props] then
		local rank_name = ranks.get_obj_rank_name(npc)
		r = rank_by_val[props][rank_name] or 0
	end
--	log1("~~addKillCount: "..props..", "..sect_name.." -> "..r)
	actor_stats.add_points(props, sect_name, 1, 1)
	add_actor_rank(r)
end

-- считаем квесты
function add_task()
	amk.save_variable("AS_T", amk.load_variable("AS_T", 0)+1)
end
function add_subtask()
	amk.save_variable("AS_ST", amk.load_variable("AS_ST", 0)+1)
end

-- окно дополнительной статистики 
class "QuestStat" (CUIScriptWnd)

function QuestStat:__init(owner) super()
   self.owner = owner
   self:InitControls()
end

function QuestStat:InitControls()
	self:SetWndRect(70,527,240,120)
	self:SetAutoDelete(true)
	self:Show(true)
	self.owner:AttachChild(self)

	self.blow_st = CUIStatic()
	self.blow_st:Init(0, -17, 200, 20)
	self.blow_st:SetAutoDelete(true)
	self.blow_st:SetFont(GetFontLetterica18Russian())
	self.blow_st:SetTextColor(160,170,170,170)
	self.blow_st:SetTextAlign(CGameFont.alLeft)
	self.blow_st:SetText(game.translate_string("st_pda_blow"))
	self:AttachChild(self.blow_st)

	self.blow = CUIStatic()
	self.blow:Init(210, -17, 25, 20)
	self.blow:SetAutoDelete(true)
	self.blow:SetFont(GetFontLetterica18Russian())
	self.blow:SetTextColor(200,255,255,255)
	self.blow:SetTextAlign(CGameFont.alRight)
	self.blow:SetText(tostring(amk.load_variable("BLT", 0)))
	self:AttachChild(self.blow)

	self.task_st = CUIStatic()
	self.task_st:Init(0, 20, 200, 20)
	self.task_st:SetAutoDelete(true)
	self.task_st:SetFont(GetFontLetterica18Russian())
	self.task_st:SetTextColor(160,170,170,170)
	self.task_st:SetTextAlign(CGameFont.alLeft)
	self.task_st:SetText(game.translate_string("st_pda_tasks"))
	self:AttachChild(self.task_st)

	self.task = CUIStatic()
	self.task:Init(210, 20, 25, 20)
	self.task:SetAutoDelete(true)
	self.task:SetFont(GetFontLetterica18Russian())
	self.task:SetTextColor(200,255,255,255)
	self.task:SetTextAlign(CGameFont.alRight)
	self.task:SetText(tostring(amk.load_variable("AS_T", 0)))
	self:AttachChild(self.task)

	self.subtask_st = CUIStatic()
	self.subtask_st:Init(0, 42, 200, 20)
	self.subtask_st:SetAutoDelete(true)
	self.subtask_st:SetFont(GetFontLetterica18Russian())
	self.subtask_st:SetTextColor(160,170,170,170)
	self.subtask_st:SetTextAlign(CGameFont.alLeft)
	self.subtask_st:SetText(game.translate_string("st_pda_subtasks"))
	self:AttachChild(self.subtask_st)

	self.subtask = CUIStatic()
	self.subtask:Init(210, 42, 25, 20)
	self.subtask:SetAutoDelete(true)
	self.subtask:SetFont(GetFontLetterica18Russian())
	self.subtask:SetTextColor(200,255,255,255)
	self.subtask:SetTextAlign(CGameFont.alRight)
	self.subtask:SetText(tostring(amk.load_variable("AS_ST", 0)))
	self:AttachChild(self.subtask)

	self.task_total_st = CUIStatic()
	self.task_total_st:Init(0, 65, 200, 20)
	self.task_total_st:SetAutoDelete(true)
	self.task_total_st:SetFont(GetFontLetterica18Russian())
	self.task_total_st:SetTextColor(230,180,180,180)
	self.task_total_st:SetTextAlign(CGameFont.alLeft)
	self.task_total_st:SetText(game.translate_string("st_pda_tasks_totals"))
	self:AttachChild(self.task_total_st)

	self.task_total = CUIStatic()
	self.task_total:Init(210, 65, 25, 20)
	self.task_total:SetAutoDelete(true)
	self.task_total:SetFont(GetFontLetterica18Russian())
	self.task_total:SetTextColor(200,255,255,255)
	self.task_total:SetTextAlign(CGameFont.alRight)
	self.task_total:SetText(tostring(amk.load_variable("AS_T", 0)+amk.load_variable("AS_ST", 0)))
	self:AttachChild(self.task_total)

	self.death_st = CUIStatic()
	self.death_st:Init(0, 99, 200, 20)
	self.death_st:SetAutoDelete(true)
	self.death_st:SetFont(GetFontLetterica18Russian())
	self.death_st:SetTextColor(160,170,170,170)
	self.death_st:SetTextAlign(CGameFont.alLeft)
	self.death_st:SetText(game.translate_string("st_pda_actor_deaths"))
	self:AttachChild(self.death_st)

	self.death = CUIStatic()
	self.death:Init(210, 99, 25, 20)
	self.death:SetAutoDelete(true)
	self.death:SetFont(GetFontLetterica18Russian())
	self.death:SetTextColor(200,255,255,255)
	self.death:SetTextAlign(CGameFont.alRight)
	self.death:SetText(tostring(archievements.get_death_count("death")))
	self:AttachChild(self.death)

	self.game_st = CUIStatic()
	self.game_st:Init(0, 122, 200, 20)
	self.game_st:SetAutoDelete(true)
	self.game_st:SetFont(GetFontLetterica18Russian())
	self.game_st:SetTextColor(160,170,170,170)
	self.game_st:SetTextAlign(CGameFont.alLeft)
	self.game_st:SetText(game.translate_string("st_pda_actor_games"))
	self:AttachChild(self.game_st)

	self.game = CUIStatic()
	self.game:Init(210, 122, 25, 20)
	self.game:SetAutoDelete(true)
	self.game:SetFont(GetFontLetterica18Russian())
	self.game:SetTextColor(160,170,170,170)
	self.game:SetTextAlign(CGameFont.alRight)
	self.game:SetText(gametime(archievements.get_death_count("game")))
	self:AttachChild(self.game)
end 

function QuestStat:HideWnd()
	self.owner:DetachChild(self)
end

local quest_stat = nil

function ShowQuestStat()
	if not quest_stat then
		quest_stat = QuestStat(level.main_input_receiver())
	end
end

function HideQuestStat()
	if quest_stat then
		quest_stat:HideWnd()
	end
	quest_stat = nil
end

-- строка времени игры
function gametime(time)
	time = math.floor(time*1.1+0.5)
	local str = ""
	local val = 0
	
	if time >= 60*24*365 then
		val = math.floor(time/(60*24*365))
		time = time-val*60*24*365
	--	str = str.." "..tostring(val).." "..timename(val,"год","года","лет")
		str = str.." "..tostring(val).."г."
	end

	if time >= 60*24*30.417 then
		val = math.floor(time/(60*24*30.417))
		time = time-math.floor(val*60*24*30.417+0.5)
	--	str = str.." "..tostring(val).." "..timename(val,"месяц","месяца","месяцев")
		str = str.." "..tostring(val).."мес."
	end

	if time >= 60*24 then
		val = math.floor(time/(60*24))
		time = time-val*60*24
	--	str = str.." "..tostring(val).." "..timename(val,"день","дня","дней")
		str = str.." "..tostring(val).."дн."
	end

	if time >= 60 then
		val = math.floor(time/60)
		time = time-val*60
	--	str = str.." "..tostring(val).." "..timename(val,"час","часа","часов")
		str = str.." "..tostring(val).."ч."
	elseif time > 0 then
	--	str = str.." "..tostring(time).." "..timename(time,"минута","минуты","минут")
		str = str.." "..tostring(time).."мин."
	end
	return str
end

function timename(val,s1,s2,s3)
	if val > 20 then
		val = math.fmod(val,10)
	end
	if val == 0 or val >= 5 then
		return s3
	elseif val >= 2 then
		return s2
	else
		return s1
	end
end

function add_actor_rank(value)
--	local rank = ranks.change_actor_rank( value )
	local rank = Actor:character_rank() + value
    Actor:set_character_rank( rank )
	
	if rank >= 50000 and Actor:dont_has_info("acv_rank3") then
		archievements.send_archievement("acv_rank3")
	elseif rank >= 30000 and Actor:dont_has_info("acv_rank2") then
		archievements.send_archievement("acv_rank2")
	elseif rank >= 10000 and Actor:dont_has_info("acv_rank1") then
		archievements.send_archievement("acv_rank1")
	end
end
----------------------------------------------------------------------------------------------
local stat_arts_ids = {}
local cost_by_rank = {
	[1] = 5000,
	[2] = 10000,
	[3] = 25000,
	[4] = 50000,
	[5] = 100000
}
local cant_add = true

function addArtefact(art_id, art_section)
	if has_alife_info("peshera_go") then return end	-- сон в Пещере не считаем

	if cant_add then return end
	if stat_arts_ids[art_id]==nil then
		stat_arts_ids[art_id] = true
		-- если получили арт при разговоре, то не считаем
		if Actor:is_talking() then return end

		actor_stats.add_points("artefacts", get_inv_name(art_section), 1, 1)
		add_actor_rank( get_af_rank(art_section) )
	end
end

function get_af_rank(section)
	local cost = sys_ini:r_u32(section, "cost")
	local rank = #cost_by_rank + 1
	for i=1, #cost_by_rank do
		if cost <= cost_by_rank[i] then return i end
	end
	return rank
end

function set_id(id, f)
	stat_arts_ids[id] = f
end
function is_found_art(id)
	return stat_arts_ids[id] ~= nil
end

function load_ids(reader, skip)
	cant_add = nil
	
	if skip then return end	-- if first run
	
	local n = reader:r_u16()
	if n == 0 then return end
	
	local id, obj
	for i = 1,n do
		id = reader:r_u16()
		obj = AI:object(id)
		if obj and bind_det_arts.is_detected_art(obj:section_name()) then
			stat_arts_ids[id] = true
		end
	end
	
	-- if game_options.DEBUG then
		-- log("- arts statistic: loaded table size: %d", table.size(stat_arts_ids))
	-- end
end

function save_ids(packet)
	local s = table.size(stat_arts_ids)
	-- if game_options.DEBUG then
		-- log("- arts statistic: save_ids: table size = %d", s)
	-- end
	packet:w_u16(s)
	for k in pairs(stat_arts_ids) do
		packet:w_u16(k)
	end
end
