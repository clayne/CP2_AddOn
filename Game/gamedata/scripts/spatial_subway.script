-- -*- mode: lua; encoding: windows-1251 -*-
levels = {}

local max_cnt = 7
local min_cnt = 4
local zone_radius = 2.5

local tmp_pos, max_lv

function init()
	if not has_alife_info( "spatial_subway_start" ) then return end

	local lname = level.name()

	local t = n_vertexes.get_locations( true )
	for i, lvl in ipairs( t ) do
		if levels[ lvl ] == nil then
			levels[ lvl ] = false
		end
	end

	if levels[lname] ~= nil and not has_alife_info(lname.."_subway") then
		Actor:give_info_portion(lname.."_subway")

		max_lv = n_vertexes.get_max_level_vertex()
		tmp_pos = {}
		
		local cnt = math.random( min_cnt, max_cnt )
		local chk_count = 100000
		while cnt > 0 do
			if spawn_teleport() then cnt = cnt - 1 end
			chk_count = chk_count - 1
			if chk_count<0 then break end
		end

		max_lv, tmp_pos = nil, nil
	end
end

function add_zone(se_obj)
	local gv = se_obj.m_game_vertex_id
	local ln = AI:level_name(GGraph:vertex(gv):level_id())
	if not levels[ln] then levels[ln] = {} end
	if levels[ln][se_obj.id] == nil then
		levels[ln][se_obj.id] = {
			pos = se_obj.position,
			lv    = se_obj.m_level_vertex_id,
			gv   = gv
		}
		-- log("add_zone %s", se_obj:name())
	end
end

function spawn_teleport()
	local new_lv = math.random(1, max_lv)
	local pos = level.vertex_position(new_lv)
	
	if Actor:position():distance_to(pos) < 10 then return false end
	for _,p in ipairs(tmp_pos) do
		if p:distance_to(pos) < 60 then return false end
	end
	table.insert(tmp_pos, pos)

	local new_gv = n_vertexes.get_nearest_gv( pos )

	return this.create_zone_subway(pos, new_lv, new_gv)
end

function use_scaner(item)
	if level.main_input_receiver() then
		level.start_stop_menu(level.main_input_receiver(), true)
	end

	local cond = item:condition()
	if cond < 0.02 then
		bind_subway.sms( "subway_scaner_low_charge" )
		return
	end

	local zone_id, activated = bind_subway.get_active_zone()
	if activated == nil then
		level.start_stop_menu(ui_spatial_scaner.UIPdaTeleport(false, item), true)
	elseif activated == true then
		level.start_stop_menu(ui_spatial_scaner.UIPdaTeleport(true, item), true)
	elseif activated == false then
		if cond > 0.3 then
			bind_subway.start_scan_timer(zone_id)
		else
			bind_subway.sms( "subway_scaner_low_charge_scan" )
		end
	end
end
---------------------------------------------------------------------------------------
function go_to(lname, id)
--	log("go_to: %s-%s", tostring(lname), tostring(id))
	local point = levels[lname][id]
		or abort("teleportator: not exist coordinates for level '%s', zone id [%s]", tostring(lname), tostring(id))

	level.enable_input()
	if lname == level.name() then
		local snd_obj = xr_sound.get_safe_sound_object([[affects\tinnitus3a]])
		snd_obj:play_no_feedback(Actor, sound_object.s2d, 0, vector(), 1.0)	
		Actor:set_actor_position(point.pos)
	else
		level_changers.create_teleport_on_actor(point.pos, point.lv, point.gv, nil, true)
	end
end

---------------------------------------------------------------------------------------
function create_zone_subway( pos, new_lv, new_gv )
	local se_obj = AI:create( "zone_subway", pos, new_lv, new_gv )
--	level.map_add_object_spot_ser( se_obj.id, 'blue_location', se_obj:name() )
	local data = {}
	data.shapes = {
		[ 1 ] = {
			[ "shtype" ] = 0,
			[ "center" ] = vector():set( 0, 0, 0 ),
			[ "radius" ] = zone_radius
		}
	}
	data.restrictor_type = 3  -- RestrictorTypeNone
	netpk:modify( se_obj, data, netpk.fState )
	return se_obj
end

