-- -*- mode: lua; encoding: windows-1251 -*-
-- -----------------------------
--  DreamMod v0.2 by Ab@dDon ---
-- -----------------------------
--'*******************************************************************************
--'   **   **   **   **   **    **   **   **      SLEEP_AMK          **   **   **   **   **    **   **   **   **
--'*******************************************************************************
--' gg_need_sleep		- одна единица == 6 минут (0.1 часа) (бодрствования)
--' gg_need_sleep_nrg	- одна единица == 1 час ("занятый" энергетиками у сна)
sleep_factor = false
sleep_pp_threshold = false
sleep_critical = false

local scaling_time_factor = 3460
local start_sleep_time = 0
local isSleepActive = false
local set_sleep_time = 0
local get_seconds = amk.game_seconds
local time_factor = nil
local last_health = 0

local function check_sleep_time()
	if ( get_seconds() >= set_sleep_time ) or isSleepActive == false then
		level.set_time_factor(time_factor)
		return true
	end
	return false
end
local function restore_time_factor()
	set_sleep_time = 0
end

function main(scale)		-- in hours
	if isSleepActive then
		return
	end

	isSleepActive = true
	Actor:stop_talk()
	bind_actor.hide_weapon("sleep")
	level.disable_input()
	sleep_manager.starter (scale)
end

function starter(scale)
	start_sleep_time = amk.game_minutes()
	last_health = Actor.health

	game.start_tutorial("time_scaling")

	set_sleep_time = get_seconds() + scale*3600

	time_factor = level.get_time_factor()
	level.set_time_factor(scaling_time_factor)
	level.add_call(check_sleep_time, restore_time_factor)
end

function stop_scaling()
	if set_sleep_time > 0 and last_health <= Actor.health then
		last_health = Actor.health
		game.start_tutorial("time_scaling")
		return
	elseif last_health > Actor.health then
		news_manager.send_tip("st_sleep_actory_xpenovo", 7, "str", 10000)
	end
	sleep_manager.dreamer()
end

function dreamer()
	if isSleepActive then
		level.remove_call(check_sleep_time, restore_time_factor)
		level.set_time_factor(time_factor)

		local dream = dream.sleep_video_name_callback()
		if dream ~= "" then game.start_tutorial(dream)
		else game.start_tutorial("without_dream") end
	end
end

function stopper()
	if not isSleepActive then
		return
	end
	isSleepActive = false

	if level.get_time_factor() == scaling_time_factor then
		level.remove_call(check_sleep_time, restore_time_factor)
		level.set_time_factor(time_factor)
	end

	if Actor:alive() then
		level.add_cam_effector("camera_effects\\prison_1.anm", 25, false, "level.enable_input")
		level.add_pp_effector("yantar_underground_psi.ppe", 2007, false)
		level.add_pp_effector("total_recall.ppe", 2008, false)
		bind_actor.restore_weapon("sleep")
		local snd_obj = xr_sound.get_safe_sound_object([[characters_voice\human_01\stalker\states\breath\breath_2]])
		snd_obj:play_no_feedback(Actor, sound_object.s2d, 0, vector(), 15.0)
	    level.add_cam_effector("camera_effects\\hit_back_left.anm", 26, false, "")
		
		local slept = (amk.game_minutes() - start_sleep_time)/60	-- in hours
	--	log1("sleep_manager.stopper: slept = "..slept)
		this.reduce_need_sleep(slept)

		archievements.acv_count_event("acv_slp", 2160, "Засоня", slept)
	else
		level.enable_input()
	end
end

function is_sleep_active()
	return isSleepActive
end
----------------------------------------------------------------------------------------------

function reduce_need_sleep(_time)	-- in hours
	_time = _time*sleep_factor
--	log("# reduce_need_sleep: %f", _time)
	local tmp = amk.load_variable("gg_need_sleep_nrg",0)
--	log("gg_need_sleep_nrg: %f", tmp)
	amk.save_variable("gg_need_sleep_nrg", math.max(tmp - _time, 0))
	_time = _time - tmp
--	log("time left: %f", _time)

	tmp = amk.load_variable("gg_need_sleep", 0)
	tmp = math.max(tmp - _time * 10, 0)
	amk.save_variable("gg_need_sleep",tmp)
	test_sleep_pp(tmp)
--	log("gg_need_sleep = %f",tmp)
end

function test_for_need_sleep()
	if not sleep_manager.is_sleep_active() then
		-- одна единица этой переменной содержит 6 игровых минут бодрствования
		local v = amk.load_variable("gg_need_sleep",0) + 1
		amk.save_variable("gg_need_sleep", v)
		test_sleep_pp(v)
	--	log("test_for_need_sleep: %f", v)
	end
	start_game_timer("gg_need_sleep",0,0,6)
end

function sleep_force()
--	local need_sleep = amk.load_variable("gg_need_sleep",0)/10
	local need_sleep_nrg = amk.load_variable("gg_need_sleep_nrg",0)
	Actor.satiety = 0.4
	sleep_manager.main( 5 + need_sleep_nrg )
end

function test_sleep_pp(val)
	if has_timer("block_sleep_menu") then
		if level.has_pp_effector(999) ~= 0 then
			level.remove_pp_effector(999)
		end
		return
	end

	local need_sleep = val/10	-- в часах для наглядности

	-- вырубаемся на пять часоов + время, "занятое" энергетиками
	if need_sleep > sleep_critical then
		if sleep_manager.is_sleep_active() then return end
		level.add_cam_effector("camera_effects\\fusker.anm", 999, false, "sleep_manager.sleep_force")
		return
	end

	-- начинается муть в глазах
	if need_sleep > sleep_pp_threshold then
		if level.has_pp_effector(999) == 0 then
			level.add_pp_effector("yantar_underground_psi.ppe", 999, true)
		end
		local k = 1 - (sleep_critical - need_sleep)/(sleep_critical - sleep_pp_threshold)
		level.set_pp_effector_factor(999, k*5)
	elseif level.has_pp_effector(999) ~= 0 then
		level.remove_pp_effector(999)
	end
end

function test_for_need_sleep_med(v)
	local vv = amk.load_variable("gg_need_sleep",0) + (v or 3)
	amk.save_variable("gg_need_sleep", vv)
	-- test_sleep_pp(vv)
end

function test_for_need_sleep_matras()
	amk.spawn_item_in_inv("matras")

	-- Проверка на врагов
	local actorPos = Actor:position()
	for npcId, obj in pairs(db.creatures) do
		if obj and obj:alive()
			and obj:position():distance_to(actorPos) < 70 and obj:see(Actor)
			and ( ( IAmAStalker[obj:clsid()] and obj:relation(Actor)==game_object.enemy )
			or IAmAMonster[obj:clsid()] )
		then
			ui_inv_add.show_inv_msg("not_need_sleep_enemy", "red" )
			return false
		end
	end

	local need_sleep_hours
	-- Проверим, хотим ли спать.
	-- Одна единица переменной gg_need_sleep равна 6 игровым минутам.
	-- Если полностью выспались, то не можем спать 10 минут.
	if has_alife_info("snp_shadows_start") and not has_alife_info("snp_shadows_done") then
		need_sleep_hours = 300/sleep_factor
	else
		need_sleep_hours = (
			amk.load_variable("gg_need_sleep",0) +
			amk.load_variable("gg_need_sleep_nrg",0)*10
		) / sleep_factor
	end

	-- Проверка на выброс
	local bl = amk.load_variable("blowout",-1)
	if bl > -1 and bl < 5 then
		ui_inv_add.show_inv_msg("blowout_not_sleep", "red" )
		return false
	-- Проверка на "Час ужаса"
	elseif has_alife_info("horror_time_begin") then
		ui_inv_add.show_inv_msg("not_need_sleep_in_hell", "red" )
		return false
	-- Энергетики
	elseif has_timer("block_sleep_menu") then
		local msg = format_text_pairs( game.translate_string("not_need_sleep_nrg"), {actor = Actor:character_name()} )
		ui_inv_add.show_inv_msg( msg, "red" )
		return false
	end

--	log1("##gg_need_sleep: "..need_sleep_hours)
	if need_sleep_hours > 10/6 then		-- можно ли хотя бы вздремнуть 10 минут
		-- звуковое сопровождение
		local snd = xr_sound.get_safe_sound_object("zwuk\\inv_sleeping")
		snd:play_no_feedback(Actor, sound_object.s2d, 0, vector(), 2.0)
		local spwn=ui_sleep_menu.UISleepWnd(need_sleep_hours)
		level.start_stop_menu(spwn,true)
		return true
	else
		local msg = format_text_pairs( game.translate_string("not_need_sleep"), {actor = Actor:character_name()} )
		ui_inv_add.show_inv_msg( msg, "red" )
		return false
	end
end

function add_sleep(v)
	if is_sleep_active() then return end
	amk.save_variable( "gg_need_sleep", amk.load_variable( "gg_need_sleep",0 ) + v*level.get_time_factor() )
end

function init_sleep()
	local condition_sect = sys_ini:r_string("actor", "condition_sect")
	sleep_factor = sys_ini:r_float(condition_sect, "sleep_wake_factor")
	sleep_pp_threshold = sys_ini:r_float(condition_sect, "sleep_pp_threshold")
	sleep_critical = sys_ini:r_float(condition_sect, "sleep_critical")

	if not has_timer("gg_need_sleep") then
		start_game_timer("gg_need_sleep",0,0,6)
	end

	this.test_sleep_pp( amk.load_variable("gg_need_sleep", 0) )
end

function attach()
	xr_s.subscribe("net_spawn", this.init_sleep)
end
