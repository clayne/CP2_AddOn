-- -*- mode: lua; encoding: windows-1251 -*-
--Vergas player
-- Last update: naxac /30.10.2019/

local snd_obj = nil

local lost_id = -1
local menu_show = false

local flash_total = 16	-- общее количество флешек
local slot_flash = {} 	-- флешки
local rep_flash = {}	-- прослушанные треки (чтобы не повторялись при случайном выборе)
local played = {}		-- здесь храним воспроизведённые треки в порядке воспроизведения, чтобы можно было отмотать назад
local tracks_count = {}	-- число треков на флешках

local work_flash 		-- Рабочий слот: номер вставленной флешки. Если nil, то флешка не вставленна
local work_trek = 0		-- Номер проигрываемого трекаю. Если 0, то либо ничего не играет, либо  иргает не с флешки (радио)
local flash_id, spawn_flash = nil, nil

-- устанавливаю первоначальный уровень громкости
local sound_vol = 0.4
-- устанавливаю первоначальное значение повтора
local rpt = "rnd2"	-- может быть 'on', 'off', 'one', 'rnd' или 'rnd2'


function set_rnd_track(rnd_flash)
	if rnd_flash then	-- нужно загрузить рандомно из любой имеющейся флешки
		local t = {}
		local has_actor = {}
		for i = 1, flash_total do
			if Actor:object("ogg_flash_"..i) then
				table.insert(has_actor, i)
				for j = 1, tracks_count[i] do
					if rep_flash[i][j] == nil then
						table.insert(t, i)
						break
					end
				end
			end
		end
		local n = work_flash
		if #t > 0 then	-- что-то непроигранное ещё есть
			set_show_flash(table.random(t))
			ui_player_ogg.change_flash(n, work_flash)
		else	-- треки кончились - сброс
			set_show_flash(table.random(has_actor))
			for i = 1, flash_total do rep_flash[i] = {} end
			ui_player_ogg.change_flash(n, work_flash)
			set_rnd_track(false)		-- выбираем по-новой
			return
		end
	end

	local tmp = {}
	for i = 1, tracks_count[work_flash] do
		if rep_flash[work_flash][i] == nil then
			table.insert(tmp, i)
		end
	end
	if #tmp ~= 0 then
		work_trek = table.random(tmp)
	else
		local n = work_trek
		while work_trek == n do
			work_trek = math.random(1, tracks_count[work_flash])
		end
		rep_flash[work_flash] = {}
	end
	rep_flash[work_flash][work_trek] = true
end

function update(delta)
	--Разбираемся с плеером
	if lost_id > 0 then
		if not menu_show then
			if AI:object(lost_id)==nil then
				used_player()
			else
				s_stop(true)
			end
		end
		lost_id = -1
	end
	--Разбираемся с флешками
	if flash_id then
		if AI:object(flash_id)==nil then
			amk.spawn_item_in_inv("ogg_flash_"..spawn_flash)	--Флешку "съели" и восстанавливаем её в инвенторе
			if Actor:object("player") then
				s_stop(false)
				set_show_flash(spawn_flash)
				s_play("ogg_player\\flash_"..tostring(work_flash).."\\sound_1",1)
			end
		else
			if spawn_flash == work_flash then	--выброшенная флешка в рабочем слоте плеера
				work_flash = nil			-- в рабочем слоте ничего нет
				s_stop(true)					-- отключается проигрываемый файл
				rpt = "off"				-- отключаю воспроизведение по кругу
				work_trek = 0			-- никакой трек не проигрывается
			end
		end
		spawn_flash = nil
		flash_id = nil	
	end
	-- Разбираемся с закольцовкой
	if snd_obj then
		if snd_obj:playing()==false then
			play_next()
		else
			ui_player_ogg.update_timer(delta, snd_obj, work_trek)
		end
	end
end

function used_player()
	-- Обрабатываю слоты флешек
	get_flash()
	--Открываю меню
	set_menu_show(true)
	local spwn=ui_player_ogg.UIPlayer(get_hud())
	level.start_stop_menu(spwn,true)
end

--потеря плеера
function lose_item(obj)
	if _G['biznes_remove_special_item'] then return end
	if not menu_show then
		lost_id = obj:id()
	end
end
--Потеря флешек
function lose_flash(obj)
	if _G['biznes_remove_special_item'] then return end
	flash_id = obj:id()
	spawn_flash = tonumber(obj:section():sub(11))
end

function play_next()
	local old_track = work_trek
	if rpt ~= "off" and work_trek ~= 0 then
		if rpt == "on" then		-- играем по кругу из этой флешки
			work_trek = work_trek+1
			if work_trek > tracks_count[work_flash] then work_trek = 1 end
	--	elseif rpt == "one" then	-- играем по кругу один трек
		elseif rpt == "rnd" then	-- играем случайный трек с работающей флешки
			set_rnd_track(false)
		elseif rpt == "rnd2" then	-- играем случайный трек со случайной флешки
			set_rnd_track(true)
		end
		s_play("ogg_player\\flash_"..tostring(work_flash).."\\sound_"..tostring(work_trek),work_trek)
	else
		s_stop(true)
	end
	ui_player_ogg.change_track(old_track, work_trek)
end

function set_menu_show(b)
	menu_show = b
end

function get_flash()
	--Проверяю наличие флешек в мешке
	for i = 1, flash_total do
		slot_flash[i] = Actor:object("ogg_flash_"..i) and 1 or 0
	end

	-- Проверяю рабочий слот
	if work_flash ~= nil then			----------------ставлю nil вместо 0
		slot_flash[work_flash] = 0
	end
end

function return_slot(t)
	if t == 0 then
		-- Рабочий слот
		return work_flash
	end
	
	return slot_flash[t]
end

function set_show_flash(n)			-- n - номер флешки. Закрывает иконку флешки и перемещает флешку в рабочий слот
	if work_flash then
		slot_flash[work_flash] = 1
	end
	if n then
		slot_flash[n] = 0
	end
	work_flash = n
end

function get_flash_total()
	return flash_total
end

function get_flash_tracks_count(f)
	return tracks_count[f]
end

function work_flash_return()
	return work_flash
end

function sound_vol_return()
	return sound_vol
end

function sound_vol_set(n)
	sound_vol = n
	if snd_obj and snd_obj:playing()==true then
		snd_obj.volume = sound_vol
	end
	save_player()
end

function get_repeat()
	return rpt
end

function set_repeat(mode)
	rpt = mode
	played = {}
	save_player()
end

function get_work_trek()
	return work_trek
end

function s_stop(del)
	Actor:disable_info_portion("u_6")

	if snd_obj and snd_obj:playing()==true then 
		snd_obj:stop() 
	end
	snd_obj = nil
	ui_player_ogg.reset_timer()
	if del then
		amk.del_variable("ogg")
		work_trek = 0
	end
end

function s_play(path, trek)
	s_stop(false)
	snd_obj = xr_sound.get_safe_sound_object(path)
	snd_obj:play(Actor, 0, sound_object.s2d)
	snd_obj.volume = sound_vol
	work_trek = trek
	
	Actor:give_info_portion("u_6")
	ui_player_ogg.reset_timer()

	if work_flash ~= nil and work_trek ~= 0 then
		-- запомни проигрываемое для возврата
		local tmp = played[#played]
		if tmp then
			local f, t = unpack(tmp)
			if t~=trek or f~=work_flash then
				table.insert(played, {work_flash, trek})
			end
		else
			table.insert(played, {work_flash, trek})
		end
	end

	this.save_player()
	this.show_work_track()
end

function save_player()
	if work_flash == nil or work_trek == 0 then
		amk.del_variable("ogg")
		return
	end

	amk.save_table( "ogg", {work_flash, work_trek, rpt, sound_vol} )
end

function get_prev_track()
	local v = table.remove(played)
	if v then
		return unpack(v)
	end
	return nil, 0
end

function start_pleer_post_save()
	local fs = getFS()
	for i = 1, flash_total do
		slot_flash[i]= 0	-- если 0 - флешки в слоте нет, 1 - флешка есть
		rep_flash[i] = {}
		local n = 1
		while true do
			if fs:exist("$game_sounds$", "ogg_player\\flash_"..i.."\\sound_"..n..".ogg") == nil then
				tracks_count[i] = n - 1
				break
			end
			n = n + 1
		end
	end

	if Actor:has_info("u_6") then
		if Actor:object("player") then
			local t = amk.load_table("ogg")
			if #t == 0 then
				Actor:disable_info_portion("u_6")
				return
			end
			work_flash = t[1] 	-- Рабочий слот: номер вставленной флешки. 	
			if work_flash then
				if Actor:object("ogg_flash_"..work_flash) then
					work_trek = t[2]	-- Номер проигрываемого трека
					if work_trek ~= 0 then
						set_show_flash(work_flash)
						rpt = t[3] or "on"
						sound_vol = t[4] or 0.4
						play_next()
					end
				end
			end
		end
	end
end
-------------------------------------------------------------------------
local wnd = nil
local wnd_alpha = 255

function show_work_track()
	if work_trek == 0 then return end

	if wnd == nil then
		wnd = CUIStatic()
		wnd:Init(0, 0, 1024, 70)
		wnd:InitTexture("intro\\intro_back")
		wnd:SetStretchTexture(true)
		wnd:SetText("track")
		wnd:SetTextComplexMode(true)
		wnd:SetFont( GetFontGraffiti22Russian() )
		wnd:SetTextAlign(CGameFont.alCenter)
		wnd:SetVTextAlign(CGameFont.alVCenter)
		get_hud():AddDialogToRender(wnd)
	end

	wnd_alpha = 255
	local fl = ui_player_ogg.get_flash_descr(work_flash)
	local text = string.format( "%s\\n%02d. %s", fl.name, work_trek, fl.tracks[work_trek] )
	wnd:SetText(text)

	xr_s.subscribe("update", this.update_hide_wnd)
	xr_s.subscribe("net_destroy", this.remove_wnd)
end

function remove_wnd()
	if wnd then
		get_hud():RemoveDialogToRender(wnd)
		wnd = nil
		xr_s.unsubscribe("update", this.update_hide_wnd)
		xr_s.unsubscribe("net_destroy", this.remove_wnd)
	end
end

function update_hide_wnd(delta)
	if wnd_alpha <= 0 then
		this.remove_wnd()
		return
	end

	wnd:SetColor( GetARGB(wnd_alpha,255,255,255) )
	wnd:SetTextColor(wnd_alpha,255,255,255)

	wnd_alpha = wnd_alpha - delta/25
end
