-- -*- mode: lua; encoding: windows-1251 -*-
--local tmr = profile_timer()
--tmr:start()

RvP()	-- init Lua extension

_G.sys_ini = system_ini()
_G.is_16_9_mode = function()
	return device().width/device().height > (1024/768 + 0.01)
end
_G.kScreen = math.min( (device().height/device().width/0.75), 1 )
set_static_rescale_factor( _G.kScreen )

game_options.load_game_options()

-- X-ray extensions callbacks
-- CActor
callback.on_key_press                 = 123
callback.on_key_release               = 124
callback.on_key_hold                  = 125
callback.on_mouse_wheel               = 126
callback.on_mouse_move                = 127
callback.on_anomaly_hit               = 128
callback.on_drop_inv_item             = 129
callback.on_belt                      = 130
callback.on_ruck                      = 131
callback.on_slot                      = 132
callback.on_select_item               = 133
callback.on_create_cell_item          = 136
callback.on_attach_vehicle            = 137
callback.on_vehicle_exit              = 138
callback.on_detach_vehicle            = 139
callback.after_save                   = 140
callback.on_focus_item                = 141
callback.on_focus_lost_item           = 142
callback.on_grouping_item             = 143
callback.on_mob_hit_to_actor          = 144
callback.on_change_goodwill           = 145
callback.on_before_use_item           = 156
callback.on_animation_end             = 157
callback.pda_contact                  = 180
-- CTorch
callback.on_switch_torch              = 134
-- CAIStalker
callback.on_set_dest_vertex           = 135
-- CInventoryBox
callback.on_inv_box_put_item          = 151
-- CEntityAlive
callback.entity_alive_before_hit      = 152
-- CWeapon
callback.update_addons_visibility     = 154
callback.update_hud_addons_visibility = 155

-- Некоторые недостающие key_bindings
key_bindings.kENGINE		= 15
key_bindings.kACTIVE_JOBS	= 53
key_bindings.kMAP			= 54
key_bindings.kCONTACTS		= 55
key_bindings.kEXT_1			= 56
key_bindings.kUSE_BANDAGE	= 73
key_bindings.kUSE_MEDKIT	= 74
key_bindings.kQUICK_SAVE	= 75
key_bindings.kQUICK_LOAD	= 76
key_bindings.DUMMY			= 78
-- Некоторые недостающие DIK_keys
DIK_keys.DUMMY				= 0
DIK_keys.DIK_LMOUSE			= 337
DIK_keys.DIK_RMOUSE			= 338
DIK_keys.DIK_WMOUSE			= 339

-- Флаги для включения работы каллбэков
_G.extensions_flags = {
	key_press        = 1,
	key_release      = 2,
	key_hold         = 4,
	mouse_wheel      = 8,
	mouse_move       = 16,
	all              = 31
}

_G.inventory_slots = {
	-- active_slot возвращает 4294967296, а в activate_slot передавать надо 4294967295
	NO_ACTIVE_SET	= 4294967295,
	NO_ACTIVE_GET	= 4294967296,
	KNIFE		= 0,
	PISTOL		= 1,
	RIFLE		= 2,
	GRENADE		= 3,
	APPARATUS	= 4,
	BOLT 		= 5,
	OUTFIT		= 6,
	PDA			= 7,
	DETECTOR	= 8,
	TORCH		= 9,
	ARTEFACT	= 10,
	TOTAL		= 11
}
-- Движковая таблица EIIFlags для CInventoryItem
_G.ii_flags = {
	drop_manual         = 1,		-- Fdrop
	can_take            = 2,		-- FCanTake
	can_trade           = 4,		-- FCanTrade
	belt                = 8,		-- Fbelt
	ruck                = 16,		-- Fruck
	ruck_default        = 32,		-- FRuckDefault
	using_condition     = 64,		-- FUsingCondition
	allow_sprint        = 128,		-- FAllowSprint
	useful_for_npc      = 256,		-- Fuseful_for_NPC
	in_interpolation    = 512,		-- FInInterpolation
	in_interpolate      = 1024,		-- FInInterpolate
	is_quest_item       = 2048,		-- FIsQuestItem
	-- extra flags added in X-Ray Extensions
	always_tradable     = 4096,
	always_untradable   = 8192,
	ungroupable         = 16384,
	manual_highlighting = 32768,
}

_G.addon_flags = {
	scope				= 1,
	grenade_launcher	= 2,
	silencer			= 4
}
	

-- extension of namespaces Lua 
--// string
-- обрезаем пробелы по краям строки
if string.trim==nil then
	_G.trim = function (s)
		return (string.gsub(s, "^%s*(.-)%s*$", "%1"))
	end
else
	_G.trim = string.trim
end
-- разбивка строки по символу
string.explode = function ( str, div, clear )
	local ret = {}
	for s in string.gmatch( str, "([^"..div.."]+)" ) do
		ret[ #ret+1 ] = ( clear and trim( s ) or s )
	end
	return ret
end
-- 'string.lower/upper' с поддержкой кириллицы.
local lower = string.lower
string.lower = function ( str )
	return lower( str:gsub( "([А-Я])",
		function( s ) return string.char( s:byte()+32 ) end ):gsub( "Ё", "ё" ) )
end
local upper = string.upper
string.upper = function ( str )
	return upper( str:gsub( "([а-я])",
		function( s ) return string.char( s:byte()-32 ) end ):gsub( "ё", "Ё" ) )
end
-- очистка строки от недопустимых для имён файлов символов (используется при работе с FS)
string.clear = function ( str )
	return str:gsub( "%p", function( s ) return s:match( "[%.%-_]*" ) end )
end
--// math
-- выравнивание значения n в пределы от min до max
math.clamp = function( n, min, max )
	if min > max then
		min, max = max, min
	end
	return ( n > max and max ) or ( n < min and min ) or n
end
-- округление числа
math.round = function ( n )
	return math.floor(n + 0.5)
end
--// table
-- получаем размер таблицы (количество связок [ключ] = значение)
if table.size == nil then
	table.size = function ( t )
		local n = 0
		for _ in pairs( t ) do n = n + 1 end
		return n
	end
end
-- копируем все данные из таблицы src в таблицу tbl
table.copy = function ( tbl, src )
	for k,v in pairs( src ) do
		if type( v ) == 'table' then
			tbl[ k ] = table.copy( {}, v )
		else
			tbl[ k ] = v
		end
	end
	return tbl
end
-- поиск значения в таблице
table.find = function( tbl, val )
	local tp = type(val)
	for k,v in pairs(tbl) do
		if type(v)==tp and v==val then return true end
	end
	return false
end
-- функции для подсчета чего-либо в виде: [ключ] = количество
-- добавить
table.add = function( tbl, key, v )
	local n = tbl[key] or 0
	tbl[key] = n + (v or 1)
end
-- отнять
table.sub = function( tbl, key, v )
	local n = tbl[key] or 0
	if n <= (v or 1) then
		tbl[key] = nil
	else
		tbl[key] = n - (v or 1)
	end
end
-- получение рандомного значения из массива
table.random = function ( tbl )
	if not next(tbl) then return nil end
	return tbl[ math.random(#tbl) ]
end
-- преобразование массива в хэш: [значение] = true
table.tohash = function ( tbl )
	local ret = {}
	for i, v in ipairs( tbl ) do
		ret[ v ] = true
	end
	return ret
end
-- расширенная распечатка таблицы в лог
table.print = function( tbl, subs )
	subs = subs or ""
	local s
	for k,v in pairs(tbl) do
		s = (type(k)=="userdata" and "userdata") or tostring(k)
		if type(v) == "table" then
			log1(subs..s..":table")
			table.print(v, subs.."    ")
		elseif type(v) == "function" then
			log1(subs..s..":function")
		elseif type(v) == "userdata" then
			if v.x and v.y and v.z then
				log1(subs..s..":vector")
				print_vector(v, subs.."    ")
			elseif v.k and v.j and v.i and v.c then
				log1(subs..s..":matrix")
				print_matrix(v, subs.."    ")
			elseif v.setHMSms then
				local Y, M, D, h, m, sc, ms = 0, 0, 0, 0, 0, 0, 0
				Y, M, D, h, m, sc, ms = v:get( Y, M, D, h, m, s, ms )
				log1(subs..s..":CTime")
				log1(subs.."    "..string.format("%02d:%02d:%02d:%02d %02d.%02d.%04d", h, m, sc, ms, D, M, Y))
			elseif v.id and v.name then
				if type(v.id) == "function" then
					log1(subs..s..":game_object")
					log1(subs.."    "..v:name())
				elseif type(v.id) == "number" then
					log1(subs..s..":server_object")
					log1(subs.."    "..v:name())
				else
					log1(subs..s..":userdata")
				end
			else
				log1(subs..s..":userdata")
			end
		else
			log1(subs..s..":"..tostring(v))
		end
	end
end
-- печатаем вектор
function print_vector(v, subs)
	log1((subs or "")..v.x..":"..v.y..":"..v.z)
end
-- печатаем матрицу
function print_matrix(m, subs)
	print_vector(m.i, subs)
	print_vector(m.j, subs)
	print_vector(m.k, subs)
	print_vector(m.c, subs)
end

-- class 'ini_file'
ini_file.r_string_ex = function (ini, section, line, def)
	if ini:line_exist(section, line) then
		return ini:r_string(section, line)
	end
	return def
end
ini_file.r_u32_ex = function (ini, section, line, def)
	if ini:line_exist(section, line) then
		return ini:r_u32(section, line)
	end
	return def
end
ini_file.r_float_ex = function (ini, section, line, def)
	if ini:line_exist(section, line) then
		return ini:r_float(section, line)
	end
	return def
end
ini_file.r_clsid_ex = function (ini, section, line)
	if ini:line_exist(section, line) then
		return ini:r_clsid(section, line)
	end
	return nil
end
ini_file.r_bool_ex = function (ini, section, line, def)
	if ini:line_exist(section, line) then
		return ini:r_bool(section, line)
	end
	return def
end
ini_file.r_list = function (ini, section, line, to_hash)
	if ini:line_exist(section, line) then
		local ret = string.explode( ini:r_string(section, line), ",", true )
		if to_hash then
			return table.tohash(ret)
		else
			return ret
		end
	end
	return nil
end
ini_file.r_rect = function (ini, section, line)
	if ini:line_exist(section, line) then
		local t = {}
		for n in string.gmatch(ini:r_string(section, line), "[%d%-%.]+") do
			t[#t+1] = tonumber(n)
		end
		return Frect():set( unpack(t) )
	end
	return nil
end

-- class 'game_object'
-- energy_consuming items
game_object.get_charge_level = function ( obj )
	if sys_ini:r_bool_ex( obj:section(), "energy_consuming", false ) == true then
		local binder = obj:binded_object()
		if binder and binder.get_charge_level then
			return binder:get_charge_level()
		end
		return obj:condition()
	end
	return nil
end
-- CEntityAlive
game_object.is_alive = function( obj )
	local cls = obj:clsid()
	if ( IAmAStalker[ cls ] or IAmAMonster[ cls ] ) then
		return obj:alive()
	end
	return cls == clsid.script_trader
end
game_object.is_wounded = function ( obj )
	return obj:is_stalker() and obj:alive() and obj:wounded()
end
-- CAIStalker
-- получить видимость сталкера для аномалий
local anomaly_invisibility_flag = tonumber("80000000", 16)
game_object.get_anomaly_invisibility = function ( obj )
	local fl = obj:get_actor_relation_flags()
	return fl:test( anomaly_invisibility_flag )
end
-- установить видимость сталкера для аномалий
game_object.set_anomaly_invisibility = function ( obj, vis )
	local fl = obj:get_actor_relation_flags()
	fl:set( anomaly_invisibility_flag, vis )
	obj:set_actor_relation_flags( fl )
end
-- CInventoryItem
-- вспомогательные функции для установки флагов в классе CInventoryItem
game_object.set_inventory_item_flags = function ( item, mask, value )
	local flags = item:get_inventory_item_int16( nil, 132 )
	flags = flags16():assign(flags):set(mask, value):get()
	item:set_inventory_item_int16( 132, flags )
end
game_object.has_inventory_item_flags = function ( item, mask )
	local flags = item:get_inventory_item_int16( nil, 132 )
	return bit_and(flags, mask) ~= 0
end
game_object.set_custom_color_ids = function (item, col_idx)
	ASSERT(col_idx >=0 and col_idx <=15, "[game_object.set_custom_color_ids] col_idx must be in the range [0-15]")
	local fl = bit_or(bit_and(item:get_inventory_item_int16(nil, 134), 65520), col_idx)
	item:set_inventory_item_int16(134, fl)
end
-- получить слот предмета
game_object.get_slot = function ( obj )
	return obj:get_inventory_item_int( nil, 156 )
end
-- установить слот предмету
game_object.set_slot = function ( obj, slot )
	obj:set_inventory_item_int( 156, slot )
end
-- установить цену предмету
game_object.set_cost = function ( obj, cost )
	obj:set_inventory_item_int( 160, cost )
end
-- установить вес предмету
game_object.set_weight = function ( obj, weight )
	obj:set_inventory_item_float(nil, weight, 164)
end
-- CWeaponAmmo
-- получить количество патронов в пачке
game_object.get_ammo_left = function( obj )
	return obj:get_go_int16(nil, 476)
end
-- CWeapon
-- получить addon_flags оружия
game_object.get_addon_flags = function( obj )
	return obj:get_wpn_int(nil, 936)
end
-- установить addon_flags оружию
game_object.set_addon_flags = function( obj, flags )
	return obj:set_wpn_int(936, flags)
end
-- добавить флаг в addon_flags оружию
game_object.add_addon_flags = function( obj, flags )
	local fl = obj:get_wpn_int(nil, 936)
	local new_fl = bit_or(fl, flags)
	return obj:set_wpn_int(936, new_fl)
end
-- получить индекс типа патронов
game_object.get_ammo_type = function( obj )
	return obj:get_wpn_int(nil, 1444)
end
-- CPhysicShellHolder
-- возвращает имя кости по ее индексу
game_object.get_bone_name_by_id = function( obj, bone_id )
	set_int_arg0(bone_id)
	return obj:get_bone_name()
end
-- CCustomOutfit
game_object.get_power_loss = function( obj )
	return obj:get_go_float(480)
end
game_object.set_power_loss = function( obj, v )
	return obj:set_go_float(nil, v, 480)
end
game_object.get_additional_inventory_weight = function( obj )
	return obj:get_go_float(500)
end
game_object.set_additional_inventory_weight = function( obj, v )
	return obj:set_go_float(nil, v, 500)
end
game_object.get_additional_inventory_weight2 = function( obj )
	return obj:get_go_float(504)
end
game_object.set_additional_inventory_weight2 = function( obj, v )
	return obj:set_go_float(nil, v, 504)
end

-- class alife_simulator
alife_simulator.create_no_ai = function( sim, ... )
	local obj = sim:create( ... )
	obj = sim:object( obj.id )
	obj:use_ai_locations( false )
	return obj
end
alife_simulator.create_ammo_no_ai = function( sim, ... )
	local obj = sim:create_ammo( ... )
	obj = sim:object( obj.id )
	obj:use_ai_locations( false )
	return obj
end

-- class 'net_packet'
-- read
local CTime_0 = game.CTime()
net_packet.r_vec_q8 = function( pk )
	return vector():set( pk:r_u8(), pk:r_u8(), pk:r_u8() )
end
net_packet.r_qt_q8 = function( pk )
	return { x = pk:r_u8(), y = pk:r_u8(), z = pk:r_u8(), w = pk:r_u8() }
end
net_packet.r_u64 = function( pk )
	return { pk:r_u8(), pk:r_u8(), pk:r_u8(), pk:r_u8(),
			 pk:r_u8(), pk:r_u8(), pk:r_u8(), pk:r_u8() }
end
net_packet.r_vu8u8 = function( pk )
	local t = {}
	for i = 1, pk:r_u8() do t[i] = pk:r_u8() end
	return t
end
net_packet.r_vu32u8 = function( pk )
	local t = {}
	for i = 1, pk:r_s32() do t[i] = pk:r_u8() end
	return t
end
net_packet.r_vu32u16 = function( pk )
	local t = {}
	for i = 1, pk:r_s32() do t[i] = pk:r_u16() end
	return t
end
net_packet.r_tail = function( pk )
	local t = {}
	while not pk:r_eof() do t[#t+1] = pk:r_u8() end
	return t
end
net_packet.r_CTime = function( pk )
	local Y = pk:r_u8()
	if Y ~= 0 then
		local t = game.CTime()
		local M, D, h, m, s, ms = pk:r_u8(), pk:r_u8(), pk:r_u8(), pk:r_u8(), pk:r_u8(), pk:r_u16()
		t:set( Y + 2000,  M, D, h, m, s, ms )
		return t
	else
		return CTime_0
	end
end
-- write
net_packet.w_vec_q8 = function( pk, v )
	pk:w_u8( v.x ); pk:w_u8( v.y ); pk:w_u8( v.z )
end
net_packet.w_qt_q8 = function( pk, v )
	pk:w_u8( v.x ); pk:w_u8( v.y ); pk:w_u8( v.z ); pk:w_u8( v.w )
end
net_packet.w_u64 = function( pk, v )
	for i = 1, 8 do pk:w_u8( v[i] ) end
end
net_packet.w_vu8u8 = function( pk, v )
	local n = #v
	pk:w_u8( n )
	for i = 1, n do pk:w_u8( v[i] ) end
end
net_packet.w_vu32u8 = function( pk, v )
	local n = #v
	pk:w_s32( n )
	for i = 1, n do pk:w_u8( v[i] ) end
end
net_packet.w_vu32u16 = function( pk, v )
	local n = #v
	pk:w_s32( n )
	for i = 1, n do pk:w_u16( v[i] ) end
end
net_packet.w_tail = function( pk, v )
	for i, n in ipairs( v ) do
		pk:w_u8( n )
	end
end
net_packet.w_CTime = function( pk, v )
	if v and v ~= CTime_0 then
		local Y, M, D, h, m, s, ms = 0, 0, 0, 0, 0, 0, 0
		Y, M, D, h, m, s, ms = v:get( Y, M, D, h, m, s, ms )
		pk:w_u8 ( Y - 2000 ); pk:w_u8 ( M ); pk:w_u8 ( D )
		pk:w_u8 ( h ); pk:w_u8 ( m ); pk:w_u8 ( s ); pk:w_u16( ms )
	else
		pk:w_u8 ( 0 )
	end
end

-- class 'Frect'
Frect.mul = function ( rect, x, y )
	if y==nil then y = x end
	rect.x1 = rect.x1*x; rect.y1 = rect.y1*y;
	rect.x2 = rect.x2*x; rect.y2 = rect.y2*y;
	return rect
end
Frect.div = function ( rect, x, y )
	if y==nil then y = x end
	rect.x1 = rect.x1/x; rect.y1 = rect.y1/y;
	rect.x2 = rect.x2/x; rect.y2 = rect.y2/y;
	return rect
end
Frect.width = function ( rect )
	return rect.x2 - rect.x1
end
Frect.height = function ( rect )
	return rect.y2 - rect.y1
end
Frect.shrink = function ( rect, x, y )
	rect.x1=rect.x1+x; rect.y1=rect.y1+y;
	rect.x2=rect.x2-x; rect.y2=rect.y2-y;
	return rect
end
Frect.grow = function ( rect, x, y )
	rect.x1=rect.x1-x; rect.y1=rect.y1-y;
	rect.x2=rect.x2+x; rect.y2=rect.y2+y;
	return rect
end
Frect.intersected = function ( r1, r2 )
	return r1.x1>r2.x2 or r1.x2<r2.x1 or r1.y1>r2.y2 or r1.y2<r2.y1
end
Frect.center = function ( rect )
	return vector2():set(
		(rect.x2 - rect.x1) /2,
		(rect.y2 - rect.y1) /2
	)
end

-- class 'CGameFont'
CGameFont.alVTop	= 0
CGameFont.alVCenter	= 1
CGameFont.alVBottom	= 2

-- class 'CUIScriptWnd'
local wnd_id        = 1
local registered_windows = {}
CUIScriptWnd.AddCallbackEx = function ( self, ui_name, ui_event, func, ... )
	local id = self.__CUIScriptWnd_id
	if id == nil then
		id = wnd_id
		wnd_id = wnd_id + 1
		self.__CUIScriptWnd_id = id
		registered_windows[ id ] = {}
		registered_windows[ id ]["__window"] = self
	end
	if registered_windows[ id ][ ui_name ] == nil then
		registered_windows[ id ][ ui_name ] = {}
	end
	registered_windows[ id ][ ui_name ][ ui_event ] = { ... }

	self:AddCallback( ui_name, ui_event,
		function ( i )
			local t = registered_windows[ i ]
			if t then
				local wnd = t["__window"]
				local p = t[ ui_name ][ ui_event ]
				func( wnd, unpack( p ) )
			else
				log( "[CUIScriptWnd]: ignore callback for unregistered window %s: ui_name = %s, ui_event = %s",
					i, ui_name, ui_event )
			end
		end,
	id )
end
CUIScriptWnd.ClearCallbacks = function ( self )
	local id = self.__CUIScriptWnd_id
	if id == nil then
	--	log( "~ CUIScriptWnd.ClearCallbacks : __CUIScriptWnd_id not found" )
	elseif registered_windows[ id ] == nil then
		log( "~ CUIScriptWnd.ClearCallbacks : CUIScriptWnd with id %s is already unregistered", id )
	else
		if self.__reg_childs then
			for i, v in ipairs( self.__reg_childs ) do
				registered_windows[ v ]["__window"] = nil
				registered_windows[ v ] = nil
			end
			self.__reg_childs = nil
		end
		registered_windows[ id ]["__window"] = nil
		registered_windows[ id ] = nil
	end
--	log("CUIScriptWnd.ClearCallbacks [%s]: registered windows count [%d]", tostring(id), table.size(registered_windows) )
end
CUIScriptWnd.RegisterChild = function( self, child )
	if child.__CUIScriptWnd_id == nil then return end

	local id = self.__CUIScriptWnd_id
	if id == nil then
		id = wnd_id
		wnd_id = wnd_id + 1
		self.__CUIScriptWnd_id = id
		registered_windows[ id ] = {}
		registered_windows[ id ]["__window"] = self
	--	log("CUIScriptWnd.RegisterChild: parent window has no __CUIScriptWnd_id" )
	end

	if self.__reg_childs == nil then
		self.__reg_childs = {}
	end
	table.insert( self.__reg_childs, child.__CUIScriptWnd_id )
end
CUIScriptWnd.InitEditBoxEx = function ( self, stat, pos_x, pos_y, width, type )
	local w = ui_edit_box_ru.CUIEditBox_new( stat, pos_x, pos_y, width, type )
	self:RegisterChild( w )
	return w
end
CUIScriptWnd.InitSpinNum = function ( self, stat, pos_x, pos_y, width, p )
	local w = ui_spin_num.CUISpinNum( stat, pos_x, pos_y, width, p )
	self:RegisterChild( w )
	return w
end
CUIScriptWnd.InitSpinStr = function ( self, stat, pos_x, pos_y, width, p )
	local w = ui_spin_str.CUISpinStr( stat, pos_x, pos_y, width, p )
	self:RegisterChild( w )
	return w
end
CUIScriptWnd.GetCursorPos = function ( self )
	return vector2():set( self:GetCursorX(), self:GetCursorY() )
end

-- class 'CUIStatic'
CUIStatic.GetWndSize = function(wnd)
	return vector2():set( wnd:GetWidth(), wnd:GetHeight() )
end

-- class 'CUIGameCustom'
CUIGameCustom.ReloadCustomStatic = function (hud, cs_name)
	local st = hud:GetCustomStatic(cs_name)
	if st then
		local text = st:wnd():GetText()
		local endTime = st.m_endTime
		hud:RemoveCustomStatic(cs_name)
		st = hud:AddCustomStatic(cs_name, true)
		local wnd = st:wnd()
		wnd:SetTextComplexMode(true)
		wnd:SetTextST(text)
		st.m_endTime = endTime
	end
end

-- namespace 'level'
level.change_game_time = function (m, h, d)	-- minutes, hours, days
	level.advance_game_time((m or 0) * 60000 + (h or 0) * 3600000 + (d or 0) * 86400000)
end
level.vertex_id_by_pos = function ( position )
	Actor:set_vector_global_arg_1( position )
	return level.vertex_id()
end
level.__time_factor = sys_ini:r_u32("alife", "time_factor")
level.get_time_factor_old = level.get_time_factor
level.get_time_factor = function()
	return level.__time_factor
end
level.set_time_factor_old = level.set_time_factor
level.set_time_factor = function(factor)
	level.set_time_factor_old(factor)
	level.__time_factor = factor
end
level.invalid_vertex_id = 4294967296

-- запускает эффектор шатания камеры с заданными параметрами
level.add_cam_effector3 = function(total_time, amplitude, period_number, power)
	level.set_ce_time(total_time)
	level.set_ce_amplitude(amplitude)
	level.set_ce_period_number(period_number)
	level.set_ce_power(power)
	level.add_ce()
end

-- namespace 'relation_registry'
relation_registry.get_goodwill = function (who_id, to_whom_id)
	return GetGoodwill(who_id, to_whom_id)
end
relation_registry.set_goodwill = function (who_id, to_whom_id, goodwill)
	return Actor:set_goodwill_ex(who_id, to_whom_id, goodwill)
end
relation_registry.change_goodwill = function (who_id, to_whom_id, goodwill_change)
	return Actor:change_goodwill_ex(who_id, to_whom_id, goodwill_change)
end

-- global functions
_G.old_user_name = user_name
_G.user_name = function( name )
	if name == nil then
		return game_options.UserName or old_user_name()
	elseif type( name ) == "string" then
		game_options.UserName = string.clear( name )
		return true
	end
	log("! Wrong user name: %s", utils.to_str( name ) )
	return false
end

--tmr:stop()
--log1( "# loading xray_extensions: "..tostring(tmr:time()) )
