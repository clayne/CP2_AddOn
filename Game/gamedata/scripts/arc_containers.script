-- -*- mode: lua; encoding: windows-1251 -*-
local inv_containers = {}


function on_take_container(item)
	local cont_section = item:section()
	if not sys_ini:line_exist(cont_section, "container_slots") then return false end

	local cont_id = item:id()
	local arts = inv_containers[cont_id]
	if arts == nil then
		arts = get_container_arts(cont_id)
		inv_containers[cont_id] = arts
	end

	local slots = sys_ini:r_u32(cont_section, "container_slots")
	local rad_protect = sys_ini:r_float(cont_section, "rad_protection")

	for i = 1, slots do
		if arts and arts[i] and arts[i].s ~= "_" then
			local inv_rad = sys_ini:r_float(arts[i].s, "radiation_restore_speed") * ( 1 - (arts[i].ar or 0) )
			inv_rad = math.max(inv_rad, 0)
			if inv_rad > rad_protect then
				arc_radiation.change_inv_radiation(inv_rad-rad_protect)
			end
		end
	end

	return true
end

function on_lose_container( item )
	local arts = inv_containers[ item:id() ]
	if not arts then return end

	local rad_protect = sys_ini:r_float( item:section(), "rad_protection" )
	for i, v in ipairs( arts ) do
		if v.s ~= "_" then
			local inv_rad = sys_ini:r_float( v.s, "radiation_restore_speed" ) * ( 1 - (v.ar or 0) )
			inv_rad = math.max( inv_rad, 0 )
			if inv_rad > rad_protect then
				arc_radiation.change_inv_radiation( rad_protect-inv_rad )
			end
		end
	end
	inv_containers[ item:id() ] = nil
end

function on_use_container(item)
	if not inv_containers[ item:id() ] then return false end

	arc_ui_container_menu.show_menu(item)
end

function get_container_arts( cont_id )
	local sobj = AI:object( cont_id )
	if sobj==nil then
		log("! [arc_containers.get_container_arts] sobj with id [%s] is nil!", cont_id)
		return nil
	end

	if inv_containers[cont_id] then
		return inv_containers[cont_id]
	end

	local tbl = netpk:get(sobj, netpk.fState)
	local cd = netpk:parse_custom_data(tbl.custom_data)

	local ret = {}

	if cd and cd.arts then
		local sect, cond, loss, tr
		for n, str in pairs( cd.arts ) do
			sect, cond, loss, tr = unpack( string.explode(str, ":", true) )
			ret[ tonumber(n) ] = {
				s = sect,
				c = tonumber(cond) or 1,
				ar = tonumber(loss) or 0,
				tr = (tr == "true")
			}
		end
	else
		local count = sys_ini:r_u32( sobj:section_name(), "container_slots" )
		for i = 1, count do
			ret[i] = { s = "_", c = 1, ar = 0, tr = false }
		end
	end

	inv_containers[cont_id] = ret
	-- log("# get_container_arts[%s]", sobj.id)
	-- table.print(ret)

	return ret
end

function set_container_arts(cont_id, arts)
	local sobj = AI:object(cont_id)
	if sobj==nil then
		log("! [arc_containers.set_container_arts] sobj with id [%s] is nil!", cont_id)
		return false
	end

	local t = {}
	for i, v in ipairs(arts) do
		t[ tostring(i) ] = string.format( 
			"%s:%s:%s:%s",
			v.s,
			(v.c or 1),
			(v.ar or 0),
			tostring(v.tr==true)
		)
	end

	local data = {
		custom_data = netpk:gen_custom_data( { ['arts'] = t } )
	}
	netpk:modify( sobj, data, netpk.fState )

	local cont = level.object_by_id(cont_id)
	if cont then
		local bFlag = cont:get_weight() ~= sys_ini:r_float(cont:section(), "inv_weight")
		cont:set_inventory_item_flags(ii_flags.ungroupable, bFlag)
	end

	inv_containers[cont_id] = arts

	return true
end

function remove_art(cont_id, art_index)
	local arts = inv_containers[cont_id]
	if not arts then return end

	arts[art_index].s = "_"
	arts[art_index].c = 1
	arts[art_index].ar = 0
	arts[art_index].tr = false
end

function insert_art(cont_id, art, art_index)
	local arts = inv_containers[cont_id]
	if not arts then return end

	arts[art_index] = {
		s = art:section(),
		c = art:condition(),
		ar = art.art_loss or 0,
		tr = art.transformed == true
	}
end

function change_container_params(cont_id, weight_delta, cost_delta)
	local cont = level.object_by_id(cont_id)
	if cont then
		if weight_delta ~= 0 then
			cont:set_weight( cont:get_weight() + weight_delta )
		end
		if cost_delta ~= 0 then
			cont:set_cost( cont:cost() + cost_delta )
		end
	end
end

--========================================================================================--
class "container_binder" (object_binder)

function container_binder:__init(obj)
	super(obj)
end

function container_binder:net_spawn(sobj)
	if not object_binder.net_spawn(self, sobj) then
		return false
	end

	local arts = get_container_arts(self.object:id())
	if arts then
		local add_weight = 0
		local add_cost = 0
		for i, v in ipairs(arts) do
			if v.s ~= "_" then
				add_weight = add_weight + sys_ini:r_float(v.s, "inv_weight")
				add_cost = add_cost + sys_ini:r_u32(v.s, "cost")*(v.c or 1) * (1 - (v.ar or 0))
			end
		end
		local ungroup = false
		if add_weight > 0 then
			self.object:set_weight( self.object:get_weight() + add_weight )
			ungroup = true
		end
		if add_cost > 0 then
			self.object:set_cost( self.object:cost() + add_cost )
			ungroup = true
		end
		if ungroup then
			self.object:set_inventory_item_flags(ii_flags.ungroupable, true)
		end
	end

	return true
end


function init(obj)
	local binder = container_binder(obj)
	obj:bind_object(binder)
end

--===================================================================
function attach()
	xr_s.subscribe("item_take", this.on_take_container)
	xr_s.subscribe("item_use", this.on_use_container)
	xr_s.subscribe("item_drop", this.on_lose_container)
end
